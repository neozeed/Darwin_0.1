/*
 * Copyright (c) 1999 Apple Computer, Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * Portions Copyright (c) 1999 Apple Computer, Inc.  All Rights
 * Reserved.  This file contains Original Code and/or Modifications of
 * Original Code as defined in and that are subject to the Apple Public
 * Source License Version 1.1 (the "License").  You may not use this file
 * except in compliance with the License.  Please obtain a copy of the
 * License at http://www.apple.com/publicsource and read it before using
 * this file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE OR NON- INFRINGEMENT.  Please see the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * @APPLE_LICENSE_HEADER_END@
 */
/*	IOStubThread.h		1.0	02/07/91	(c) 1991 NeXT   
 *
 * IOStubThread.h - IOStub device thread support.
 *
 * HISTORY
 * 07-Feb-91    Doug Mitchell at NeXT
 *      Created.
 */

#ifndef	_IOSTUB_THREAD_
#define _IOSTUB_THREAD_

#import <driverkit/return.h>
#import <objc/objc.h>
#import <mach/cthreads.h>
#import <kernserv/queue.h>
#import "IOStub.h"

/*
 * Operations performed by IOStub's I/O thread.
 */
typedef enum {
	STUB_READ, 
	STUB_WRITE, 
	STUB_ZERO, 
	STUB_ABORT
} stub_cmd_t;

/*
 * Representation of one I/O. This is generated by the device's exported
 * methods and enqueued on IOQueue to be serviced by the I/O thread.
 */
typedef struct {

	stub_cmd_t	cmd;		/* op to perform */
	unsigned	offset;		/* block # */
	unsigned	bytesReq;	/* bytes to move */
	void		*buf;		/* where to r/w */
	unsigned	*bytesXfr;	/* bytes actually moved (RETURNED) */
	IOReturn	status;		/* result (RETURNED) */
	void 		*pending;	/* if non-zero, async request; this is
					 * used to ioComplete: the operation.
					 */
	id		waitLock;	/* NXConditionLock. Sync I/O waits on 
					 * this. */
	int		dirRead;	/* Written by command-specific code.
					 * Specifies direction of data 
					 * transfer. A hack which should go 
					 * away with RO support. */
	queue_chain_t	link;		/* for linking on ioQueue */
	
} IOBuf_t;

@interface IOStub(Thread)

- (void)enqueueIoBuf : (IOBuf_t *)buf;
- (IOBuf_t *)dequeueIoBuf;

@end


extern void IOStub_thread(IOStub *stubId);

#endif	_IOSTUB_THREAD_
