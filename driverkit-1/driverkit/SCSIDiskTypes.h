/*
 * Copyright (c) 1999 Apple Computer, Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * Portions Copyright (c) 1999 Apple Computer, Inc.  All Rights
 * Reserved.  This file contains Original Code and/or Modifications of
 * Original Code as defined in and that are subject to the Apple Public
 * Source License Version 1.1 (the "License").  You may not use this file
 * except in compliance with the License.  Please obtain a copy of the
 * License at http://www.apple.com/publicsource and read it before using
 * this file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE OR NON- INFRINGEMENT.  Please see the
 * License for the specific language governing rights and limitations
 * under the License.
 * 
 * @APPLE_LICENSE_HEADER_END@
 */
/* 	Copyright (c) 1991 NeXT Computer, Inc.  All rights reserved. 
 *
 * SCSIDiskTypes.h - Internal #defines for SCSIDisk class.
 *
 * HISTORY
 * 13-Feb-91    Doug Mitchell at NeXT
 *      Created. 
 */

#ifndef	_BSD_DEV_M88K_SCSI_DISK_TYPES_
#define _BSD_DEV_M88K_SCSI_DISK_TYPES_

#import <driverkit/IODevice.h>
#import <driverkit/scsiTypes.h>

/*
 * sdBuf.command values.
 */
typedef enum {
	SDOP_READ, 
	SDOP_WRITE, 
	SDOP_CDB_READ, 
	SDOP_CDB_WRITE,
	SDOP_EJECT,
	SDOP_ABORT,			// abort everything in ioQueueDisk
	SDOP_PROBEDISK,			// returns success if disk present,
					// only failure is IO_R_NO_DISK. Will
					// block and wait for user action.
	SDOP_ABORT_THREAD		// kill I/O Threads
} sdOp_t;

/*
 * Representation of one I/O. This is generated by the device's exported
 * methods and enqueued on ioQueue to be serviced by one of the I/O threads.
 */
typedef struct sdBuf {

	/*
	 * Fields to be written before passing to I/O thread.
	 */
	sdOp_t		command;	// op to perform 
	u_int		block;		// block # ((SDOP_{READ,WRITE} only)
	u_int		blockCnt;	// blocks to move (ditto)
	void		*buf;		// where to r/w 
	vm_task_t	client;		// address space containing *buf
	IOSCSIRequest	*scsiReq;	// parameters passed to controller
					//    (SDOP_CDB_{READ,WRITE} only)
	void		*pending;	// if non-NULL, async request; this is
					// used to ioComplete: the operation.
	id		waitLock;	// NXConditionLock - synchronous 
					//    I/O waits on this condition. 
	unsigned	needsDisk:1,	// requires disk present
			retryDisable:1;	// avoid all retries. Also, avoid 
					// logging errors to console.
	
	/*
	 * Fields written by (i.e., returned from) the I/O thread.
	 */
	u_int		bytesXfr;	// bytes actually moved
	IOReturn	status;		// result

	/*
	 * Fields used internally by the I/O thread.
	 */
	queue_chain_t	link;		// for linking on ioQueue 
	
	/* 
	 * all retry counters count down and abort at 0. 
	 */
	int		busy_retry;	// "device busy" retry 
	int		norm_retry;	// normal error retry 
	int 		notRdy_retry;	// "not ready" retry
	int		raw_retry;	// read-after-write retry

} sdBuf_t;

/*
 * Retry counts. Keep 'em low for debug...
 */
#define SD_RETRY_BUSY		10
#define SD_RETRY_NORM		5
#define SD_RETRY_NOTRDY		10
#define SD_RETRY_RAW		3

/*
 * Timeouts - all in seconds.
 */
#define SD_TIMEOUT_SIMPLE	20	// simple commands (test unit ready, 
					//   etc.)
#define SD_TIMEOUT_RW		30	// read/write
#define SD_BUSY_SLEEP		1	// time to sleep between Busy retries
#define SD_NOTRDY_SLEEP		1	// time to sleep between Not Ready 
					//   retries
#define SD_TIMEOUT_EJECT	20	// eject

/*
 * Return codes from SCSIDiskInit:
 */
typedef enum {
	SDR_GOOD,			// init succeeded
	SDR_NOTADISK,			// not a SCSI disk
	SDR_SELECTTO,			// selection timeout
	SDR_ERROR			// other error 
} sdInitReturn_t;

/*
 * Condition variable states for ioQueueLock.
 */
#define NO_WORK_AVAILABLE	0
#define WORK_AVAILABLE		1

#endif	_BSD_DEV_M88K_SCSI_DISK_TYPES_
