\input texinfo.tex
@c %**start of header
@setfilename zsh.info
@settitle zsh
@c %**end of header

@ifinfo
@set dsq @'@'
@end ifinfo
@iftex
@set dsq '{}'
@end iftex

@noindent
@setchapternewpage odd
@iftex
@finalout
@afourpaper
@end iftex
@titlepage
@title The Z Shell Guide
@subtitle Version 3.1.5
@subtitle Updated October 29, 1998
@author Original documentation by Paul Falstad
@page
This is a texinfo version of the documentation for the Z Shell, originally by 
Paul Falstad.

@noindent
Permission is granted to make and distribute verbatim copies of
this manual provided the copyright notice and this permission notice
are preserved on all copies.

@noindent
Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
entire resulting derived work is distributed under the terms of a
permission notice identical to this one.

@noindent
Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions.
@end titlepage
@c Yodl file: Zsh/guide.yo
@ifinfo
@node Top, The Z Shell Guide, (dir), (dir)
@top The Z Shell Guide
This Info file documents Zsh, a freely available UNIX command interpreter
(shell), which of the standard shells most closely resembles the Korn shell
(ksh), although it is not completely compatible.

@noindent
Version 3.1.5, last updated October 29, 1998.
@end ifinfo

@noindent
@menu
* The Z Shell Guide::
* Introduction::
* Invocation::
* Files::
* Shell Grammar::
* Redirection::
* Command Execution::
* Functions::
* Jobs & Signals::
* Arithmetic Evaluation::
* Conditional Expressions::
* Compatibility::
* Prompt Expansion::
* Restricted Shell::
* Expansion::
* Parameters::
* Options::
* Shell Builtin Commands::
* Zsh Line Editor::
* Programmable Completion::
* Zsh Modules::

@noindent
--- Indices ---

@noindent
* Concept Index::
* Variables Index::
* Options Index::
* Functions Index::
* Editor Functions Index::
* Keystroke Index::

@noindent
--- The Detailed Node Listing ---

@noindent
Introduction

@noindent
* Author::
* Availability::
* Mailing Lists::
* The Zsh FAQ::
* The Zsh Web Page::
* See Also::

@noindent
Shell Grammar

@noindent
* Simple Commands & Pipelines::
* Precommand Modifiers::
* Complex Commands::
* Alternate Forms For Complex Commands::
* Reserved Words::
* Comments::
* Aliasing::
* Quoting::

@noindent
Expansion

@noindent
* History Expansion::
* Process Substitution::
* Parameter Expansion::
* Command Substitution::
* Arithmetic Expansion::
* Brace Expansion::
* Filename Expansion::
* Filename Generation::

@noindent
Parameters

@noindent
* Local Parameters::
* Array Parameters::
* Positional Parameters::
* Parameters Set By The Shell::
* Parameters Used By The Shell::

@noindent
Options

@noindent
* Description of Options::
* Single Letter Options::

@noindent
Zsh Line Editor

@noindent
* Movement::
* History Control::
* Modifying Text::
* Arguments::
* Completion::
* Miscellaneous::

@noindent
Programmable Completion

@noindent
* Command Flags::
* Option Flags::
* Alternative Completion::
* Extended Completion::
* Example::

@noindent
Zsh Modules

@noindent
* The cap Module::
* The clone Module::
* The comp1 Module::
* The compctl Module::
* The deltochar Module::
* The example Module::
* The files Module::
* The sched Module::
* The stat Module::
* The zle Module::
@end menu
@node The Z Shell Guide, Introduction, Top, Top

@chapter The Z Shell Guide
@noindent
This document has been produced from the texinfo file @code{zsh.texi},
included in the @code{Doc} sub-directory of the Zsh distribution.

@section Producing documentation from zsh.texi
@noindent
The texinfo source may be converted into several formats:

@noindent
@table @asis
@item The Info guide
The Info format allows searching for topics, commands, functions, etc.
from the many Indices. The command `@code{makeinfo zsh.texi}' is used to
produce the Info documentation.

@item The printed guide
The command `@code{texi2dvi zsh.texi}' will output @code{zsh.dvi} which can
then be processed with @cite{dvips} and optionally @cite{gs} (Ghostscript) to
produce a nicely formatted printed guide.

@item The HTML guide
Mark Borges, @code{<mdb@@cdc.noaa.gov}, maintains an HTML version of this
guide at @code{http://www.peak.org/zsh/Doc/zsh_toc.html}.
(The HTML version is produced with @cite{texi2html}, which may be obtained
from @code{http://wwwcn.cern.ch/dci/texi2html/}. The command is
`@code{texi2html -split_chapter -expandinfo zsh.texi}'.)

@end table

@noindent
For those who do not have the necessary tools to process texinfo,
precompiled documentation (PostScript, dvi, info and HTML formats)
is available from the zsh archive site or its mirrors, in the file
@code{zsh-doc.tar.gz}. (See @ref{Availability} for a list of sites.)
@c (avoiding a yodl bug)
@c Yodl file: Zsh/intro.yo
@node Introduction, Invocation, The Z Shell Guide, Top

@chapter Introduction
@noindent
Zsh is a UNIX command interpreter (shell) usable as an interactive
login shell and as a shell script command processor.  Of the standard shells,
zsh most closely resembles @cite{ksh} but includes many enhancements.  Zsh
has command line editing, builtin spelling correction, programmable
command completion, shell functions (with autoloading), a history
mechanism, and a host of other features.
@c Yodl file: Zsh/metafaq.yo
@menu
* Author::
* Availability::
* Mailing Lists::
* The Zsh FAQ::
* The Zsh Web Page::
* See Also::
@end menu
@node Author, Availability, , Introduction

@section Author
@noindent
@cindex author
Zsh was originally written by Paul Falstad @code{<pf@@zsh.org>}.
Zsh is now maintained by the members of the zsh-workers mailing
list @code{<zsh-workers@@math.gatech.edu>}.  The development is currently
coordinated by Andrew Main (Zefram) @code{<zefram@@zsh.org>}.  The coordinator
can be contacted at @code{<coordinator@@zsh.org>}, but matters relating to
the code should generally go to the mailing list.
@node Availability, Mailing Lists, Author, Introduction

@section Availability
@noindent
Zsh is available from the following anonymous FTP sites.  These mirror
sites are kept frequently up to date.  The sites marked with @emph{(G)}
may be mirroring @code{ftp.math.gatech.edu} instead of the primary site.
The sites marked with @emph{(H)} may be mirroring @code{ftp.cs.elte.hu}
instead of the primary site.

@noindent
@table @asis
@item Primary site
@code{ftp://ftp.zsh.org/pub/zsh/}@*
@code{http://www.zsh.org/pub/zsh/}

@item Australia
@code{ftp://ftp.zsh.org/pub/zsh/}@*
@code{http://www.zsh.org/pub/zsh/}@*
@code{ftp://ftp.ips.oz.au/pub/packages/zsh/}  @emph{(G)}  @emph{(H)}

@item Denmark
@code{ftp://sunsite.auc.dk/pub/unix/shells/zsh/}

@item Finland
@code{ftp://ftp.funet.fi/pub/unix/shells/zsh/}  @emph{(H)}

@item France
@code{ftp://ftp.cenatls.cena.dgac.fr/pub/shells/zsh/}

@item Germany
@code{ftp://ftp.fu-berlin.de/pub/unix/shells/zsh/}  @emph{(H)}@*
@code{ftp://ftp.gmd.de/packages/zsh/}  @emph{(H)}@*
@code{ftp://ftp.uni-trier.de/pub/unix/shell/zsh/}  @emph{(H)}

@item Hungary
@code{ftp://ftp.cs.elte.hu/pub/zsh/}@*
@code{http://www.cs.elte.hu/pub/zsh/}@*
@code{ftp://ftp.kfki.hu/pub/packages/zsh/}  @emph{(H)}

@item Israel
@code{ftp://ftp.math.technion.ac.il/mirror/ftp.zsh.org/pub/zsh/}@*
@code{http://www.math.technion.ac.il/mirror/ftp.zsh.org/pub/zsh/}

@item Japan
@code{ftp://ftp.tohoku.ac.jp/mirror/zsh/}  @emph{(H)}@*
@code{ftp://ftp.nis.co.jp/pub/shells/zsh/}  @emph{(H)}

@item Norway
@code{ftp://ftp.uit.no/pub/unix/shells/zsh/}  @emph{(H)}

@item Romania
@code{ftp://ftp.roedu.net/pub/mirrors/ftp.zsh.org/pub/zsh/}

@item Slovenia
@code{ftp://ftp.siol.net/pub/unix/shells/zsh/}  @emph{(H)}

@item Sweden
@code{ftp://ftp.lysator.liu.se/pub/unix/zsh/}  @emph{(H)}

@item UK
@code{ftp://ftp.net.lut.ac.uk/zsh/}  @emph{(H)}@*
@code{ftp://sunsite.doc.ic.ac.uk/packages/unix/shells/zsh/}  @emph{(G)}

@item USA
@code{ftp://ftp.math.gatech.edu/pub/zsh/}@*
@code{ftp://uiarchive.uiuc.edu/pub/packages/shells/zsh/}@*
@code{ftp://ftp.sterling.com/zsh/}  @emph{(G)}  @emph{(H)}@*
@code{ftp://ftp.rge.com/pub/shells/zsh/}  @emph{(G)}  @emph{(H)}@*
@code{ftp://foad.org/pub/zsh/}@*
@code{http://foad.org/zsh/}

@end table
@node Mailing Lists, The Zsh FAQ, Availability, Introduction

@section Mailing Lists
@noindent
@cindex mailing lists
Zsh has 3 mailing lists:

@noindent
@table @asis
@item @code{<zsh-announce@@math.gatech.edu>}
Announcements about releases, major changes in the shell and the
monthly posting of the Zsh FAQ.  (moderated)

@item @code{<zsh-users@@math.gatech.edu>}
User discussions.

@item @code{<zsh-workers@@math.gatech.edu>}
Hacking, development, bug reports and patches.

@end table

@noindent
To subscribe, send mail with the SUBJECT `@code{subscribe} @var{<e-mail-address>}'
to the associated administrative address for the mailing list.

@noindent
@table @asis
@item @code{<zsh-announce-request@@math.gatech.edu>}
@item @code{<zsh-users-request@@math.gatech.edu>}
@item @code{<zsh-workers-request@@math.gatech.edu>}
@end table

@noindent
Unsubscribing is done similarly.

@noindent
YOU ONLY NEED TO JOIN ONE OF THE MAILING LISTS AS THEY ARE NESTED.
All submissions to @cite{zsh-announce} are automatically forwarded to
@cite{zsh-users}.  All submissions to @cite{zsh-users} are automatically
forwarded to @cite{zsh-workers}.

@noindent
If you have problems subscribing/unsubscribing to any of the mailing
lists, send mail to @code{<listmaster@@zsh.org>}.  The mailing lists are
maintained by Richard Coleman @code{<coleman@@zsh.org>}.

@noindent
The mailing lists are archived; the archives can be accessed via the
administrative addresses listed above.  There is also a hypertext
archive, maintained by Geoff Wing @code{<gcw@@zsh.org>}, available at
@code{http://www.zsh.org/mla/}.
@node The Zsh FAQ, The Zsh Web Page, Mailing Lists, Introduction

@section The Zsh FAQ
@noindent
Zsh has a list of Frequently Asked Questions (FAQ), maintained by
Peter Stephenson @code{<pws@@zsh.org>}.  It is regularly posted to the
newsgroup @cite{comp.unix.shell} and the @cite{zsh-announce} mailing list.
The latest version can be found at any of the Zsh FTP sites, or at
@code{http://www.zsh.org/FAQ/}.  The contact address for FAQ-related matters
is @code{<faqmaster@@zsh.org>}.
@node The Zsh Web Page, See Also, The Zsh FAQ, Introduction

@section The Zsh Web Page
@noindent
Zsh has a web page which is located at @code{http://www.zsh.org/}.  This is
maintained by Karsten Thygesen @code{<karthy@@zsh.org>}, of SunSITE Denmark.
The contact address for web-related matters is @code{<webmaster@@zsh.org>}.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/seealso.yo
@node See Also, , The Zsh Web Page, Introduction

@section See Also
@noindent
man page sh(1),
man page csh(1),
man page tcsh(1),
man page rc(1),
man page bash(1),
man page ksh(1)

@noindent
@cite{IEEE Standard for information Technology -
Portable Operating System Interface (POSIX) -
Part 2: Shell and Utilities},
IEEE Inc, 1993, ISBN 1-55937-255-9.
@c (avoiding a yodl bug)
@c (avoiding a yodl bug)
@c Yodl file: Zsh/invoke.yo
@node Invocation, Files, Introduction, Top

@chapter Invocation
@noindent
@cindex invocation

@section Invocation Options
@noindent
@cindex flags, shell
@cindex shell flags
If the @code{-s} flag is not present and an argument is given,
the first argument is taken to be the pathname of a script to
execute.  The remaining arguments are assigned to the positional
parameters.  The following flags are interpreted by the shell
when invoked:

@noindent
@table @asis
@item @code{-c} @var{string}
Read commands from @var{string}.

@item @code{-i}
Force shell to be interactive.

@item @code{-s}
Read command from the standard input.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/files.yo
@node Files, Shell Grammar, Invocation, Top

@chapter Files
@noindent

@section Startup/Shutdown Files
@noindent
@cindex files, startup
@cindex startup files
@cindex files, shutdown
@cindex shutdown files
@pindex NO_RCS, use of
Commands are first read from @code{/etc/zshenv}.
If the @code{RCS} option is unset
within @code{/etc/zshenv}, all other
initialization files are skipped.
Otherwise, commands are read
from @code{$ZDOTDIR/.zshenv}.
@pindex LOGIN, use of
If the shell is a login shell, commands
are read from @code{/etc/zprofile} and then @code{$ZDOTDIR/.zprofile}.
Then, if the shell is interactive,
commands are read from @code{/etc/zshrc} and then @code{$ZDOTDIR/.zshrc}.
Finally, if the shell is a login shell, @code{/etc/zlogin} and
@code{$ZDOTDIR/.zlogin} are read.

@noindent
If @code{ZDOTDIR} is unset, @code{HOME} is used instead.
Those files listed above as being in @code{/etc} may be in another
directory, depending on the installation.
@c Yodl file: Zsh/filelist.yo

@section Files
@noindent
@cindex files used
@table @asis
@item @code{$ZDOTDIR/.zshenv}
@item @code{$ZDOTDIR/.zprofile}
@item @code{$ZDOTDIR/.zshrc}
@item @code{$ZDOTDIR/.zlogin}
@item @code{$ZDOTDIR/.zlogout}
@item @code{$@{TMPPREFIX@}*}   (default is /tmp/zsh*)
@item @code{/etc/zshenv}
@item @code{/etc/zprofile}
@item @code{/etc/zshrc}
@item @code{/etc/zlogin}
@item @code{/etc/zlogout}   (installation-specific - @code{/etc} is the default)
@end table
@c (avoiding a yodl bug)
@c (avoiding a yodl bug)
@c Yodl file: Zsh/grammar.yo
@node Shell Grammar, Redirection, Files, Top

@chapter Shell Grammar
@noindent
@cindex shell grammar
@cindex grammar, shell
@menu
* Simple Commands & Pipelines::
* Precommand Modifiers::
* Complex Commands::
* Alternate Forms For Complex Commands::
* Reserved Words::
* Comments::
* Aliasing::
* Quoting::
@end menu
@node Simple Commands & Pipelines, Precommand Modifiers, , Shell Grammar

@section Simple Commands & Pipelines
@noindent
@cindex simple commands
@cindex commands, simple
A @emph{simple command} is a sequence of optional parameter
assignments followed by blank-separated words,
with optional redirections interspersed.
The first word is the command to be executed, and the remaining
words, if any, are arguments to the command.
If a command name is given, the parameter assignments modify
the environment of the command when it is executed.
The value of a simple command is its exit status,
or 128 plus the signal number if terminated by a signal.

@noindent
@cindex pipeline
A @emph{pipeline} is either a simple command, or a sequence of two or more
simple commands where each command is separated from the next by `@code{|}'
or `@code{|&}'.  Where commands are separated by `@code{|}', the standard
output of the first command is connected to the
standard input of the next.  `@code{|&}' is shorthand for `@code{2>&1 |}', which
connects both the standard output and the standard error of the
command to the standard input of the next.  The value of a pipeline
is the value of the last command, unless the pipeline is preceded by
`@code{!}' in which case the value is the logical inverse of the value of the
last command.

@noindent
@findex coproc
@cindex coprocess
If a pipeline is preceded by `@code{coproc}', it is executed as a coprocess;
a two-way pipe is established between it and the parent shell.  The
shell can read from or write to the coprocess by means of the `@code{>&p}'
and `@code{<&p}' redirection operators or with `@code{print -p}' and `@code{read -p}'.
A pipeline cannot be preceded by both `@code{coproc}' and `@code{!}'.

@noindent
@cindex sublist
A @emph{sublist} is either a single pipeline, or a sequence of two or more
pipelines separated by `@code{&&}' or `@code{||}'.  If two pipelines are separated
by `@code{&&}', the second pipeline is executed only if the first succeeds
(returns a zero value).  If two pipelines are separated by `@code{||}', the
second is executed only if the first fails (returns a nonzero value).
Both operators have equal precedence and are left associative.
The value of the sublist is the value of the last pipeline executed.

@noindent
@cindex list
A @emph{list} is a sequence of zero or more sublists, in which each sublist
is terminated by `@code{;}', `@code{&}', `@code{&|}', `@code{&!}', or a newline.
This terminator
may optionally be omitted from the last sublist in the list when the
list appears as a complex command inside `@code{(}...@code{)}'
or `@code{@{}...@code{@}}'.  When a
sublist is terminated by `@code{;}' or newline, the shell waits for it to
finish before executing the next sublist.  If a sublist is terminated
by a `@code{&}', `@code{&|}', or `@code{&!}',
the shell executes it in the background, and
does not wait for it to finish.
A backgrounded sublist returns a status of zero.
@node Precommand Modifiers, Complex Commands, Simple Commands & Pipelines, Shell Grammar

@section Precommand Modifiers
@noindent
@cindex precommand modifiers
@cindex modifiers, precommand
A simple command may be preceded by a @emph{precommand modifier},
which will alter how the command is interpreted.  These modifiers are
shell builtin commands with the exception of @code{nocorrect} which is
a reserved word.

@noindent
@table @asis
@item @code{-}
The command is executed with a `@code{-}' prepended to its
@code{argv[0]} string.

@item @code{noglob}
Filename generation (globbing) is not performed on any of
the words.

@item @code{nocorrect}
Spelling correction is not done on any of the words.

@item @code{exec}
The command is executed in the parent shell without forking.

@item @code{command}
The command word is taken to be the name of an external command,
rather than a shell function or builtin.

@item @code{builtin}
The command word is taken to be the name of a builtin command,
rather than a shell function or external command.

@end table
@node Complex Commands, Alternate Forms For Complex Commands, Precommand Modifiers, Shell Grammar

@section Complex Commands
@noindent
@cindex complex commands
@cindex commands, complex
A @emph{complex command} in zsh is one of the following:

@noindent
@table @asis
@findex if
@cindex if construct
@item @code{if} @var{list} @code{then} @var{list} [ @code{elif} @var{list} @code{then} @var{list} ] ... [ @code{else} @var{list} ] @code{fi}
The @code{if} @var{list} is executed, and if it returns a zero exit status,
the @code{then} @var{list} is executed.
Otherwise, the @code{elif} @var{list} is executed and if its value is zero,
the @code{then} @var{list} is executed.
If each @code{elif} @var{list} returns nonzero, the @code{else} @var{list} is executed.

@findex for
@cindex for loops
@cindex loops, for
@item @code{for} @var{name} [ @code{in} @var{word} ... @var{term} ] @code{do} @var{list} @code{done}
where @var{term} is at least one newline or @code{;}.
Expand the list of @var{word}s, and set the parameter
@var{name} to each of them in turn, executing
@var{list} each time.  If the @code{in} @var{word} is omitted,
use the positional parameters instead of the @var{word}s.

@item @code{for ((} [@var{expr1}] @code{;} [@var{expr2}] @code{;} [@var{expr3}] @code{)) do} @var{list} @code{done}
The arithmetic expression @var{expr1} is evaluated first (see
@ref{Arithmetic Evaluation}).  The arithmetic expression
@var{expr2} is repeatedly evaluated until it evaluates to zero and
when non-zero, @var{list} is executed and the arithmetic expression
@var{expr3} evaluated.  If any expression is omitted, then it behaves
as if it evaluated to 1.

@findex while
@cindex while loops
@cindex loops, while
@item @code{while} @var{list} @code{do} @var{list} @code{done}
Execute the @code{do} @var{list} as long as the @code{while} @var{list}
returns a zero exit status.

@findex until
@cindex until loops
@cindex loops, until
@item @code{until} @var{list} @code{do} @var{list} @code{done}
Execute the @code{do} @var{list} as long as @code{until} @var{list}
returns a nonzero exit status.

@findex repeat
@cindex repeat loops
@cindex loops, repeat
@item @code{repeat} @var{word} @code{do} @var{list} @code{done}
@var{word} is expanded and treated as an arithmetic expression,
which must evaluate to a number @var{n}.
@var{list} is then executed @var{n} times.

@findex case
@cindex case selection
@cindex selection, case
@item @code{case} @var{word} @code{in} [ [@code{(}] @var{pattern} [ @code{|} @var{pattern} ] ... @code{)} @var{list} (@code{;;}|@code{;&}) ] ... @code{esac}
Execute the @var{list} associated with the first @var{pattern}
that matches @var{word}, if any.  The form of the patterns
is the same as that used for filename generation.  See
@ref{Filename Generation}.
If the @var{list} that is executed is terminated with @code{;&} rather than
@code{;;}, the following list is also executed.  This continues until either
a list is terminated with @code{;;} or the @code{esac} is reached.

@findex select
@cindex user selection
@cindex selection, user
@item @code{select} @var{name} [ @code{in} @var{word} ... @var{term} ] @code{do} @var{list} @code{done}
where @var{term} is one ore more newline or @code{;}.
Print the set of @var{word}s, each preceded by a number.
If the @code{in} @var{word} is omitted, use the positional parameters.
The @code{PROMPT3} prompt is printed and a line is read from standard
input.  If this line consists of the number of one of the listed
@var{word}s, then the parameter @var{name}
is set to the @var{word} corresponding to this number.
If this line is empty, the selection list is printed again.
Otherwise, the value of the parameter @var{name} is set to null.
The contents of the line read from standard input is saved
in the parameter @code{REPLY}.  @var{list} is executed
for each selection until a break or end-of-file is encountered.

@cindex subshells
@item @code{(} @var{list} @code{)}
Execute @var{list} in a subshell.  Traps set by the @code{trap} builtin
are reset to their default values while executing @var{list}.

@item @code{@{} @var{list} @code{@}}
Execute @var{list}.

@item @code{function} @var{word} ... [ @code{()} ] [ @var{term} ] @code{@{} @var{list} @code{@}}
@itemx @var{word} ... @code{()} [ @var{term} ] @code{@{} @var{list} @code{@}}
@itemx @var{word} ... @code{()} [ @var{term} ] @var{command}
where @var{term} is one or more newline or @code{;}.
Define a function which is referenced by any one of @var{word}.
Normally, only one @var{word} is provided; multiple @var{word}s
are usually only useful for setting traps.
The body of the function is the @var{list} between
the @code{@{} and @code{@}}.  See @ref{Functions}.

@cindex timing
@item @code{time} [ @var{pipeline} ]
The @var{pipeline} is executed, and timing statistics are
reported on the standard error in the form specified
by the @code{TIMEFMT} parameter.
If @var{pipeline} is omitted, print statistics about the
shell process and its children.

@cindex testing conditional expression
@item @code{[[} @var{exp} @code{]]}
Evaluates the conditional expression @var{exp}
and return a zero exit status if it is true.
See @ref{Conditional Expressions}
for a description of @var{exp}.

@end table
@node Alternate Forms For Complex Commands, Reserved Words, Complex Commands, Shell Grammar

@section Alternate Forms For Complex Commands
@noindent
@cindex alternate forms for complex commands
@cindex commands, alternate forms for complex
Many of zsh's complex commands have alternate forms.  These particular
versions of complex commands should be considered deprecated and may be
removed in the future.  The versions in the previous section should be
preferred instead.  The short versions below only work if @var{sublist}
is of the form `@code{@{} @var{list} @code{@}}' or if the @code{SHORT_LOOPS}
option is set.

@noindent
@table @asis
@item @code{if} @var{list} @code{@{} @var{list} @code{@}} [ @code{elif} @var{list} @code{@{} @var{list} @code{@}} ] ... [ @code{else @{} @var{list} @code{@}} ]
An alternate form of @code{if}.

@item @code{if} @var{list} @var{sublist}
A short form of the alternate `if'.

@item @code{for} @var{name} @code{(} @var{word} ... @code{)} @var{sublist}
A short form of @code{for}.

@item @code{for} @var{name} [ @code{in} @var{word} ... @var{term} ] @var{sublist}
where @var{term} is at least one newline or @code{;}.
Another short form of @code{for}.

@item @code{for ((} [@var{expr1}] @code{;} [@var{expr2}] @code{;} [@var{expr3}] @code{))} @var{sublist}
A short form of the arithmetic @code{for} command.

@item @code{foreach} @var{name} @code{(} @var{word} ... @code{)} @var{list} @code{end}
Another form of @code{for}.

@item @code{while} @var{list} @code{@{} @var{list} @code{@}}
An alternative form of @code{while}.

@item @code{until} @var{list} @code{@{} @var{list} @code{@}}
An alternative form of @code{until}.

@item @code{repeat} @var{word} @var{sublist}
This is a short form of @code{repeat}.

@item @code{case} @var{word} @code{@{} [ [@code{(}] @var{pattern} [ @code{|} @var{pattern} ] ... @code{)} @var{list} (@code{;;}|@code{;&}) ] ... @code{@}}
An alternative form of @code{case}.

@item @code{select} @var{name} [ @code{in} @var{word} @var{term} ] @var{sublist}
where @var{term} is at least one newline or @code{;}.
A short form of @code{select}.

@end table
@node Reserved Words, Comments, Alternate Forms For Complex Commands, Shell Grammar

@section Reserved Words
@noindent
@cindex reserved words
@findex disable, use of
The following words are recognized as reserved words when used as the first
word of a command unless quoted or disabled using @code{disable -r}:

@noindent
@code{do done esac then elif else fi for case
if while function repeat time until
select coproc nocorrect foreach end ! [[ @{ @}}

@noindent
Additionally, `@code{@}}' is recognized in any position if the @code{IGNORE_BRACES} option
is not set.
@node Comments, Aliasing, Reserved Words, Shell Grammar

@section Comments
@noindent
@cindex comments
@pindex INTERACTIVE_COMMENTS, use of
@vindex histchars, use of
In noninteractive shells, or in interactive shells with the
@code{INTERACTIVE_COMMENTS} option set, a word beginning
with the third character of the @code{histchars} parameter
(`@code{#}' by default) causes that word and all the following
characters up to a newline to be ignored.
@node Aliasing, Quoting, Comments, Shell Grammar

@section Aliasing
@noindent
@cindex aliasing
Every token in the shell input is checked to see if there
is an alias defined for it.
If so, it is replaced by the text of the alias if it is in command
position (if it could be the first word of a simple command),
or if the alias is global.
If the text ends with a space, the next word in the shell input
is treated as though it were in command position for purposes of alias
expansion.
@findex alias, use of
@cindex aliases, global
An alias is defined using the @code{alias} builtin; global aliases
may be defined using the @code{-g} option to that builtin.

@noindent
Alias substitution is done on the shell input before any
other substitution except history substitution.  Therefore,
if an alias is defined for the word @code{foo}, alias substitution
may be avoided by quoting part of the word, e.g. @code{\foo}.
But there is nothing to prevent an alias being defined
for @code{\foo} as well.
@node Quoting, , Aliasing, Shell Grammar

@section Quoting
@noindent
@cindex quoting
A character may be @var{quoted} (that is, made
to stand for itself) by preceding it with a `@code{\}'.
`@code{\}' followed by a newline is ignored.

@noindent
A string enclosed between `@code{$'}' and `@code{'}' is
processed the same way as the string arguments of the
@code{print} builtin, and the resulting string is considered to be
entirely quoted.  A literal `@code{'}' character can be included in the
string by using the `@code{\'}' escape.

@noindent
All characters enclosed between a pair of single quotes (@code{@value{dsq}}) that
is not preceded by a `@code{$}' are quoted.  A single quote cannot appear
within single quotes.

@noindent
Inside double quotes (@code{""}), parameter and
command substitution occurs, and `@code{\}' quotes the characters
`@code{\}', `@code{`}', `@code{"}', and `@code{$}'.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/redirect.yo
@node Redirection, Command Execution, Shell Grammar, Top

@chapter Redirection
@noindent
@cindex redirection
@cindex file descriptors
@cindex descriptors, file
If a command is followed by @code{&}
and job control is not active,
then the default standard input
for the command is the empty file @code{/dev/null}.
Otherwise, the environment for the execution of a command contains the
file descriptors of the invoking shell as modified by
input/output specifications.

@noindent
The following may appear anywhere in a simple command
or may precede or follow a complex command.
Substitution occurs before @var{word} or @var{digit}
is used except as noted below.
If the result of substitution on @var{word}
produces more than one filename,
redirection occurs for each
separate filename in turn.

@noindent
@table @asis
@item @code{<} @var{word}
Open file @var{word} for reading as standard input.

@item @code{<>} @var{word}
Open file @var{word} for reading and writing as standard input.
If the file does not exist then it is created.

@item @code{>} @var{word}
Open file @var{word} for writing as standard output.
If the file does not exist then it is created.
If the file exists, and the @code{CLOBBER} option is unset,
this causes an error;
otherwise, it is truncated to zero length.

@item @code{>|} @var{word}
@itemx @code{>!} @var{word}
Same as @code{>}, except that the file is truncated to zero length
if it exists, even if @code{CLOBBER} is unset.

@item @code{>>} @var{word}
Open file @var{word} for writing in append mode as standard output.
If the file does not exist, and the @code{CLOBBER}
option is unset, this causes an error;
otherwise, the file is created.

@item @code{>>|} @var{word}
@itemx @code{>>!} @var{word}
Same as @code{>>}, except that the file is created if it does not
exist, even if @code{CLOBBER} is unset.

@item @code{<<}[@code{-}] @var{word}
The shell input is read up to a line that is the same as
@var{word}, or to an end-of-file.
No parameter substitution, command substitution or
filename generation is performed on @var{word}.
The resulting document, called a
@emph{here-document}, becomes the standard input.

@noindent
If any character of @var{word} is quoted with
single or double quotes or a `@code{\}',
no interpretation is placed upon the characters of the document.
Otherwise, parameter and command substitution
occurs, `@code{\}' followed by a newline is removed,
and `@code{\}' must be used to quote the characters
`@code{\}', `@code{$}', `@code{`}' and the first character of @var{word}.

@noindent
If @code{<<-} is used, then all leading
tabs are stripped from @var{word} and from the document.

@item @code{<<<} @var{word}
Perform shell expansion on @var{word} and pass the result
to standard input.  This is known as a @emph{here-string}.

@item @code{<&} @var{digit}
@itemx @code{>&} @var{digit}
The standard input/output is duplicated from file descriptor
@var{digit} (see man page dup(2)).

@item @code{<& -}
@itemx @code{>& -}
Close the standard input/output.

@item @code{<& p}
@itemx @code{>& p}
The input/output from/to the coprocess is moved to the standard input/output.

@item @code{>&} @var{word}
Same as `@code{>} @var{word} @code{2>&1}'.

@item @code{>>&} @var{word}
Same as `@code{>>} @var{word} @code{2>&1}'.

@end table

@noindent
If one of the above is preceded by a digit, then the file
descriptor referred to is that specified by the digit
instead of the default 0 or 1.
The order in which redirections are specified is significant.
The shell evaluates each redirection in terms of the
(@emph{file descriptor}, @emph{file})
association at the time of evaluation.
For example:

@noindent
... @code{1>}@var{fname} @code{2>&1}

@noindent
first associates file descriptor 1 with file @var{fname}.
It then associates file descriptor 2 with the file associated with file
descriptor 1 (that is, @var{fname}).
If the order of redirections were reversed,
file descriptor 2 would be associated
with the terminal (assuming file descriptor 1 had been)
and then file descriptor 1 would be associated with file @var{fname}.

@section Multios
@noindent
@pindex MULTIOS, use of
If the user tries to open a file descriptor for writing more than once,
the shell opens the file descriptor as a pipe to a process that copies
its input to all the specified outputs, similar to @cite{tee},
provided the @code{MULTIOS} option is set.  Thus:

@noindent
@code{date >foo >bar}

@noindent
writes the date to two files, named `@code{foo}' and `@code{bar}'.
Note that a pipe is an implicit redirection; thus

@noindent
@code{date >foo | cat}

@noindent
writes the date to the file `@code{foo}', and also pipes it to cat.

@noindent
If the @code{MULTIOS}
option is set, the word after a redirection operator is also subjected
to filename generation (globbing).  Thus

@noindent
@code{: > *}

@noindent
will truncate all files in the current directory,
assuming there's at least one.  (Without the @code{MULTIOS}
option, it would create an empty file called `@code{*}'.)
Similarly, you can do

@noindent
@code{echo exit 0 >> *.sh}

@noindent
If the user tries to open a file descriptor for reading more than once,
the shell opens the file descriptor as a pipe to a process that copies
all the specified inputs to its output in the order
specified, similar to @cite{cat},
provided the @code{MULTIOS} option is set.  Thus

@noindent
@code{sort <foo <fubar}

@noindent
or even

@noindent
@code{sort <f@{oo,ubar@}}

@noindent
is equivalent to `@code{cat foo fubar | sort}'.

@noindent
Note that a pipe is an implicit redirection; thus

@noindent
@code{cat bar | sort <foo}

@noindent
is equivalent to `@code{cat bar foo | sort}' (note the order of the inputs).

@noindent
If the @code{MULTIOS} option is @emph{un}set,
each redirection replaces the previous redirection for that file descriptor.
However, all files redirected to are actually opened, so

@noindent
@code{echo foo > bar > baz}

@noindent
when @code{MULTIOS} is unset will truncate bar, and write `@code{foo}' into baz.

@noindent
If a simple command consists of one or more redirection operators
and zero or more parameter assignments, but no command name,
the command named in the shell variable @code{READNULLCMD} is assumed.
(If @code{READNULLCMD} is empty or not set, `@code{cat}' is used.)  Thus

@noindent
@code{< file}

@noindent
prints the contents of @code{file}.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/exec.yo
@node Command Execution, Functions, Redirection, Top

@chapter Command Execution
@noindent
@cindex command execution
@cindex execution, of commands
If a command name contains no slashes, the shell attempts to locate
it.  If there exists a shell function by that name, the function
is invoked as described in @ref{Functions}.  If there exists
a shell builtin by that name, the builtin is invoked.

@noindent
@vindex path, use of
Otherwise, the shell searches each element of @code{$path} for a
directory containing an executable file by that name.  If the
search is unsuccessful, the shell prints an error message and returns
a nonzero exit status.

@noindent
If execution fails because the file is not in executable format,
and the file is not a directory, it is assumed to be a shell
script.  @code{/bin/sh} is spawned to execute it.  If the program
is a file beginning with `@code{#!}', the remainder of the first line
specifies an interpreter for the program.  The shell will
execute the specified interpreter on operating systems that do
not handle this executable format in the kernel.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/func.yo
@node Functions, Jobs & Signals, Command Execution, Top

@chapter Functions
@noindent
@cindex functions
@findex function
The @code{function} reserved word is used to define shell functions.
Shell functions are read in and stored internally.
Alias names are resolved when the function is read.
Functions are executed like commands with the arguments
passed as positional parameters.
(See @ref{Command Execution}.)

@noindent
Functions execute in the same process as the caller and
share all files
and present working directory with the
caller.  A trap on @code{EXIT} set inside a function
is executed after the function completes in the environment
of the caller.

@noindent
@findex return, use of
The @code{return} builtin is used to return from function calls.

@noindent
@findex functions, use of
Function identifiers can be listed with the @code{functions} builtin.
@findex unfunction, use of
Functions can be undefined with the @code{unfunction} builtin.

@section Autoloading Functions
@noindent
@findex autoload, use of
@cindex autoloading functions
@cindex functions, autoloading
A function can be marked as @emph{undefined} using the @code{autoload} builtin
(or `@code{functions -u}' or `@code{typeset -fu}').  Such a function has no
body.  When the function is first executed, the @code{fpath}
variable will be searched for a file with the same name as the
function.

@noindent
@pindex KSH_AUTOLOAD, use of
If the @code{KSH_AUTOLOAD} option is set, or the file contains only a simple
definition of the function, the file's contents will be
executed.  It would normally define the function in question, but may
also perform initialisation.
It is executed in the context of the function
execution, and may therefore define local parameters.

@noindent
Otherwise, the function is defined such that its body is the
complete contents of the file.  This form allows the file to be
used directly as an executable shell script.
Initialisation code can be executed, but only as part of the first
function execution, so the function would have to redefine itself to
avoid reinitialising on the next execution.

@noindent
If this processing of the file results in the function being
fully defined, the function itself is then executed.

@section Special Functions
@noindent
The following functions, if defined, have special meaning to
the shell:

@noindent
@table @asis
@findex chpwd
@item @code{chpwd}
Executed whenever the current working directory is changed.

@findex periodic
@item @code{periodic}
@vindex PERIOD
If the parameter @code{PERIOD}
is set, this function is executed every @code{$PERIOD}
seconds, just before a prompt.

@findex precmd
@item @code{precmd}
Executed before each prompt.

@findex preexec
@item @code{preexec}
Executed just after a command has been read and is about to be
executed.  If the history mechanism is active, the string to be
executed is passed as an argument.

@item @code{TRAP}@var{NAL}
@cindex signals, trapping
@cindex trapping signals
If defined and non-null,
this function will be executed whenever the shell
catches a signal @code{SIG}@var{NAL}, where @var{NAL} is a signal
name as specified for the @code{kill} builtin.
The signal number will be passed as the first parameter to the function.

@noindent
If a function of this form is defined and null,
the shell and processes spawned by it will ignore @code{SIG}@var{NAL}.

@findex TRAPDEBUG
@item @code{TRAPDEBUG}
Executed after each command.

@findex TRAPEXIT
@item @code{TRAPEXIT}
Executed when the shell exits,
or when the current function exits if defined inside a function.

@findex TRAPZERR
@item @code{TRAPZERR}
Executed whenever a command has a non-zero exit status.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/jobs.yo
@node Jobs & Signals, Arithmetic Evaluation, Functions, Top

@chapter Jobs & Signals
@noindent

@section Jobs
@noindent
@cindex jobs
If the @code{MONITOR} option is set,
an interactive shell associates a @emph{job} with each pipeline.
It keeps a table of current jobs, printed by the @code{jobs}
command, and assigns them small integer numbers.
When a job is started asynchronously with `@code{&}',
the shell prints a line which looks like:

@noindent
@code{[1] 1234}

@noindent
indicating that the job which was started asynchronously was job number
1 and had one (top-level) process, whose process ID was 1234.

@noindent
If a job is started with `@code{&|}' or `@code{&!}',
then that job is immediately disowned.  After startup, it
does not have a place in the job table, and is not subject
to the job control features described here.

@noindent
If you are running a job and wish to do something else you may hit the key
^Z (control-Z) which sends a @code{TSTP} signal to the current job.
@cindex jobs, suspending
@cindex suspending jobs
The shell will then normally indicate that the job has been `suspended',
and print another prompt.  You can then manipulate the state of this job,
@findex bg, use of
putting it in the background with the @code{bg} command, or run some other
commands and then eventually bring the job back into the foreground with
@findex fg, use of
the foreground command @code{fg}.  A ^Z takes effect immediately and
is like an interrupt in that pending output and unread input are discarded
when it is typed.

@noindent
A job being run in the background will suspend if it tries to read
from the terminal.
@cindex background jobs, I/O
@cindex jobs, background, I/O
Background jobs are normally allowed to produce output,
but this can be disabled by giving the command `@code{stty tostop}'.
If you set this
tty option, then background jobs will suspend when they try to produce
output like they do when they try to read input.

@noindent
@cindex jobs, referring to
@cindex referring to jobs
There are several ways to refer to jobs in the shell.
A job can be referred to by the process ID of any process of the job
or by one of the following:

@noindent
@table @asis
@item @code{%}@var{number}
The job with the given number.
@item @code{%}@var{string}
Any job whose command line begins with @var{string}.
@item @code{%?}@var{string}
Any job whose command line contains @var{string}.
@item @code{%%}
Current job.
@item @code{%+}
Equivalent to `@code{%%}'.
@item @code{%-}
Previous job.
@end table

@noindent
The shell learns immediately whenever a process changes state.
@pindex NOTIFY, use of
It normally informs you whenever a job becomes blocked so that
no further progress is possible.  If the @code{NOTIFY} option is not set,
it waits until just before it prints a prompt before it informs you.

@noindent
When the monitor mode is on, each background job that completes
triggers any trap set for @code{CHLD}.

@noindent
When you try to leave the shell while jobs are running or suspended, you will
be warned that `You have suspended (running) jobs'.
You may use the @code{jobs} command to see what they are.
If you do this or immediately try to
exit again, the shell will not warn you a second time; the suspended
jobs will be terminated, and the running jobs will be sent
a @code{SIGHUP} signal, if the @code{HUP} option is set.
@pindex HUP, use of

@noindent
@cindex jobs, disowning
@cindex disowning jobs
@findex disown, use of
To avoid having the shell terminate the running jobs, either
use the @cite{nohup} command (see man page nohup(1))
or the @code{disown} builtin.

@section Signals
@noindent
The @code{INT} and @code{QUIT} signals for an invoked
command are ignored if the command is followed by
`@code{&}' and the @code{MONITOR} option is not active.
Otherwise, signals have the values
inherited by the shell from its parent
(but see the @code{TRAP}@var{NAL} special functions in @ref{Functions}).
@c (avoiding a yodl bug)
@c Yodl file: Zsh/arith.yo
@node Arithmetic Evaluation, Conditional Expressions, Jobs & Signals, Top

@chapter Arithmetic Evaluation
@noindent
@cindex arithmetic evaluation
@cindex evaluation, arithmetic
An ability to perform integer arithmetic is provided with the builtin @code{let}.
@findex let, use of
Evaluations are performed using @emph{long} arithmetic.
A leading `@code{0x}' or `@code{0X}' denotes hexadecimal.
Otherwise, numbers are of the form `[@var{base}@code{#}]@var{n}',
where @var{base} is a decimal number between two and thirty-six
representing the arithmetic base and @var{n}
is a number in that base (for example, `@code{16#ff}' is 255 in hexadecimal).
If @var{base} is omitted
then base 10 is used.  For backwards compatibility the form
`@code{[}@var{base}@code{]}@var{n}' is also accepted.

@noindent
@cindex arithmetic operators
@cindex operators, arithmetic
An arithmetic expression uses nearly the same syntax, precedence, and
associativity of expressions in C.
The following operators are supported (listed in decreasing order
of precedence):

@noindent
@table @asis
@item @code{+ - ! ~ ++ --}
unary plus/minus, logical NOT, complement, @{pre,post@}@{in,de@}crement
@item @code{<< >>}
bitwise shift left, right
@item @code{&}
bitwise AND
@item @code{^}
bitwise XOR
@item @code{|}
bitwise OR
@item @code{**}
exponentiation
@item @code{* / %}
multiplication, division, modulus (remainder)
@item @code{+ -}
addition, subtraction
@item @code{< > <= >=}
comparison
@item @code{== !=}
equality and inequality
@item @code{&&}
logical AND
@item @code{|| ^^}
logical OR, XOR
@item @code{? :}
ternary operator
@item @code{= += -= *= /= %= &= ^= |= <<= >>= &&= ||= ^^= **=}
assignment
@item @code{,}
comma operator
@end table

@noindent
The operators `@code{&&}', `@code{||}', `@code{&&=}', and `@code{||=}' are short-circuiting,
and only one of the latter two expressions in a ternary operator
is evaluated.  Note the precedence of the bitwise AND, OR,
and XOR operators.

@noindent
An expression of the form `@code{#\}@var{x}' where @var{x} is any character
gives the ascii value of this character and an expression of the form
`@code{#}@var{foo}' gives the ascii value of the first character of the value
of the parameter @var{foo}.

@noindent
Named parameters and subscripted arrays can be referenced by name within an
arithmetic expression without using the parameter substitution syntax.

@noindent
An internal integer representation of a named parameter
can be specified with the @code{integer} builtin.
@cindex parameters, integer
@cindex integer parameters
@findex integer, use of
Arithmetic evaluation is performed on the value of each
assignment to a named parameter declared integer
in this manner.

@noindent
Since many of the arithmetic operators require
quoting, an alternative form of the @code{let} command is provided.
For any command which begins with a @code{((},
all the characters until a matching @code{))}
are treated as a quoted expression.
More precisely, `@code{((} ... @code{))}'
is equivalent to `@code{let "}...@code{"}'.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/cond.yo
@node Conditional Expressions, Compatibility, Arithmetic Evaluation, Top

@chapter Conditional Expressions
@noindent
@cindex conditional expressions
@cindex expressions, conditional
A @emph{conditional expression} is used with the @code{[[}
compound command to test attributes of files and to compare strings.
Each expression can be constructed from one or more
of the following unary or binary expressions:

@noindent
@table @asis
@item @code{-a} @var{file}
true if @var{file} exists.

@item @code{-b} @var{file}
true if @var{file} exists and is a block special file.

@item @code{-c} @var{file}
true if @var{file} exists and is a character special file.

@item @code{-d} @var{file}
true if @var{file} exists and is a directory.

@item @code{-e} @var{file}
true if @var{file} exists.

@item @code{-f} @var{file}
true if @var{file} exists and is a regular file.

@item @code{-g} @var{file}
true if @var{file} exists and has its setgid bit set.

@item @code{-h} @var{file}
true if @var{file} exists and is a symbolic link.

@item @code{-k} @var{file}
true if @var{file} exists and has its sticky bit set.

@item @code{-n} @var{string}
true if length of @var{string} is non-zero.

@item @code{-o} @var{option}
true if option named @var{option} is on.  @var{option}
may be a single character, in which case it is a single letter option name.
(See @ref{Specifying Options}.)

@item @code{-p} @var{file}
true if @var{file} exists and is a FIFO special file (named pipe).

@item @code{-r} @var{file}
true if @var{file} exists and is readable by current process.

@item @code{-s} @var{file}
true if @var{file} exists and has size greater than zero.

@item @code{-t} @var{fd}
true if file descriptor number @var{fd}
is open and associated with a terminal device.
(note: @var{fd} is not optional)

@item @code{-u} @var{file}
true if @var{file} exists and has its setuid bit set.

@item @code{-w} @var{file}
true if @var{file} exists and is writable by current process.

@item @code{-x} @var{file}
true if @var{file} exists and is executable by current process.
If @var{file} exists and is a directory, then the current process
has permission to search in the directory.

@item @code{-z} @var{string}
true if length of @var{string} is zero.

@item @code{-L} @var{file}
true if @var{file} exists and is a symbolic link.

@item @code{-O} @var{file}
true if @var{file} exists and is owned by the effective user ID of this process.

@item @code{-G} @var{file}
true if @var{file} exists and its group matches
the effective group ID of this process.

@item @code{-S} @var{file}
true if @var{file} exists and is a socket.

@item @code{-N} @var{file}
true if @var{file} exists and its access time is
not newer than its modification time.

@item @var{file1} @code{-nt} @var{file2}
true if @var{file1} exists and is newer than @var{file2}.

@item @var{file1} @code{-ot} @var{file2}
true if @var{file1} exists and is older than @var{file2}.

@item @var{file1} @code{-ef} @var{file2}
true if @var{file1} and @var{file2} exist and refer to the same file.

@item @var{string} @code{=} @var{pattern}
@itemx @var{string} @code{==} @var{pattern}
true if @var{string} matches @var{pattern}.
The `@code{==}' form is the preferred one.  The `@code{=}' form is for
backward compatibility and should be considered obsolete.

@item @var{string} @code{!=} @var{pattern}
true if @var{string} does not match @var{pattern}.

@item @var{string1} @code{<} @var{string2}
true if @var{string1} comes before @var{string2}
based on ASCII value of their characters.

@item @var{string1} @code{>} @var{string2}
true if @var{string1} comes after @var{string2}
based on ASCII value of their characters.

@item @var{exp1} @code{-eq} @var{exp2}
true if @var{exp1} is numerically equal to @var{exp2}.

@item @var{exp1} @code{-ne} @var{exp2}
true if @var{exp1} is numerically not equal to @var{exp2}.

@item @var{exp1} @code{-lt} @var{exp2}
true if @var{exp1} is numerically less than @var{exp2}.

@item @var{exp1} @code{-gt} @var{exp2}
true if @var{exp1} is numerically greater than @var{exp2}.

@item @var{exp1} @code{-le} @var{exp2}
true if @var{exp1} is numerically less than or equal to @var{exp2}.

@item @var{exp1} @code{-ge} @var{exp2}
true if @var{exp1} is numerically greater than or equal to @var{exp2}.

@item @code{(} @var{exp} @code{)}
true if @var{exp} is true.

@item @code{!} @var{exp}
true if @var{exp} is false.

@item @var{exp1} @code{&&} @var{exp2}
true if @var{exp1} and @var{exp2} are both true.

@item @var{exp1} @code{||} @var{exp2}
true if either @var{exp1} or @var{exp2} is true.

@end table

@noindent
In each of the above expressions, if
@var{file} is of the form `@code{/dev/fd/}@var{n}',
where @var{n} is an integer,
then the test applied to the open file whose
descriptor number is @var{n},
even if the underlying system does not support
the @code{/dev/fd} directory.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/compat.yo
@node Compatibility, Prompt Expansion, Conditional Expressions, Top

@chapter Compatibility
@noindent
@cindex compatibility
@cindex sh, compatibility
@cindex ksh, compatibility
Zsh tries to emulate @cite{sh} or @cite{ksh} when it is invoked as
@code{sh} or @code{ksh} respectively.  In this mode the following
parameters are not special and not initialized by the shell:
@code{ARGC},
@code{argv},
@code{cdpath},
@code{fignore},
@code{fpath},
@code{HISTCHARS},
@code{mailpath},
@code{MANPATH},
@code{manpath},
@code{path},
@code{prompt},
@code{PROMPT},
@code{PROMPT2},
@code{PROMPT3},
@code{PROMPT4},
@code{psvar},
@code{status},
@code{watch}.

@noindent
The usual zsh startup/shutdown scripts are not executed.  Login shells
source @code{/etc/profile} followed by @code{$HOME/.profile}.  If the
@code{ENV} environment variable is set on invocation, @code{$ENV} is sourced
after the profile scripts.  The value of @code{ENV} is subjected to
parameter expansion, command substitution, and arithmetic expansion before
being interpreted as a pathname.  Note that the @code{PRIVILEGED} option
also affects the execution of startup files.

@noindent
The following options are set if the shell is invoked as @code{sh} or
@code{ksh}:
@code{NO_BAD_PATTERN},
@code{NO_BANG_HIST},
@code{NO_BG_NICE},
@code{NO_EQUALS},
@code{NO_FUNCTION_ARGZERO},
@code{GLOB_SUBST},
@code{NO_HUP},
@code{INTERACTIVE_COMMENTS},
@code{KSH_ARRAYS},
@code{NO_MULTIOS},
@code{NO_NOMATCH},
@code{NO_NOTIFY},
@code{POSIX_BUILTINS},
@code{NO_PROMPT_PERCENT},
@code{RM_STAR_SILENT},
@code{SH_FILE_EXPANSION},
@code{SH_GLOB},
@code{SH_OPTION_LETTERS},
@code{SH_WORD_SPLIT}.
Additionally the @code{BSD_ECHO} and @code{IGNORE_BRACES}
options are set if zsh is invoked as @code{sh}.
Also, the
@code{KSH_OPTION_PRINT},
@code{LOCAL_OPTIONS},
@code{PROMPT_BANG},
@code{PROMPT_SUBST}
and
@code{SINGLE_LINE_ZLE}
options are set if zsh is invoked as @code{ksh}.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/prompt.yo
@node Prompt Expansion, Restricted Shell, Compatibility, Top

@chapter Prompt Expansion
@noindent
Prompt sequences undergo a special form of expansion.  This type of expansion
is also available using the @code{-P} option to the @code{print} builtin.

@noindent
@pindex PROMPT_SUBST, use of
If the @code{PROMPT_SUBST} option is set, the prompt string is first subjected to
@emph{parameter expansion},
@emph{command substitution} and
@emph{arithmetic expansion}.
See
@ref{Expansion}.

@noindent
Certain escape sequences may be recognised in the prompt string.

@noindent
@pindex PROMPT_BANG, use of
If the @code{PROMPT_BANG} option is set, a `@code{!}' in the prompt is replaced
by the current history event number.  A literal `@code{!}' may then be
represented as `@code{!!}'.

@noindent
@pindex PROMPT_PERCENT, use of
If the @code{PROMPT_PERCENT} option is set, certain escape sequences that
start with `@code{%}' are expanded.
Some escapes take an optional integer argument, which
should appear between the `@code{%}' and the next character of the
sequence.  The following escape sequences are recognized:

@noindent
@table @asis
@item @code{%%}
A `@code{%}'.

@item @code{%)}
A `@code{)}'.

@item @code{%d}
@itemx @code{%/}
Present working directory (@code{$PWD}).

@item @code{%~}
@code{$PWD}.
If it has a named directory as its prefix, that part is replaced
by a `@code{~}' followed by the name of the directory.
If it starts with @code{$HOME}, that part is
replaced by a `@code{~}'.

@item @code{%c}
@itemx @code{%.}
@itemx @code{%C}
Trailing component of @code{$PWD}.
An integer may follow the `@code{%}' to get more than one component.
Unless `@code{%C}' is used, tilde contraction is performed first.

@item @code{%h}
@itemx @code{%!}
Current history event number.

@item @code{%L}
The current value of @code{$SHLVL}.

@item @code{%M}
The full machine hostname.

@item @code{%m}
The hostname up to the first `@code{.}'.
An integer may follow the `@code{%}' to specify
how many components of the hostname are desired.

@item @code{%S} (@code{%s})
Start (stop) standout mode.

@item @code{%U} (@code{%u})
Start (stop) underline mode.

@item @code{%B} (@code{%b})
Start (stop) boldface mode.

@item @code{%t}
@itemx @code{%@@}
Current time of day, in 12-hour, am/pm format.

@item @code{%T}
Current time of day, in 24-hour format.

@item @code{%*}
Current time of day in 24-hour format, with seconds.

@item @code{%n}
@code{$USERNAME}.

@item @code{%w}
The date in @var{day}@code{-}@var{dd} format.

@item @code{%W}
The date in @var{mm}@code{/}@var{dd}@code{/}@var{yy} format.

@item @code{%D}
The date in @var{yy}@code{-}@var{mm}@code{-}@var{dd} format.

@item @code{%D@{}@var{string}@code{@}}
@var{string} is formatted using the @code{strftime} function.
See man page strftime(3) for more details.  Three additional codes are
available:  @code{%f} prints the day of the month, like @code{%e} but
without any preceding space if the day is a single digit, and
@code{%K}/@code{%L} correspond to @code{%k}/@code{%l} for the hour of the day
(24/12 hour clock) in the same way.

@item @code{%l}
The line (tty) the user is logged in on.

@item @code{%?}
The return code of the last command executed just before the prompt.

@item @code{%_}
The status of the parser, i.e. the shell constructs (like `@code{if}' and
`@code{for}') that have been started on the command line. If given an integer
number that many strings will be printed; zero or no integer means
print as many as there are.

@item @code{%E}
Clears to end of line.

@item @code{%#}
A `@code{#}' if the shell is running with privileges, a `@code{%}' if not.
Equivalent to `@code{%(!.#.%%)}'.
The definition of `privileged', for these purposes, is that either the
effective user ID is zero, or, if POSIX.1e capabilities are supported, that
at least one capability is raised in either the Effective or Inheritable
capability vectors.

@item @code{%v}
@vindex psvar, use of
The value of the first element of the @code{psvar} array parameter.  Following
the `@code{%}' with an integer gives that element of the array.

@item @code{%@{}...@code{%@}}
Include a string as a literal escape sequence.
The string within the braces should not change the cursor
position.  Brace pairs can nest.

@item @code{%(}@var{x.true-text.false-text}@code{)}
Specifies a ternary expression.  The character following the @var{x} is
arbitrary; the same character is used to separate the text for the
`true' result from that for the `false' result.
This separator may not appear in the @var{true-text}, except as part of a
%-escape
sequence.  A `@code{)}' may appear in the @var{false-text} as `@code{%)}'.
@var{true-text}
and @var{false-text} may both contain arbitrarily-nested escape
sequences, including further ternary expressions.

@noindent
The left
parenthesis may be preceded or followed by a positive integer @var{n},
which defaults to zero.  The test character @var{x} may be any of the
following:

@noindent
@table @asis
@item @code{c}
@itemx @code{.}
@itemx @code{~}
True if the current path, with prefix replacement, has at least @var{n} elements.
@item @code{/}
@itemx @code{C}
True if the current absolute path has at least @var{n} elements.
@item @code{t}
True if the time in minutes is equal to @var{n}.
@item @code{T}
True if the time in hours is equal to @var{n}.
@item @code{d}
True if the day of the month is equal to @var{n}.
@item @code{D}
True if the month is equal to @var{n} (January = 0).
@item @code{w}
True if the day of the week is equal to @var{n} (Sunday = 0).
@item @code{?}
True if the exit status of the last command was @var{n}.
@item @code{#}
True if the effective uid of the current process is @var{n}.
@item @code{g}
True if the effective gid of the current process is @var{n}.
@item @code{L}
True if the @code{SHLVL} parameter is at least @var{n}.
@item @code{S}
True if the @code{SECONDS} parameter is at least @var{n}.
@item @code{v}
True if the array @code{psvar} has at least @var{n} elements.
@item @code{_}
True if at least @var{n} shell constructs were started.
@item @code{!}
True if the shell is running with privileges.
@end table

@item @code{%<}@var{string}@code{<}
@itemx @code{%>}@var{string}@code{>}
@itemx @code{%[}@var{xstring}@code{]}
Specifies truncation behaviour.
The third, deprecated, form is equivalent to `@code{%}@var{xstringx}',
i.e. @var{x} may be `@code{<}' or `@code{>}'.
The numeric argument, which in the third form may appear immediately
after the `@code{[}', specifies the maximum permitted length of
the various strings that can be displayed in the prompt.  If this
integer is zero, or missing, truncation is disabled.  Truncation is
initially disabled.
The @var{string} will be displayed in
place of the truncated portion of any string.

@noindent
The forms with `@code{<}' truncate at the left of the string,
and the forms with `@code{>}' truncate at the right of the string.
For example, if the current directory is `@code{/home/pike}',
the prompt `@code{%8<..<%/}' will expand to `@code{..e/pike}'.
In this string, the terminating character (`@code{<}', `@code{>}' or `@code{]}'),
or in fact any character, may be quoted by a preceding `@code{\}'.
% escapes are @emph{not} recognised.
If the @var{string} is longer than the specified truncation length,
it will appear in full, completely replacing the truncated string.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/restricted.yo
@node Restricted Shell, Expansion, Prompt Expansion, Top

@chapter Restricted Shell
@noindent
@cindex restricted shell
@pindex RESTRICTED
When the basename of the command used to invoke zsh starts with the letter
`@code{r}' or the `@code{-r}' command line option is supplied at invocation, the
shell becomes restricted.  Emulation mode is determined after stripping the
letter `@code{r}' from the invocation name.  The following are disabled in
restricted mode:

@noindent
@itemize @bullet

@noindent
@item 
changing directories with the @code{cd} builtin
@item 
changing or unsetting the @code{PATH}, @code{path}, @code{MODULE_PATH},
@code{module_path}, @code{SHELL}, @code{HISTFILE}, @code{HISTSIZE}, @code{GID}, @code{EGID},
@code{UID}, @code{EUID}, @code{USERNAME}, @code{LD_LIBRARY_PATH},
@code{LD_AOUT_LIBRARY_PATH}, @code{LD_PRELOAD} and  @code{LD_AOUT_PRELOAD}
parameters
@item 
specifying command names containing @code{/}
@item 
specifying command pathnames using @code{hash}
@item 
redirecting output to files
@item 
using the @code{exec} builtin command to replace the shell with another
command
@item 
using @code{jobs -Z} to overwrite the shell process' argument and
environment space
@item 
using the @code{ARGV0} parameter to override @code{argv[0]} for external
commands
@item 
turning off restricted mode with @code{set +r} or @code{unsetopt
RESTRICTED}
@item 
specifying modules to be loaded with an explicitly given
pathname containing slashes
@end itemize

@noindent
These restrictions are enforced after processing the startup files.  The
startup files should set up @code{PATH} to point to a directory of commands
which can be safely invoked in the restricted environment.  They may also
add further restrictions by disabling selected builtins.

@noindent
Restricted mode can also be activated any time by setting the
@code{RESTRICTED} option.  This immediately enables all the restrictions
described above even if the shell still have not processed all startup
files.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/expn.yo
@node Expansion, Parameters, Restricted Shell, Top

@chapter Expansion
@noindent
@cindex expansion

@section Description
@noindent
The types of expansions performed are

@noindent
@table @asis
@item @emph{history expansion}
@item @emph{alias expansion}
@item @emph{process substitution}
@item @emph{parameter expansion}
@item @emph{command substitution}
@item @emph{arithmetic expansion}
@item @emph{brace expansion}
@item @emph{filename expansion}
@item @emph{filename generation}
@end table

@noindent
Expansion is done in the above specified order in five steps.  The
first is @emph{history expansion}, which is only performed in
interactive shells.  The next step is @emph{alias expansion}, which is
done right before the command line is parsed.  They are followed by
@emph{process substitution}, @emph{parameter expansion}, @emph{command
substitution}, @emph{arithmetic expansion} and @emph{brace expansion}
which are performed in one step in left-to-right fashion.  After
these expansions, all unquoted occurrences of the characters `@code{\}',
`@code{'}' and `@code{"}' are removed, and the result is subjected to
@emph{filename expansion} followed by @emph{filename generation}.

@noindent
If the @code{SH_FILE_EXPANSION} option is set, the order of expansion is modified
for compatibility with @cite{sh} and @cite{ksh}.  @emph{Filename expansion}
is performed immediately after @emph{alias substitution},
preceding the set of five substitutions mentioned above.
@menu
* History Expansion::
* Process Substitution::
* Parameter Expansion::
* Command Substitution::
* Arithmetic Expansion::
* Brace Expansion::
* Filename Expansion::
* Filename Generation::
@end menu
@node History Expansion, Process Substitution, , Expansion

@section History Expansion
@noindent
@cindex history
@cindex history expansion
@cindex expansion, history
History expansion allows you to use words from previous command
lines in the command line you are typing.  This simplifies spelling
corrections and the repetition of complicated commands or arguments.
Command lines are saved in the history list, the size of which
is controlled by the @code{HISTSIZE}
@vindex HISTSIZE, use of
variable.  The most recent command is retained in any case.
A history expansion begins with the first character of the
@code{histchars} parameter which is `@code{!}'
by default and may occur anywhere on the command line; history
expansions do not nest.  The `@code{!}' can be escaped with `@code{\}'
or can be enclosed between a pair of single quotes (@code{@value{dsq}}) to suppress
its special meaning. Double quotes will @emph{not} work for this.

@noindent
Input lines containing history expansions are echoed on the
terminal after being expanded, but before any other
expansions take place or the command gets executed.
@menu
* Event Designators::
* Word Designators::
* Modifiers::
@end menu
@node Event Designators, Word Designators, , History Expansion

@subsection Event Designators
@noindent
@cindex history event designators
@cindex event designators, history
An event designator is a reference to a command-line entry in
the history list.

@noindent
@table @asis
@item @code{!}
Start a history expansion, except when followed by a blank, newline,
`@code{=}' or `@code{(}'.

@item @code{!!}
Refer to the previous command.
By itself, this expansion
repeats the previous command.

@item @code{!}@var{n}
Refer to command-line @var{n}.

@item @code{!-}@var{n}
Refer to the current command-line minus @var{n}.

@item @code{!}@var{str}
Refer to the most recent command starting with @var{str}.

@item @code{!?}@var{str}[@code{?}]
Refer to the most recent command containing @var{str}.

@item @code{!#}
Refer to the current command line typed in so far.  The line is
treated as if it were complete up to and including the word before the
one with the `@code{!#}' reference.

@item @code{!@{}...@code{@}}
Insulate a history reference from adjacent characters (if necessary).

@end table
@node Word Designators, Modifiers, Event Designators, History Expansion

@subsection Word Designators
@noindent
@cindex history word designators
@cindex word designators, history
A word designator indicates which word or words of a given command line will
be included in a history reference.  A `@code{:}'
separates the event specification from the word designator.
It can be omitted if the word designator begins with a
`@code{^}', `@code{$}', `@code{*}', `@code{-}' or `@code{%}'.
Word designators include:

@noindent
@table @asis
@item @code{0}
The first input word (command).
@item @var{n}
The @var{n}th argument.
@item @code{^}
The first argument.  That is, @code{1}.
@item @code{$}
The last argument.
@item @code{%}
The word matched by (the most recent) @code{?}@var{str} search.
@item @var{x}@code{-}@var{y}
A range of words; @var{x} defaults to @code{0}.
@item @code{*}
All the arguments, or a null value if there are none.
@item @var{x}@code{*}
Abbreviates `@var{x}@code{-$}'.
@item @var{x}@code{-}
Like `@var{x}@code{*}' but omitting word @code{$}.
@end table

@noindent
Note that a `@code{%}' word designator will only work when used as
`@code{!%}', `@code{!:%}' or `@code{!?}@var{str}@code{?:%}',
and only when used after a @code{!?} expansion.  Anything else will result
in an error, although the error may not be the most obvious one.
@node Modifiers, , Word Designators, History Expansion

@subsection Modifiers
@noindent
@cindex modifiers, history
@cindex history modifiers
After the optional word designator, you can add
a sequence of one or more of the following modifiers,
each preceded by a `@code{:}'.  These modifiers also work on the result
of @emph{filename generation} and @emph{parameter expansion}, except where
noted.

@noindent
@table @asis
@item @code{h}
Remove a trailing pathname component, leaving the head.

@item @code{r}
Remove a trailing suffix of the form `@code{.}@var{xxx}', leaving the basename.

@item @code{e}
Remove all but the suffix.

@item @code{t}
Remove all leading pathname components, leaving the tail.

@item @code{p}
Print the new command but do not execute it.  Only works with history
expansion.

@item @code{q}
Quote the substituted words, escaping further substitutions.  Only
works with history expansion.

@item @code{x}
Like @code{q}, but break into words at each blank.

@item @code{l}
Convert the words to all lowercase.

@item @code{u}
Convert the words to all uppercase.

@item @code{f}
(This and the following
@code{F}, @code{w} and @code{W} modifier only work with parameter and
filename expansion.)
Repeats the immediately (without a colon) following modifier until the
resulting word doesn't change any more.

@item @code{F:}@var{expr}@code{:}
Like @code{f}, but repeats only @var{n} times if the expression
@var{expr} evaluates to @var{n}.  Any character can be used instead of
the `@code{:}', if any of `@code{(}', `@code{[}', or `@code{@{}'
is used as the opening delimiter
the second one has to be '@code{)}', `@code{]}', or `@code{@}}' respectively.

@item @code{w}
Makes the immediately following modifier work on each word in the
string.

@item @code{W:}@var{sep}@code{:}
Like @code{w} but words are considered to be the parts of the string
that are separated by @var{sep}. Any character can be used instead of
the `@code{:}'; opening parentheses are handled specially, see above.

@item @code{s/}@var{l}@code{/}@var{r}[@code{/}]
Substitute @var{r} for @var{l} as described below.
Unless preceded immediately by a @code{g}, with no colon between,
the substitution is done only for the
first string that matches @var{l}.  For arrays and filename
expansion, this applies to each word of the expanded text.

@item @code{&}
Repeat the previous @code{s} substitution.  Like @code{s}, may be preceded
immediately by a @code{g}.  In variable expansion the @code{&} must appear
inside braces, and in filename expansion it must be quoted with a
backslash.

@end table

@noindent
The @code{s/l/r/} substitution works as follows.  The left-hand side of
substitutions are not regular expressions, but character strings.  Any
character can be used as the delimiter in place of `@code{/}'.  A
backslash quotes the delimiter character.  The character `@code{&}', in
the right-hand-side @var{r}, is replaced by the text from the
left-hand-side @var{l}.  The `@code{&}' can be quoted with a backslash.  A
null @var{l} uses the previous string either from the previous @var{l}
or from the contextual scan string @var{s} from `@code{!?}@var{s}'.  You can
omit the rightmost delimiter if a newline immediately follows @var{r};
the rightmost `@code{?}' in a context scan can similarly be omitted.
Note the same record of the last @var{l} and @var{r} is maintained
across all forms of expansion.

@noindent
By default, a history reference with no event specification refers to the same
line as the last history reference on that command line, unless it is the
first history reference in a command.  In that case, a history reference
with no event specification always refers to the previous command.  However,
if the option @code{CSH_JUNKIE_HISTORY} is set,
@pindex CSH_JUNKIE_HISTORY, use of
then history reference with no
event specification will @emph{always} refer to the previous command.

@noindent
For example, `@code{!!:1}'
will always refer to the first word of the previous command, and `@code{!!$}'
will always refer to the last word of the previous command.  And with
@code{CSH_JUNKIE_HISTORY} set, then `@code{!:1}' and `@code{!$}'
will function in the same manner as `@code{!!:1}' and `@code{!!$}',
respectively.  However, if @code{CSH_JUNKIE_HISTORY} is unset, then
`@code{!:1}' and `@code{!$}'
will refer to the first and last words respectively, of the last command
referenced on the current command line.  However, if they are the first history
reference on the command line, then they refer to the previous command.

@noindent
The character sequence `@code{^}@var{foo}@code{^}@var{bar}'
repeats the last command, replacing the string @var{foo} with @var{bar}.

@noindent
If the shell encounters the character sequence `@code{!"}'
in the input, the history mechanism is temporarily disabled until
the current list is fully parsed.  The `@code{!"}'
is removed from the input, and any subsequent `@code{!}'
characters have no special significance.

@noindent
A less convenient but more comprehensible
form of command history support
is provided by the @code{fc} builtin.
@findex fc, use of
@node Process Substitution, Parameter Expansion, History Expansion, Expansion

@section Process Substitution
@noindent
@cindex process substitution
@cindex substitution, process
Each command argument of the form
`@code{<(}@var{list}@code{)}',
`@code{>(}@var{list}@code{)}' or
`@code{=(}@var{list}@code{)}'
is subject to process substitution.
In the case of the @code{<} or @code{>} forms, the shell will run process
@var{list} asynchronously, connected to a named pipe (FIFO).
The name of this pipe will become the argument to the command.
If the form with @code{>}
is selected then writing on this file will provide input for @var{list}.
If @code{<} is used, then the file passed as an argument will
be a named pipe connected to the output of the @var{list} process.
For example,

@noindent
@code{paste <(cut -f1} @var{file1}@code{) <(cut -f3} @var{file2}@code{) | tee >(}@var{process1}@code{) >(}@var{process2}@code{) >/dev/null}

@noindent
cuts fields 1 and 3 from the files @var{file1} and @var{file2} respectively,
pastes the results together, and sends it to the processes
@var{process1} and @var{process2}.
Note that the file, which is passed as an argument to the command,
is a system pipe, so programs that expect to lseek (see man page lseek(2))
on the file will not work.
Also note that the previous example can be more compactly and
efficiently written as:

@noindent
@code{paste <(cut -f1} @var{file1}@code{) <(cut -f3} @var{file2}@code{) > >(}@var{process1}@code{) > >(}@var{process2}@code{)}

@noindent
The shell uses pipes instead of FIFOs to implement the latter
two process substitutions in the above example.

@noindent
If @code{=} is used,
then the file passed as an argument will be the name
of a temporary file containing the output of the @var{list}
process.  This may be used instead of the @code{<}
form for a program that expects to lseek (see man page lseek(2))
on the input file.
@node Parameter Expansion, Command Substitution, Process Substitution, Expansion

@section Parameter Expansion
@noindent
@cindex parameter expansion
@cindex expansion, parameter
The character `@code{$}' is used to introduce parameter expansions.
See
@ref{Parameters}
for a description of parameters.
In the expansions discussed below that require a pattern, the form of
the pattern is the same as that used for filename generation;
see @ref{Filename Generation}.  In addition to the following
operations, the file modifiers described in
@ref{Modifiers} in @ref{History Expansion} can be
applied:  for example, @code{$@{i:s/foo/bar/@}} performs string
substitution on the value of parameter @code{$i}.

@noindent
@table @asis
@item @code{$@{}@var{name}@code{@}}
The value, if any, of the parameter @var{name} is substituted.
The braces are required if @var{name} is followed by
a letter, digit, or underscore that is not to be interpreted
as part of its name.

@noindent
If @var{name} is an array parameter, then the values of each
element of @var{name} is substituted, one element per word.
Otherwise, the expansion results in one word only; no field
splitting is done on the result unless the @code{SH_WORD_SPLIT}
option is set.

@item @code{$@{+}@var{name}@code{@}}
If @var{name} is the name of a set parameter `@code{1}' is substituted,
otherwise `@code{0}' is substituted.

@item @code{$@{}@var{name}@code{:-}@var{word}@code{@}}
If @var{name} is set and is non-null then substitute its
value; otherwise substitute @var{word}. If @var{name} is
missing, substitute @var{word}.

@item @code{$@{}@var{name}@code{:=}@var{word}@code{@}}
If @var{name} is unset or is null then
set it to @var{word}; the value of the parameter is then
substituted.

@item @code{$@{}@var{name}@code{:?}@var{word}@code{@}}
If @var{name} is set and is non-null, then substitute
its value; otherwise, print @var{word} and exit from the shell.
If @var{word} is omitted, then a standard message is printed.

@item @code{$@{}@var{name}@code{:+}@var{word}@code{@}}
If @var{name} is set and is non-null then substitute
@var{word}; otherwise substitute nothing.

@end table

@noindent
If the colon is omitted from one of the above expressions
containing a colon, then the shell only checks whether
@var{name} is set or not, not whether it is null.

@noindent
@table @asis
@item @code{$@{}@var{name}@code{::=}@var{word}@code{@}}
Set @var{name} to @var{word}; the value of the parameter is then
substituted.

@item @code{$@{}@var{name}@code{#}@var{pattern}@code{@}}
@itemx @code{$@{}@var{name}@code{##}@var{pattern}@code{@}}
If the @var{pattern} matches the beginning of the value of
@var{name}, then substitute the value of @var{name} with
the matched portion deleted; otherwise, just
substitute the value of @var{name}.  In the first
form, the smallest matching pattern is preferred;
in the second form, the largest matching pattern is
preferred. If @var{name} is an array and the substitution
is not quoted or the @code{(@@)} flag or the `@var{name}@code{[@@]}' syntax
is used, matching is performed on each array elements separately.

@item @code{$@{}@var{name}@code{%}@var{pattern}@code{@}}
@itemx @code{$@{}@var{name}@code{%%}@var{pattern}@code{@}}
If the @var{pattern} matches the end of the value of
@var{name}, then substitute the value of @var{name} with
the matched portion deleted; otherwise, just
substitute the value of @var{name}.  In the first
form, the smallest matching pattern is preferred;
in the second form, the largest matching pattern is
preferred. If @var{name} is an array and the substitution
is not quoted or the @code{(@@)} flag or the `@var{name}@code{[@@]}' syntax
is used, matching is performed on each array elements separately.

@item @code{$@{}@var{name}@code{:#}@var{pattern}@code{@}}
If the @var{pattern} matches the value of @var{name}, then substitute
the empty string; otherwise, just substitute the value of @var{name}.
If @var{name} is an array and the substitution
is not quoted or the @code{(@@)} flag or the `@var{name}@code{[@@]}' syntax
is used, matching is performed on each array elements separately, and
the matched array elements are removed (use the @code{(M)} flag to
remove the non-matched elements).

@item @code{$@{#}@var{spec}@code{@}}
If @var{spec} is one of the above substitutions, substitute
the length in characters of the result instead of
the result itself.  If @var{spec} is an array expression,
substitute the number of elements of the result.

@item @code{$@{^}@var{spec}@code{@}}
@pindex RC_EXPAND_PARAM, use of
@cindex array expansion style, rc
@cindex rc, array expansion style
Turn on the @code{RC_EXPAND_PARAM} option for the
evaluation of @var{spec}; if the `@code{^}' is doubled, turn it off.
When this option is set, array expansions of the form
`@var{foo}@code{$@{}@var{xx}@code{@}}@var{bar}',
where the parameter @var{xx}
is set to @code{(}@var{a b c}@code{)}, are substituted with
`@var{fooabar foobbar foocbar}' instead of the default
`@var{fooa b cbar}'.

@noindent
Internally, each such expansion is converted into the
equivalent list for brace expansion.  E.g., @code{$@{^var@}} becomes
@code{@{$var[1],$var[2],}...@code{@}}, and is processed as described in
@ref{Brace Expansion} above.
If word splitting is also in effect the
@code{$var[}@var{N}@code{]} may themselves be split into different list
elements.

@item @code{$@{=}@var{spec}@code{@}}
@pindex SH_WORD_SPLIT, use of
@cindex field splitting, sh style
@cindex sh, field splitting style
Turn on the @code{SH_WORD_SPLIT} option for the
evaluation of @var{spec}; if the `@code{=}' is doubled, turn it off.
@vindex IFS, use of
When this option is set, parameter values are split into
separate words using @code{IFS} as a delimiter
before substitution.
This is done by default in most other shells.

@item @code{$@{~}@var{spec}@code{@}}
@pindex GLOB_SUBST
Turn on the @code{GLOB_SUBST} option for the evaluation of
@var{spec}; if the `@code{~}' is doubled, turn it off.  When this option is
set, any pattern characters resulting
from the substitution become eligible for file expansion and filename
generation.

@end table

@noindent
If a @code{$@{}...@code{@}} type parameter expression or a
@code{$(}...@code{)} type command substitution is used in place of
@var{name} above, it is substituted first and the result is used as if
it were the value of @var{name}.  Thus it is
possible to perform nested operations:  @code{$@{$@{foo#head@}%tail@}}
substitues the value of @code{$foo} with both @code{head} and @code{tail}
deleted.  The form with @code{$(}...@code{)} is often useful in
combination with the flags described next; see the example below.

@subsection Parameter Expansion Flags
@noindent
@cindex parameter expansion flags
@cindex flags, parameter expansion
@cindex expansion, parameter, flags
If the opening brace is directly followed by an opening parenthesis,
the string up to the matching closing parenthesis will be taken as a
list of flags.  Where arguments are valid, any character, or the
matching pairs `@code{(}...@code{)}', `@code{@{}...@code{@}}',
`@code{[}...@code{]}', or `@code{<}...@code{>}',  may be used
in place of the colon as delimiters.  The following flags are supported:

@noindent
@table @asis
@item @code{A}
Create an array parameter with
@code{$@{}...@code{:=}...@code{@}} or @code{$@{}...@code{::=}...@code{@}}.
Assignment is made before sorting or padding.

@item @code{@@}
In double quotes, array elements are put into separate words.
E.g., `@code{"$@{(@@)foo@}"}' is equivalent to `@code{"$@{foo[@@]@}"}' and
`@code{"$@{(@@)foo[1,2]@}"}' is the same as `@code{"$foo[1]" "$foo[2]"}'.

@item @code{e}
Perform @emph{parameter expansion}, @emph{command substitution} and
@emph{arithmetic expansion} on the result. Such expansions can be
nested but too deep recursion may have unpredictable effects.

@item @code{o}
Sort the resulting words in ascending order.

@item @code{O}
Sort the resulting words in descending order.

@item @code{i}
With @code{o} or @code{O}, sort case-independently.

@item @code{L}
Convert all letters in the result to lower case.

@item @code{U}
Convert all letters in the result to upper case.

@item @code{C}
Capitalize the resulting words.

@item @code{c}
With @code{$@{#}@var{name}@code{@}}, count the total number of characters in an array,
as if the elements were concatenated with spaces between them.

@item @code{w}
With @code{$@{#}@var{name}@code{@}}, count words in arrays or strings; the @code{s}
flag may be used to set a word delimiter.

@item @code{W}
Similar to @code{w} with the difference that empty words between
repeated delimiters are also counted.

@item @code{p}
Recognize the same escape sequences as the @code{print} builtin
in string arguments to subsequent flags.

@item @code{l:}@var{expr}@code{::}@var{string1}@code{::}@var{string2}@code{:}
Pad the resulting words on the left.  Each word will be truncated if
required and placed in a field @var{expr} characters wide.  The space
to the left will be filled with @var{string1} (concatenated as often
as needed) or spaces if @var{string1} is not given.  If both
@var{string1} and @var{string2} are given, this string will be placed
exactly once directly to the left of the resulting word.

@item @code{r:}@var{expr}@code{::}@var{string1}@code{::}@var{string2}@code{:}
As @code{l}, but pad the words on the right.

@item @code{j:}@var{string}@code{:}
Join the words of arrays together using @var{string} as a separator.
@pindex SH_WORD_SPLIT, use of
Note that this occurs before field splitting by the @code{SH_WORD_SPLIT}
option.

@item @code{F}
Join the words of arrays together using newline as a separator.
This is a shorthand for `@code{pj:\n:}'.

@item @code{s:}@var{string}@code{:}
Force field splitting (see the option @code{SH_WORD_SPLIT}) at the
separator @var{string}.  Splitting only occurs in places where an
array value is valid.

@item @code{f}
Split the result of the expansion to lines. This is a shorthand
for `@code{ps:\n:}'.

@item @code{S}
(This and all remaining flags are used with the @code{$@{}...@code{#}...@code{@}} or
@code{$@{}...@code{%}...@code{@}} forms.)
Search substrings as well as beginnings or ends.

@item @code{I:}@var{expr}@code{:}
Search the @var{expr}th match (where @var{expr} evaluates to a number).

@item @code{M}
Include the matched portion in the result.

@item @code{R}
Include the unmatched portion in the result (the @emph{R}est).

@item @code{B}
Include the index of the beginning of the match in the result.

@item @code{E}
Include the index of the end of the match in the result.

@item @code{N}
Include the length of the match in the result.

@end table

@subsection Example
@noindent
The flag @code{f} is useful to split a double-quoted substitution line by
line.  For example, `@code{"$@{(f)$(<}@var{file}@code{)@}"}'
will substitue the contents of @var{file} divided so that one line is
supplied per argument to @var{cmd}.  Compare this with the effect of
`@code{$}@code{(<}@var{file}@code{)}' alone, which divides the file
up by words, or the same inside double quotes, where the entire
contents of the file are passed as a single argument.
@node Command Substitution, Arithmetic Expansion, Parameter Expansion, Expansion

@section Command Substitution
@noindent
@cindex command substitution
@cindex substitution, command
A command enclosed in parentheses
preceded by a dollar sign, like `@code{$(}...@code{)}', or quoted with grave
accents, like `@code{`}...@code{`}', is replaced with its standard output, with any
trailing newlines deleted.
If the substitution is not enclosed in double quotes, the
output is broken into words using the @code{IFS} parameter.
@vindex IFS, use of
The substitution `@code{$(cat} @var{foo}@code{)}' may be replaced
by the equivalent but faster `@code{$(<}@var{foo}@code{)}'.
In either case, if the option @code{GLOB_SUBST} is set,
the output is eligible for filename generation.
@node Arithmetic Expansion, Brace Expansion, Command Substitution, Expansion

@section Arithmetic Expansion
@noindent
@cindex arithmetic expansion
@cindex expansion, arithmetic
A string of the form `@code{$[}@var{exp}@code{]}' or
`@code{$((}@var{exp}@code{))}' is substituted
with the value of the arithmetic expression @var{exp}.  @var{exp} is
subjected to @emph{parameter expansion}, @emph{command substitution}
and @emph{arithmetic expansion} before it is evaluated.
See @ref{Arithmetic Evaluation}.
@node Brace Expansion, Filename Expansion, Arithmetic Expansion, Expansion

@section Brace Expansion
@noindent
@cindex brace expansion
@cindex expansion, brace
A string of the form
`@var{foo}@code{@{}@var{xx}@code{,}@var{yy}@code{,}@var{zz}@code{@}}@var{bar}'
is expanded to the individual words
`@var{fooxxbar}', `@var{fooyybar}' and `@var{foozzbar}'.
Left-to-right order is preserved.  This construct
may be nested.  Commas may be quoted in order to
include them literally in a word.

@noindent
An expression of the form `@code{@{}@var{n1}@code{..}@var{n2}@code{@}}',
where @var{n1} and @var{n2} are integers,
is expanded to every number between
@var{n1} and @var{n2} inclusive.  If either number begins with a
zero, all the resulting numbers will be padded with leading zeroes to
that minimum width.  If the numbers are in decreasing order the
resulting sequence will also be in decreasing order.

@noindent
If a brace expression matches none of the above forms, it is left
unchanged, unless the @code{BRACE_CCL} option is set.
@pindex BRACE_CCL, use of
In that case, it is expanded to a sorted list of the individual
characters between the braces, in the manner of a search set.
`@code{-}' is treated specially as in a search set, but `@code{^}' or `@code{!}' as
the first character is treated normally.
@node Filename Expansion, Filename Generation, Brace Expansion, Expansion

@section Filename Expansion
@noindent
@cindex filename expansion
@cindex expansion, filename
Each word is checked to see if it begins with an unquoted `@code{~}'.
If it does, then the word up to a `@code{/}',
or the end of the word if there is no `@code{/}',
is checked to see if it can be substituted in one of the ways
described here.  If so, then the `@code{~}' and the checked portion are
replaced with the appropriate substitute value.

@noindent
A `@code{~}' by itself is replaced by the value of @code{$HOME}.
A `@code{~}' followed by a `@code{+}' or a `@code{-}' is replaced by the value of
@code{$PWD} or @code{$OLDPWD}, respectively.

@noindent
A `@code{~}' followed by a number is replaced by the directory at that
position in the directory stack.
`@code{~0}' is equivalent to `@code{~+}',
and `@code{~1}' is the top of the stack.
`@code{~+}' followed by a number is replaced by the directory at that
position in the directory stack.
`@code{~+0}' is equivalent to `@code{~+}',
and `@code{~+1}' is the top of the stack.
`@code{~-}' followed by a number is replaced by the directory that
many positions from the bottom of the stack.
`@code{~-0}' is the bottom of the stack.
@pindex PUSHD_MINUS, use of
The @code{PUSHD_MINUS}
option exchanges the effects of `@code{~+}' and `@code{~-}' where they are
followed by a number.

@noindent
@cindex directories, named
@cindex named directories
A `@code{~}' followed by anything not already covered is looked up as a
named directory, and replaced by the value of that named directory if found.
Named directories are typically home directories for users on the system.
They may also be defined if the text after the `@code{~}' is the name
of a string shell parameter whose value begins with a `@code{/}'.
It is also possible to define directory names using the @code{-d} option to the
@code{hash} builtin.

@noindent
In certain circumstances (in prompts, for instance), when the shell
prints a path, the path is checked to see if it has a named
directory as its prefix.  If so, then the prefix portion
is replaced with a `@code{~}' followed by the name of the directory.
The shortest way of referring to the directory is used,
with ties broken in favour of using a named directory,
except when the directory is @code{/} itself.

@noindent
If a word begins with an unquoted `@code{=}'
and the @code{EQUALS} option is set,
the remainder of the word is taken as the
name of a command or alias.  If a command
exists by that name, the word is replaced
by the full pathname of the command.
If an alias exists by that name, the word
is replaced with the text of the alias.

@noindent
Filename expansion is performed on the right hand side of a parameter
assignment, including those appearing after commands of the
@code{typeset} family.  In this case, the right hand side will be treated
as a colon-separated list in the manner of the @code{PATH} parameter,
so that a `@code{~}' or an `@code{=}' following a `@code{:}' is eligible for expansion.
All such behaviour can be
disabled by quoting the `@code{~}', the `@code{=}', or the whole expression (but not
simply the colon); the @code{EQUALS} option is also respected.

@noindent
If the option @code{MAGIC_EQUAL_SUBST} is set, any unquoted shell
argument in the form `@var{identifier}@code{=}@var{expression}' becomes eligible
for file expansion as described in the previous paragraph.  Quoting the
first `@code{=}' also inhibits this.
@node Filename Generation, , Filename Expansion, Expansion

@section Filename Generation
@noindent
@cindex filename generation
@cindex globbing
If a word contains an unquoted instance of one of the characters
`@code{*}', `@code{(}', `@code{|}', `@code{<}', `@code{[}', or `@code{?}', it is regarded
as a pattern for filename generation, unless the @code{GLOB} option is unset.
@pindex GLOB, use of
If the @code{EXTENDED_GLOB} option is set,
@pindex EXTENDED_GLOB, use of
the `@code{^}' and `@code{#}' characters also denote a pattern; otherwise
they are not treated specially by the shell.

@noindent
The word is replaced with a list of sorted filenames that match
the pattern.  If no matching pattern is found, the shell gives
an error message, unless the @code{NULL_GLOB} option is set,
@pindex NULL_GLOB, use of
in which case the word is deleted; or unless the @code{NOMATCH}
option is unset, in which case the word is left unchanged.
@pindex NOMATCH, use of

@noindent
In filename generation,
the character `@code{/}' must be matched explicitly;
also, a `@code{.}' must be matched
explicitly at the beginning of a pattern or after a `@code{/}', unless the
@code{GLOB_DOTS} option is set.
@pindex GLOB_DOTS, use of
No filename generation pattern
matches the files `@code{.}' or `@code{..}'.  In other instances of pattern
matching, the `@code{/}' and `@code{.}' are not treated specially.

@subsection Glob Operators
@noindent
@table @asis
@item @code{*}
Matches any string, including the null string.

@item @code{?}
Matches any character.

@item @code{[}...@code{]}
Matches any of the enclosed characters.  Ranges of characters
can be specified by separating two characters by a `@code{-}'.
A `@code{-}' or `@code{]}' may be matched by including it as the
first character in the list.
There are also several named classes of characters, in the form
`@code{[:}@var{name}(+tt:])' with the following meanings:  `@code{[:alnum:]}'
alphanumeric, `@code{[:alpha:]}' alphabetic,
`@code{[:blank:]}' space or tab,
`@code{[:cntrl:]}' control character, `@code{[:digit:]}' decimal
digit, `@code{[:graph:]}' printable character except whitespace,
`@code{[:lower:]}' lowercase letter, `@code{[:print:]}' printable character,
`@code{[:punct:]}' printable character neither alphanumeric nor whitespace,
`@code{[:space:]}' whitespace character, `@code{[:upper:]}' uppercase letter, 
`@code{[:xdigit:]}' hexadecimal digit.  These use the macros provided by
the operating system to test for the given character combinations,
including any modifications due to local language settings:  see
man page ctype(3).  Note that the square brackets are additional
to those enclosing the whole set of characters, so to test for a
single alphanumeric character you need `@code{[[:alnum:]]}'.  Named
character sets can be used alongside other types,
e.g. `@code{[[:alpha:]0-9]}'.

@item @code{[^}...@code{]}
@itemx @code{[!}...@code{]}
Like @code{[}...@code{]}, except that it matches any character which is
not in the given set.

@item @code{<}[@var{x}]@code{-}[@var{y}]@code{>}
Matches any number in the range @var{x} to @var{y}, inclusive.
Either of the numbers may be omitted to make the range open-ended;
hence `@code{<->}' matches any number.

@item @code{(}...@code{)}
Matches the enclosed pattern.  This is used for grouping.
If the @code{KSH_GLOB} option is set, then a
`@code{@@}', `@code{*}', `@code{+}', `@code{?}' or `@code{!}' immediately preceding
the `@code{(}' is treated specially, as detailed below.

@item @var{x}@code{|}@var{y}
Matches either @var{x} or @var{y}.
This operator has lower precedence than any other.
The `@code{|}' character
must be within parentheses, to avoid interpretation as a pipeline.

@item @code{^}@var{x}
(Requires @code{EXTENDED_GLOB} to be set.)
Matches anything except the pattern @var{x}.
This has a higher precedence than `@code{/}', so `@code{^foo/bar}'
will search directories in `@code{.}' except `@code{./foo}'
for a file named `@code{bar}'.

@item @var{x}@code{~}@var{y}
(Requires @code{EXTENDED_GLOB} to be set.)
Match anything that matches the pattern @var{x} but does not match @var{y}.
This has lower precedence than any operator except `@code{|}', so
`@code{*/*~foo/bar}' will search for all files in all directories in `@code{.}'
and then exclude `@code{foo/bar}' if there was such a match.
It groups left-to-right, so multiple patterns can be excluded by
`@var{foo}@code{~}@var{bar}@code{~}@var{baz}'.
In the exclusion pattern (@var{y}), `@code{/}' and `@code{.}' are not treated
specially the way they usually are in globbing.

@item @var{x}@code{#}
(Requires @code{EXTENDED_GLOB} to be set.)
Matches zero or more occurrences of the pattern @var{x}.
This operator has high precedence; `@code{12#}' is equivalent to `@code{1(2#)}',
rather than `@code{(12)#}'.

@item @var{x}@code{##}
(Requires @code{EXTENDED_GLOB} to be set.)
Matches one or more occurrences of the pattern @var{x}.
This operator has high precedence; `@code{12##}' is equivalent to `@code{1(2##)}',
rather than `@code{(12)##}'.

@end table

@subsection ksh-like Glob Operators
@noindent
@pindex KSH_GLOB, use of
If the @code{KSH_GLOB} option is set, the effects of parentheses can be
modified by a preceding `@code{@@}', `@code{*}', `@code{+}', `@code{?}' or `@code{!}'.
This character need not be unquoted to have special effects,
but the `@code{(}' must be.

@noindent
@table @asis
@item @code{@@(}...@code{)}
Match the pattern in the parentheses.  (Like `@code{(}...@code{)}'.)

@item @code{*(}...@code{)}
Match any number of occurrences.  (Like `@code{(}...@code{)#}'.)

@item @code{+(}...@code{)}
Match at least one occurrence.  (Like `@code{(}...@code{)##}'.)

@item @code{?(}...@code{)}
Match zero or one occurrence.  (Like `@code{(|}...@code{)}'.)

@item @code{!(}...@code{)}
Match anything but the expression in parentheses.
(Like `@code{(^(}...@code{))}'.)

@end table

@subsection Recursive Globbing
@noindent
A pathname component of the form `@code{(}@var{foo}@code{/)#}'
matches a path consisting of zero or more directories
matching the pattern @var{foo}.
As a shorthand, `@code{**/}' is equivalent to `@code{(*/)#}'.
Thus:

@noindent
@code{ls (*/)#bar}

@noindent
or

@noindent
@code{ls **/bar}

@noindent
does a recursive directory search for files named `@code{bar}', not following
symbolic links.  To follow links, use `@code{***/}'.

@subsection Glob Qualifiers
@noindent
@cindex globbing, qualifiers
@cindex qualifiers, globbing
Patterns used for filename generation may end in a
list of qualifiers enclosed in parentheses.
The qualifiers specify which filenames that otherwise match the given pattern
will be inserted in the argument list.

@noindent
@pindex BARE_GLOB_QUAL, use of
If the option @code{BARE_GLOB_QUAL} is set, then a trailing set of parentheses
containing no `@code{|}' or `@code{(}' characters (or `@code{~}' if it is special)
is taken as a set of
glob qualifiers.  A glob subexpression that would normally be taken as glob
qualifiers, for example `@code{(^x)}', can be forced to be treated as part of
the glob pattern by doubling the parentheses, for example `@code{((^x))}'.

@noindent
A qualifier may be any one of the following:

@noindent
@table @asis
@item @code{/}
directories

@item @code{.}
plain files

@item @code{@@}
symbolic links

@item @code{=}
sockets

@item @code{p}
named pipes (FIFOs)

@item @code{*}
executable plain files (0100)

@item @code{%}
device files (character or block special)

@item @code{%b}
block special files

@item @code{%c}
character special files

@item @code{r}
owner-readable files (0400)

@item @code{w}
owner-writable files (0200)

@item @code{x}
owner-executable files (0100)

@item @code{A}
group-readable files (0040)

@item @code{I}
group-writable files (0020)

@item @code{E}
group-executable files (0010)

@item @code{R}
world-readable files (0004)

@item @code{W}
world-writable files (0002)

@item @code{X}
world-executable files (0001)

@item @code{s}
setuid files (04000)

@item @code{S}
setgid files (02000)

@item @code{t}
files with the sticky bit (01000)

@item @code{d}@var{dev}
files on the device @var{dev}

@item @code{l}[@code{-}|@code{+}]@var{ct}
files having a link count less than @var{ct} (@code{-}), greater than
@var{ct} (@code{+}), or is equal to @var{ct}

@item @code{U}
files owned by the effective user ID

@item @code{G}
files owned by the effective group ID

@item @code{u}@var{id}
files owned by user ID @var{id} if it is a number, if not, than the
character after the `@code{u}' will be used as a separator and the string
between it and the next matching separator
(`@code{(}', `@code{[}', `@code{@{}', and `@code{<}'
match `@code{)}', `@code{]}', `@code{@}}', and `@code{>}' respectively,
any other character matches
itself) will be taken as a user name, and the user ID of this user will
be taken (e.g. `@code{u:foo:}' or `@code{u[foo]}' for user `@code{foo}')

@item @code{g}@var{id}
like @code{u}@var{id} but with group IDs or names

@item @code{a}[@code{Mwhm}][@code{-}|@code{+}]@var{n}
files accessed exactly @var{n} days ago.  Files accessed within the
last @var{n} days are selected using a negative value for @var{n}
(@code{-}@var{n}).  Files accessed more than @var{n} days ago are selected by a
positive @var{n} value (@code{+}@var{n}).  Optional unit specifiers `@code{M}',
`@code{w}', `@code{h}' or `@code{m}' (e.g. `@code{ah5}') cause the check to be
performed with months (of 30 days), weeks, hours, or minutes instead of
days, respectively.  For instance, `@code{echo *(ah-5)}' would echo files
accessed within the last five hours.

@item @code{m}[@code{Mwhm}][@code{-}|@code{+}]@var{n}
like the file access qualifier, except that it uses the file modification
time.

@item @code{c}[@code{Mwhm}][@code{-}|@code{+}]@var{n}
like the file access qualifier, except that it uses the file inode change
time.

@item @code{L}[@code{+}|@code{-}]@var{n}
files less than @var{n} bytes (@code{-}), more than @var{n} bytes (@code{+}), or
exactly @var{n} bytes in length. If this flag is directly followed by a `@code{k}'
(`@code{K}'), `@code{m}' (`@code{M}'), or `@code{p}' (`@code{P}') (e.g. `@code{Lk-50}')
the check is performed with kilobytes, megabytes, or blocks (of 512 bytes)
instead.

@item @code{^}
negates all qualifiers following it

@item @code{-}
toggles between making the qualifiers work on symbolic links (the
default) and the files they point to

@item @code{M}
sets the @code{MARK_DIRS} option for the current pattern
@pindex MARK_DIRS, setting in pattern

@item @code{T}
appends a trailing qualifier mark to the file names, analogous to the
@code{LIST_TYPES} option, for the current pattern (overrides @code{M})

@item @code{N}
sets the @code{NULL_GLOB} option for the current pattern
@pindex NULL_GLOB, setting in pattern

@item @code{D}
sets the @code{GLOB_DOTS} option for the current pattern
@pindex GLOB_DOTS, setting in pattern

@end table

@noindent
More than one of these lists can be combined, separated by commas. The
whole list matches if at least one of the sublists matches (they are
`or'ed, the qualifiers in the sublists are `and'ed).

@noindent
If a `@code{:}' appears in a qualifier list, the remainder of the expression in
parenthesis is interpreted as a modifier (see @ref{Modifiers}
in @ref{History Expansion}).  Note that
each modifier must be introduced by a separate `@code{:}'.  Note also that the
result after modification does not have to be an existing file.  The
name of any existing file can be followed by a modifier of the form
`@code{(:..)}' even if no actual filename generation is performed.
Thus:

@noindent
@code{ls *(-/)}

@noindent
lists all directories and symbolic links that point to directories,
and

@noindent
@code{ls *(%W)}

@noindent
lists all world-writable device files in the current directory, and

@noindent
@code{ls *(W,X)}

@noindent
lists all files in the current directory that are
world-writable or world-executable, and

@noindent
@code{echo /tmp/foo*(u0^@@:t)}

@noindent
outputs the basename of all root-owned files beginning with the string
`@code{foo}' in @code{/tmp}, ignoring symlinks, and

@noindent
@code{ls *.*~(lex|parse).[ch](^D^l1)}

@noindent
lists all files having a link count of one whose names contain a dot
(but not those starting with a dot, since @code{GLOB_DOTS} is explicitly
switched off) except for @code{lex.c}, @code{lex.h}, @code{parse.c} and @code{parse.h}.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/params.yo
@node Parameters, Options, Expansion, Top

@chapter Parameters
@noindent
@cindex parameters

@section Description
@noindent
A parameter has a name, a value, and a number of attributes.
A name may be any sequence of alphanumeric
characters and underscores, or the single characters
`@code{*}', `@code{@@}', `@code{#}', `@code{?}', `@code{-}', `@code{$}', or `@code{!}'.
The value may be a @emph{scalar} (a string),
an integer, or an array.
To assign a scalar or integer value to a parameter,
use the @code{typeset} builtin.
@findex typeset, use of
To assign an array value, use `@code{set -A} @var{name} @var{value} ...'.
@findex set, use of
The value of a parameter may also be assigned by writing:

@noindent
@var{name}@code{=}@var{value}

@noindent
If the integer attribute, @code{-i}, is set for @var{name},
the @var{value} is subject to arithmetic evaluation.

@noindent
In the parameter lists, the mark `<S>' indicates that the parameter is special.
Special parameters cannot have their type changed, and they stay special even
if unset.  `<Z>' indicates that the parameter does not exist when the shell
initialises in @code{sh} or @code{ksh} emulation mode.
@menu
* Local Parameters::
* Array Parameters::
* Positional Parameters::
* Parameters Set By The Shell::
* Parameters Used By The Shell::
@end menu
@node Local Parameters, Array Parameters, , Parameters

@section Local Parameters
@noindent
Shell function executions delimit scopes for shell parameters.
(Parameters are dynamically scoped.)  The @code{typeset} builtin, and its
alternative forms @code{declare}, @code{integer}, @code{local} and @code{readonly}
(but not @code{export}), can be used to declare a parameter as being local
to the innermost scope.

@noindent
When a parameter is read or assigned to, the
innermost existing parameter of that name is used.  (That is, the
local parameter hides any less-local parameter.)  However, assigning
to a non-existent parameter, or declaring a new parameter with @code{export},
causes it to be created in the @emph{outer}most scope.

@noindent
Local parameters disappear when their scope ends.
@code{unset} can be used to delete a parameter while it is still in scope; this
will reveal the next outer parameter of the same name.  However, @emph{special}
parameters are still special when unset.
@node Array Parameters, Positional Parameters, Local Parameters, Parameters

@section Array Parameters
@noindent
The value of an array parameter may be assigned by writing:

@noindent
@var{name}@code{=(}@var{value} ...@code{)}

@noindent
Individual elements of an array may be selected using a
subscript.  A subscript of the form `@code{[}@var{exp}@code{]}'
selects the single element @var{exp}, where @var{exp} is
an arithmetic expression which will be subject to arithmetic
expansion as if it were surrounded by `@code{$((}...@code{))}'.
The elements are numbered beginning with 1 unless the
@code{KSH_ARRAYS} option is set when they are numbered from zero.
@pindex KSH_ARRAYS, use of

@noindent
A subscript of the form `@code{[*]}' or `@code{[@@]}' evaluates to all
elements of an array; there is no difference between the two
except when they appear within double quotes.
`@code{"$foo[*]"}' evaluates to `@code{"$foo[1] $foo[2] }...@code{"}', while
`@code{"$foo[@@]"}' evaluates to `@code{"$foo[1]" "$foo[2]"}', etc.

@noindent
A subscript of the form `@code{[}@var{exp1}@code{,}@var{exp2}@code{]}'
selects all elements in the range @var{exp1} to @var{exp2},
inclusive.
If one of the subscripts evaluates to a negative number,
say @code{-}@var{n}, then the @var{n}th element from the end
of the array is used.  Thus `@code{$foo[-3]}' is the third element
from the end of the array @code{foo}, and
`@code{$foo[1,-1]}' is the same as `@code{$foo[*]}'.

@noindent
Subscripting may also be performed on non-array values, in which
case the subscripts specify a substring to be extracted.
For example, if @code{FOO} is set to `@code{foobar}', then
`@code{echo $FOO[2,5]}' prints `@code{ooba}'.

@noindent
Subscripts may be used inside braces used to delimit a parameter name, thus
`@code{$@{foo[2]@}}' is equivalent to `@code{$foo[2]}'.  If the @code{KSH_ARRAYS}
option is set, the braced form is the only one that will
work, the subscript otherwise not being treated specially.

@noindent
If a subscript is used on the left side of an assignment the selected
range is replaced by the expression on the right side.

@noindent
If the opening bracket or the comma is directly followed by an opening
parentheses the string up to the matching closing one is considered to
be a list of flags. The flags currently understood are:

@noindent
@table @asis
@item @code{e}
this option has no effect and retained for backward compatibility only.

@item @code{w}
if the parameter subscripted is a scalar than this flag makes
subscription work on a per-word basis instead of characters.

@item @code{s:}@var{string}@code{:}
this gives the @var{string} that separates words (for use with the
@code{w} flag).

@item @code{p}
Recognize the same escape sequences as the @code{print} builtin in
the string argument of a subsequent `@code{s}' flag.

@item @code{f}
if the parameter subscripted is a scalar than this flag makes
subscription work on a per-line basis instead of characters.
This is a shorthand for `@code{pws:\n:}'.

@item @code{r}
if this flag is given the @var{exp} is taken as a pattern and the
result is the first matching array element, substring or word (if the
parameter is an array, if it is a scalar, or if it is a scalar and the
`@code{w}' flag is given, respectively); note that this is like giving a
number: `@code{$foo[(r)}@var{??}@code{,3]}' and `@code{$foo[(r)}@var{??}@code{,(r)f*]}' work.

@item @code{R}
like `@code{r}', but gives the last match.

@item @code{i}
like `@code{r}', but gives the index of the match instead; this may not
be combined with a second argument.

@item @code{I}
like `@code{i}, but gives the index of the last match.

@item @code{n:}@var{expr}@code{:}
if combined with `@code{r}', `@code{R}', `@code{i}' or `@code{I}', makes them give
the @var{n}th or @var{n}th last match (if @var{expr} evaluates to
@var{n}).

@end table
@node Positional Parameters, Parameters Set By The Shell, Array Parameters, Parameters

@section Positional Parameters
@noindent
Positional parameters are set by the shell on invocation,
by the @code{set} builtin, or by direct assignment.
The parameter @var{n}, where @var{n} is a number,
is the @var{n}th positional parameter.
The parameters @code{*}, @code{@@} and @code{argv} are
arrays containing all the positional parameters;
thus `@code{$argv[}@var{n}@code{]}', etc., is equivalent to simply `@code{$}@var{n}'.

@noindent
@node Parameters Set By The Shell, Parameters Used By The Shell, Positional Parameters, Parameters

@section Parameters Set By The Shell
@noindent
The following parameters are automatically set by the shell:

@noindent
@table @asis
@vindex !
@item @code{!} <S>
The process ID of the last background command invoked.

@vindex #
@item @code{#} <S>
The number of positional parameters in decimal.

@vindex ARGC
@item @code{ARGC} <S> <Z>
Same as @code{#}.

@vindex $
@item @code{$} <S>
The process ID of this shell.

@vindex -
@item @code{-} <S>
Flags supplied to the shell on invocation or by the @code{set}
or @code{setopt} commands.

@vindex *
@item @code{*} <S>
An array containing the positional parameters.

@vindex argv
@item @code{argv} <S> <Z>
Same as @code{*}.

@vindex @@
@item @code{@@} <S>
Same as @code{argv[@@]}.

@vindex ?
@item @code{?} <S>
The exit value returned by the last command.

@vindex 0
@item @code{0} <S>
The name used to invoke the current shell.  If the @code{FUNCTION_ARGZERO} option
is set, this is set temporarily within a shell function to the name of the
function, and within a sourced script to the name of the script.

@vindex status
@item @code{status} <S> <Z>
Same as @code{?}.

@vindex _
@item @code{_} <S>
The last argument of the previous command.
Also, this parameter is set in the environment of every command
executed to the full pathname of the command.

@vindex EGID
@item @code{EGID} <S>
The effective group ID of the shell process.  If you have sufficient
privileges, you may change the effective group ID of the shell
process by assigning to this parameter.  Also (assuming sufficient
privileges), you may start a single command with a different
effective group ID by `@code{(EGID=}@var{gid}@code{; command)}'

@vindex EUID
@item @code{EUID} <S>
The effective user ID of the shell process.  If you have sufficient
privileges, you may change the effective user ID of the shell process
by assigning to this parameter.  Also (assuming sufficient privileges),
you may start a single command with a different
effective user ID by `@code{(EUID=}@var{uid}@code{; command)}'

@vindex ERRNO
@item @code{ERRNO} <S>
The value of errno (see man page errno(3))
as set by the most recently failed system call.
This value is system dependent and is intended for debugging
purposes.

@vindex GID
@item @code{GID} <S>
The real group ID of the shell process.  If you have sufficient privileges,
you may change the group ID of the shell process by assigning to this
parameter.  Also (assuming sufficient privileges), you may start a single
command under a different
group ID by `@code{(GID=}@var{gid}@code{; command)}'

@vindex HOST
@item @code{HOST}
The current hostname.

@vindex LINENO
@item @code{LINENO} <S>
The line number of the current line within the current script
being executed.

@vindex LOGNAME
@item @code{LOGNAME}
If the corresponding variable is not set in the environment of the
shell, it is initialized to the login name corresponding to the
current login session. This parameter is exported by default but
this can be disabled using the @code{typeset} builtin.

@vindex MACHTYPE
@item @code{MACHTYPE}
The machine type (microprocessor class or machine model),
as determined at compile time.

@vindex OLDPWD
@item @code{OLDPWD}
The previous working directory.  This is set when the shell initialises
and whenever the directory changes.

@vindex OPTARG
@item @code{OPTARG} <S>
The value of the last option argument processed by the @code{getopts}
command.

@vindex OPTIND
@item @code{OPTIND} <S>
The index of the last option argument processed by the @code{getopts}
command.

@vindex OSTYPE
@item @code{OSTYPE}
The operating system, as determined at compile time.

@vindex PPID
@item @code{PPID} <S>
The process ID of the parent of the shell.

@vindex PWD
@item @code{PWD}
The present working directory.  This is set when the shell initialises
and whenever the directory changes.

@vindex RANDOM
@item @code{RANDOM} <S>
A random integer from 0 to 32767, newly generated each time
this parameter is referenced.  The random number generator
can be seeded by assigning a numeric value to @code{RANDOM}.

@vindex SECONDS
@item @code{SECONDS} <S>
The number of seconds since shell invocation.  If this parameter
is assigned a value, then the value returned upon reference
will be the value that was assigned plus the number of seconds
since the assignment.

@vindex SHLVL
@item @code{SHLVL} <S>
Incremented by one each time a new shell is started.

@vindex signals
@item @code{signals}
An array containing the names of the signals.

@vindex TTY
@item @code{TTY}
The name of the tty associated with the shell, if any.

@vindex TTYIDLE
@item @code{TTYIDLE} <S>
The idle time of the tty associated with the shell in seconds or -1 if there
is no such tty.

@vindex UID
@item @code{UID} <S>
The real user ID of the shell process.  If you have sufficient privileges,
you may change the user ID of the shell by assigning to this parameter.
Also (assuming sufficient privileges), you may start a single command
under a different
user ID by `@code{(UID=}@var{uid}@code{; command)}'

@vindex USERNAME
@item @code{USERNAME} <S>
The username corresponding to the real user ID of the shell process.  If you
have sufficient privileges, you may change the username (and also the
user ID and group ID) of the shell by assigning to this parameter.
Also (assuming sufficient privileges), you may start a single command
under a different username (and user ID and group ID)
by `@code{(USERNAME=}@var{username}@code{; command)}'

@vindex VENDOR
@item @code{VENDOR}
The vendor, as determined at compile time.

@vindex ZSH_NAME
@item @code{ZSH_NAME}
Expands to the basename of the command used to invoke this instance
of zsh.

@vindex ZSH_VERSION
@item @code{ZSH_VERSION}
The version number of this zsh.

@end table
@node Parameters Used By The Shell, , Parameters Set By The Shell, Parameters

@section Parameters Used By The Shell
@noindent
The following parameters are used by the shell:

@noindent
@table @asis
@vindex ARGV0
@item @code{ARGV0}
If exported, its value is used as @code{argv[0]} of external commands.
Usually used in constructs like `@code{ARGV0=emacs nethack}'.

@vindex BAUD
@item @code{BAUD}
The baud rate of the current connection.  Used by the line editor
update mechanism to compensate for a slow terminal by delaying
updates until necessary.  This may be profitably set to a lower value
in some circumstances, e.g.
for slow modems dialing into a communications server which is connected
to a host via a fast link; in this case, this variable
would be set by default to the speed of the fast link, and not
the modem.
This parameter should be set to the baud
rate of the slowest part of the link for best performance. The compensation
mechanism can be turned off by setting the variable to zero.

@vindex cdpath
@vindex CDPATH
@item @code{cdpath} <S> <Z> (@code{CDPATH} <S>)
An array (colon-separated list)
of directories specifying the search path for the @code{cd} command.

@vindex COLUMNS
@item @code{COLUMNS} <S>
The number of columns for this terminal session.
Used for printing select lists and for the line editor.

@vindex DIRSTACKSIZE
@item @code{DIRSTACKSIZE}
The maximum size of the directory stack.  If the
stack gets larger than this, it will be truncated automatically.
This is useful with the @code{AUTO_PUSHD} option.
@pindex AUTO_PUSHD, use of

@vindex FCEDIT
@item @code{FCEDIT}
The default editor for the @code{fc} builtin.

@vindex fignore
@vindex FIGNORE
@item @code{fignore} <S> <Z> (@code{FIGNORE} <S>)
An array (colon separated list)
containing the suffixes of files to be ignored
during filename completion.  However, if the completion generates only files
which would match if this variable would be ignored, than these files are
completed anyway.

@vindex fpath
@vindex FPATH
@item @code{fpath} <S> <Z> (@code{FPATH} <S>)
An array (colon separated list)
of directories specifying the search path for
function definitions.  This path is searched when a function
with the @code{-u} attribute is referenced.  If an executable
file is found, then it is read and executed in the current environment.

@vindex histchars
@item @code{histchars} <S>
Three characters used by the shell's history and lexical analysis
mechanism.  The first character signals the start of a history
substitution (default `@code{!}').  The second character signals the
start of a quick history substitution (default `@code{^}').  The third
character is the comment character (default `@code{#}').

@vindex HISTCHARS
@item @code{HISTCHARS} <S> <Z>
Same as @code{histchars}.  (Deprecated.)

@vindex HISTFILE
@item @code{HISTFILE}
The file to save the history in when an interactive shell exits.
If unset, the history is not saved.

@vindex HISTSIZE
@item @code{HISTSIZE} <S>
The maximum size of the history list.

@vindex HOME
@item @code{HOME} <S>
The default argument for the @code{cd} command.

@vindex IFS
@item @code{IFS} <S>
Internal field separators (by default space, tab, newline and NUL), that
are used to separate words which result from
command or parameter substitution and words read by
the @code{read} builtin.  Any characters from the set space, tab and
newline that appear in the IFS are called @emph{IFS white space}.
One or more IFS white space characters or one non-IFS white space
character together with any adjacent IFS white space character delimit
a field.  If an IFS white space character appears twice consecutively
in the IFS, this character is treated as if it were not an IFS white
space character.

@vindex KEYTIMEOUT
@item @code{KEYTIMEOUT}
The time the shell waits, in hundredths of seconds, for another key to
be pressed when reading bound multi-character sequences.

@vindex LANG
@item @code{LANG} <S>
This variable determines the locale category for any category not
specifically selected via a variable starting with `@code{LC_}'.

@vindex LC_ALL
@item @code{LC_ALL} <S>
This variable overrides the value of the `@code{LANG}' variable and the value
of any of the other variables starting with `@code{LC_}'.

@vindex LC_COLLATE
@item @code{LC_COLLATE} <S>
This variable determines the locale category for character collation
information within ranges in glob brackets and for sorting.

@vindex LC_CTYPE
@item @code{LC_CTYPE} <S>
This variable determines the locale category for character handling
functions.

@vindex LC_MESSAGES
@item @code{LC_MESSAGES} <S>
This variable determines the language in which messages should be
written.  Note that zsh does not use message catalogs.

@vindex LC_TIME
@item @code{LC_TIME} <S>
This variable determines the locale category for date and time
formatting in prompt escape sequences.

@vindex LINES
@item @code{LINES} <S>
The number of lines for this terminal session.
Used for printing select lists and for the line editor.

@vindex LISTMAX
@item @code{LISTMAX}
In the line editor, the number of filenames to list without asking first.
If set to zero, the shell asks only if the top of the listing would scroll
off the screen.

@vindex LOGCHECK
@item @code{LOGCHECK}
The interval in seconds between checks for login/logout activity
using the @code{watch} parameter.

@vindex MAIL
@item @code{MAIL}
If this parameter is set and @code{mailpath} is not set,
the shell looks for mail in the specified file.

@vindex MAILCHECK
@item @code{MAILCHECK}
The interval in seconds between checks for new mail.

@vindex mailpath
@vindex MAILPATH
@item @code{mailpath} <S> <Z> (@code{MAILPATH} <S>)
An array (colon-separated list) of filenames to check for
new mail.  Each filename can be followed by a `@code{?}' and a
message that will be printed.  The message will undergo
parameter expansion, command substitution and arithmetic
substitution with the variable @code{$_} defined as the name
of the file that has changed.  The default message is
`@code{You have new mail}'.  If an element is a directory
instead of a file the shell will recursively check every
file in every subdirectory of the element.

@vindex manpath
@vindex MANPATH
@item @code{manpath} <S> <Z> (@code{MANPATH} <S> <Z>)
An array (colon-separated list)
whose value is not used by the shell.  The @code{manpath}
array can be useful, however, since setting it also sets
@code{MANPATH}, and vice versa.

@vindex module_path
@vindex MODULE_PATH
@item @code{module_path} <S> <Z> (@code{MODULE_PATH} <S>)
An array (colon-separated list)
of directories that @code{zmodload}
searches for dynamically loadable modules.
This is initialised to a standard pathname,
usually `@code{/usr/local/lib/zsh/$ZSH_VERSION}'.
(The `@code{/usr/local/lib}' part varies from installation to installation.)
For security reasons, any value set in the environment when the shell
is started will be ignored.

@noindent
These parameters only exist if the installation supports dynamic
module loading.

@vindex NULLCMD
@cindex null command style
@cindex csh, null command style
@cindex ksh, null command style
@item @code{NULLCMD} <S>
The command name to assume if a redirection is specified
with no command.  Defaults to @code{cat}.  For @cite{sh}/@cite{ksh}
behavior, change this to @code{:}.  For @cite{csh}-like
behavior, unset this parameter; the shell will print an
error message if null commands are entered.

@vindex path
@vindex PATH
@item @code{path} <S> <Z> (@code{PATH} <S>)
An array (colon-separated list)
of directories to search for commands.
When this parameter is set, each directory is scanned
and all files found are put in a hash table.

@vindex POSTEDIT
@item @code{POSTEDIT} <S>
This string is output whenever the line editor exits.
It usually contains termcap strings to reset the terminal.

@vindex PS1
@item @code{PS1} <S>
The primary prompt string, printed before a command is read.
the default is `@code{%m%# }'.  It undergoes a special form of expansion
before being displayed; see @ref{Prompt Expansion}.

@vindex PS2
@item @code{PS2} <S>
The secondary prompt, printed when the shell needs more information
to complete a command.
It is expanded in the same way as @code{PS1}.
The default is `@code{%_> }', which displays any shell constructs or quotation
marks which are currently being processed.

@vindex PS3
@item @code{PS3} <S>
Selection prompt used within a @code{select} loop.
It is expanded in the same way as @code{PS1}.
The default is `@code{?# }'.

@vindex PS4
@item @code{PS4} <S>
The execution trace prompt.  Default is `@code{+ }'.

@vindex PROMPT
@item @code{PROMPT} <S> <Z>
@vindex PROMPT2
@itemx @code{PROMPT2} <S> <Z>
@vindex PROMPT3
@itemx @code{PROMPT3} <S> <Z>
@vindex PROMPT4
@itemx @code{PROMPT4} <S> <Z>
Same as @code{PS1}, @code{PS2}, @code{PS3} and @code{PS4},
respectively.

@vindex psvar
@vindex PSVAR
@item @code{psvar} <S> <Z> (@code{PSVAR} <S>)
An array (colon-separated list) whose first nine values can be used in
@code{PROMPT} strings.  Setting @code{psvar} also sets @code{PSVAR}, and
vice versa.

@vindex prompt
@item @code{prompt} <S> <Z>
Same as @code{PS1}.

@vindex READNULLCMD
@item @code{READNULLCMD} <S>
The command name to assume if a single input redirection
is specified with no command.  Defaults to @code{more}.

@vindex REPORTTIME
@item @code{REPORTTIME}
If nonnegative, commands whose combined user and system execution times
(measured in seconds) are greater than this value have timing
statistics printed for them.

@vindex RPROMPT
@item @code{RPROMPT} <S>
@vindex RPS1
@itemx @code{RPS1} <S>
This prompt is displayed on the right-hand side of the screen
when the primary prompt is being displayed on the left.
This does not work if the @code{SINGLELINEZLE} option is set.
It is expanded in the same way as @code{PS1}.

@vindex SAVEHIST
@item @code{SAVEHIST}
The maximum number of history events to save in the history file.

@vindex SPROMPT
@item @code{SPROMPT} <S>
The prompt used for spelling correction.  The sequence
`@code{%R}' expands to the string which presumably needs spelling
correction, and `@code{%r}' expands to the proposed correction.
All other prompt escapes are also allowed.

@vindex STTY
@item @code{STTY}
If this parameter is set in a command's environment, the shell runs the
@code{stty} command with the value of this parameter as arguments in order to
set up the terminal before executing the command. The modes apply only to the
command, and are reset when it finishes or is suspended. If the command is
suspended and continued later with the @code{fg} or @code{wait} builtins it will
see the modes specified by @code{STTY}, as if it were not suspended.  This
(intentionally) does not apply if the command is continued via `@code{kill -CONT}'.
@code{STTY} is ignored if the command is run in the background, or if it is in the
environment of the shell but not explicitly assigned to in the input line. This
avoids running stty at every external command by accidentally exporting it.
Also note that @code{STTY} should not be used for window size specifications; these
will not be local to the command.

@vindex TERM
@item @code{TERM} <S>
The type of terminal in use.  This is used when looking up termcap sequences.

@vindex TIMEFMT
@item @code{TIMEFMT}
The format of process time reports with the @code{time} keyword.
The default is `@code{%E real  %U user  %S system  %P %J}'.
Recognizes the following escape sequences:

@noindent
@table @asis
@item @code{%%}
A `@code{%}'.
@item @code{%U}
CPU seconds spent in user mode.
@item @code{%S}
CPU seconds spent in kernel mode.
@item @code{%E}
Elapsed time in seconds.
@item @code{%P}
The CPU percentage, computed as (@code{%U}+@code{%S})/@code{%E}.
@item @code{%J}
The name of this job.
@end table

@noindent
A star may be inserted between the percent sign and flags printing time.
This cause the time to be printed in
`@var{hh}@code{:}@var{mm}@code{:}@var{ss}@code{.}@var{ttt}'
format (hours and minutes are only printed if they are not zero).

@vindex TMOUT
@item @code{TMOUT}
If this parameter is nonzero, the shell will receive an @code{ALRM}
signal if a command is not entered within the specified number of
seconds after issuing a prompt. If there is a trap on @code{SIGALRM}, it
will be executed and a new alarm is scheduled using the value of the
@code{TMOUT} parameter after executing the trap.  If no trap is set, and
the idle time of the terminal is not less than the value of the
@code{TMOUT} parameter, zsh terminates.  Otherwise a new alarm is
scheduled to @code{TMOUT} seconds after the last keypress.

@vindex TMPPREFIX
@item @code{TMPPREFIX}
A pathname prefix which the shell will use for all temporary files.
Note that this should include an initial part for the file name as
well as any directory names.  The default is `@code{/tmp/zsh}'.

@vindex watch
@vindex WATCH
@item @code{watch} <S> <Z> (@code{WATCH} <S>)
An array (colon-separated list) of login/logout events to report.
If it contains the single word `@code{all}', then all login/logout events
are reported.  If it contains the single word `@code{notme}', then all
events are reported as with `@code{all}' except @code{$USERNAME}.
An entry in this list may consist of a username,
an `@code{@@}' followed by a remote hostname,
and a `@code{%}' followed by a line (tty).
Any or all of these components may be present in an entry;
if a login/logout event matches all of them,
it is reported.

@vindex WATCHFMT
@item @code{WATCHFMT}
The format of login/logout reports if the @code{watch} parameter is set.
Default is `@code{%n has %a %l from %m}'.
Recognizes the following escape sequences:

@noindent
@table @asis
@item @code{%n}
The name of the user that logged in/out.

@item @code{%a}
The observed action, i.e. "logged on" or "logged off".

@item @code{%l}
The line (tty) the user is logged in on.

@item @code{%M}
The full hostname of the remote host.

@item @code{%m}
The hostname up to the first `@code{.}'.  If only the
IP address is available or the utmp field contains
the name of an X-windows display, the whole name is printed.

@noindent
@emph{NOTE:}
The `@code{%m}' and `@code{%M}' escapes will work only if there is a host name
field in the utmp on your machine.  Otherwise they are
treated as ordinary strings.

@item @code{%S} (@code{%s})
Start (stop) standout mode.

@item @code{%U} (@code{%u})
Start (stop) underline mode.

@item @code{%B} (@code{%b})
Start (stop) boldface mode.

@item @code{%t}
@itemx @code{%@@}
The time, in 12-hour, am/pm format.

@item @code{%T}
The time, in 24-hour format.

@item @code{%w}
The date in `@var{day}@code{-}@var{dd}' format.

@item @code{%W}
The date in `@var{mm}@code{/}@var{dd}@code{/}@var{yy}' format.

@item @code{%D}
The date in `@var{yy}@code{-}@var{mm}@code{-}@var{dd}' format.

@item @code{%(}@var{x}@code{:}@var{true-text}@code{:}@var{false-text}@code{)}
Specifies a ternary expression.
The character following the @var{x} is
arbitrary; the same character is used to separate the text
for the "true" result from that for the "false" result.
Both the separator and the right parenthesis may be escaped
with a backslash.
Ternary expressions may be nested.

@noindent
The test character @var{x} may be any one of `@code{l}', `@code{n}', `@code{m}'
or `@code{M}', which indicate a `true' result if the corresponding
escape sequence would return a non-empty value; or it may be `@code{a}',
which indicates a `true' result if the watched user has logged in,
or `false' if he has logged out.
Other characters evaluate to neither true nor false; the entire
expression is omitted in this case.

@noindent
If the result is `true', then the @var{true-text}
is formatted according to the rules above and printed,
and the @var{false-text} is skipped.
If `false', the @var{true-text} is skipped and the @var{false-text}
is formatted and printed.
Either or both of the branches may be empty, but
both separators must be present in any case.

@end table

@vindex WORDCHARS
@item @code{WORDCHARS} <S>
A list of non-alphanumeric characters considered part of a word
by the line editor.

@vindex ZDOTDIR
@item @code{ZDOTDIR}
The directory to search for shell startup files (.zshrc, etc),
if not @code{$HOME}.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/options.yo
@node Options, Shell Builtin Commands, Parameters, Top

@chapter Options
@noindent
@cindex options
@menu
* Specifying Options::
* Description of Options::
* Option Aliases::
* Single Letter Options::
@end menu
@node Specifying Options, Description of Options, , Options

@section Specifying Options
@noindent
@cindex options, specifying
Options are primarily referred to by name.
These names are case insensitive and underscores are ignored.
For example, `@code{allexport}' is equivalent to `@code{A__lleXP_ort}'.

@noindent
The sense of an option name may be inverted by preceding it with
`@code{no}', so `@code{setopt No_Beep}' is equivalent to `@code{unsetopt beep}'.
This inversion can only be done once, so `@code{nonobeep}' is @emph{not}
a synonym for `@code{beep}'.  Similarly, `@code{tify}' is not a synonym for
`@code{nonotify}' (the inversion of `@code{notify}').

@noindent
Some options also have one or more single letter names.
There are two sets of single letter options: one used by default,
and another used to emulate @cite{sh}/@cite{ksh} (used when the
@code{SH_OPTION_LETTERS} option is set).
The single letter options can be used on the shell command line,
or with the @code{set}, @code{setopt} and @code{unsetopt}
builtins, as normal Unix options preceded by `@code{-}'.

@noindent
The sense of the single letter options may be inverted by using
`@code{+}' instead of `@code{-}'.
Some of the single letter option names refer to an option being off,
in which case the inversion of that name refers to the option being on.
For example, `@code{+n}' is the short name of `@code{exec}', and
`@code{-n}' is the short name of its inversion, `@code{noexec}'.
@node Description of Options, Option Aliases, Specifying Options, Options

@section Description of Options
@noindent
@cindex options, description
@table @asis
@pindex ALL_EXPORT
@cindex export, automatic
@item @code{ALL_EXPORT} (@code{-a}, ksh: @code{-a})
All parameters subsequently defined are automatically exported.

@pindex ALWAYS_LAST_PROMPT
@item @code{ALWAYS_LAST_PROMPT}
If unset, key functions that list completions try to return to the last
prompt if given a numeric argument. If set these functions try to
return to the last prompt if given @emph{no} numeric argument.

@pindex ALWAYS_TO_END
@item @code{ALWAYS_TO_END}
If a completion is performed with the cursor within a word, and a
full completion is inserted, the cursor is moved to the end of the
word.  That is, the cursor is moved to the end of the word if either
a single match is inserted or menu completion is performed.

@pindex APPEND_HISTORY
@cindex history, appending to a file
@item @code{APPEND_HISTORY}
If this is set, zsh sessions will append their history list to
the history file, rather than overwrite it. Thus, multiple parallel
zsh sessions will all have their history lists added to the
history file, in the order they are killed.

@pindex AUTO_CD
@cindex cd, automatic
@item @code{AUTO_CD} (@code{-J})
If a command is issued that can't be executed as a normal command,
and the command is the name of a directory, perform the @code{cd}
command to that directory.

@pindex AUTO_LIST
@cindex completion, listing choices
@item @code{AUTO_LIST} (@code{-9})
Automatically list choices on an ambiguous completion.

@pindex AUTO_MENU
@cindex completion, menu
@item @code{AUTO_MENU}
Automatically use menu completion after the second consecutive request for
completion, for example by pressing the tab key repeatedly. This option
is overridden by @code{MENU_COMPLETE}.

@pindex AUTO_NAME_DIRS
@cindex directories, named
@item @code{AUTO_NAME_DIRS}
Any parameter that is set to the absolute name of a directory
immediately becomes a name for that directory, that will be used
by the `@code{%~}'
and related prompt sequences, and will be available when completion
is performed on a word starting with `@code{~}'.
(Otherwise, the parameter must be used in the form `@code{~}@var{param}' first.)

@pindex AUTO_PARAM_KEYS
@item @code{AUTO_PARAM_KEYS}
If a parameter name was completed and a following character
(normally a space) automatically
inserted, and the next character typed is one
of those that have to come directly after the name (like `@code{@}}', `@code{:}',
etc.), the automatically added character is deleted, so that the character
typed comes immediately after the parameter name.
Completion in a brace expansion is affected similarly: the added character
is a `@code{,}', which will be removed if `@code{@}}' is typed next.

@pindex AUTO_PARAM_SLASH
@item @code{AUTO_PARAM_SLASH}
If a parameter is completed whose content is the name of a directory,
then add a trailing slash instead of a space.

@pindex AUTO_PUSHD
@cindex cd, behaving like pushd
@cindex pushd, making cd behave like
@item @code{AUTO_PUSHD} (@code{-N})
Make @code{cd} push the old directory onto the directory stack.

@pindex AUTO_REMOVE_SLASH
@cindex slash, removing trailing
@item @code{AUTO_REMOVE_SLASH}
When the last character resulting from a completion is a slash and the next
character typed is a word delimiter or a slash, remove the slash.

@pindex AUTO_RESUME
@cindex jobs, resuming automatically
@cindex resuming jobs automatically
@item @code{AUTO_RESUME} (@code{-W})
Treat single word simple commands without redirection
as candidates for resumption of an existing job.

@pindex BAD_PATTERN
@cindex globbing, bad pattern
@cindex filename generation, bad pattern
@item @code{BAD_PATTERN} (@code{+2})
If a pattern for filename generation is badly formed, print an error message.
(If this option is unset, the pattern will be left unchanged.)

@pindex BANG_HIST
@cindex history, enable substitution
@cindex enable history substitution
@item @code{BANG_HIST} (@code{+K})
Perform textual history substitution, @cite{csh}-style,
treating the character `@code{!}' specially.

@pindex BARE_GLOB_QUAL
@cindex globbing qualifiers, enable
@cindex enable globbing qualifiers
@item @code{BARE_GLOB_QUAL}
In a glob pattern, treat a trailing set of parentheses as a qualifier
list, if it contains no `@code{|}', `@code{(}' or (if special) `@code{~}'
characters.  See @ref{Filename Generation}.

@pindex BEEP
@cindex beep, enabling
@cindex enabling the beep
@item @code{BEEP} (@code{+B})
Beep on error in ZLE.

@pindex BG_NICE
@cindex jobs, background priority
@cindex background jobs, priority of
@cindex priority of background jobs
@item @code{BG_NICE} (@code{-6})
Run all background jobs at a lower priority.  This option
is set by default.

@pindex BRACE_CCL
@cindex brace expansion, extending
@cindex expansion, brace, extending
@item @code{BRACE_CCL}
Expand expressions in braces which would not otherwise undergo brace
expansion to a lexically ordered list of all the characters.  See
@ref{Brace Expansion}.

@pindex BSD_ECHO
@cindex echo, BSD compatible
@item @code{BSD_ECHO}
Make the @code{echo} builtin compatible with the BSD man page echo(1) command.
This disables backslashed escape sequences in echo strings unless the
@code{-e} option is specified.

@pindex CDABLE_VARS
@cindex cd, to parameter
@item @code{CDABLE_VARS} (@code{-T})
If the argument to a @code{cd} command (or an implied @code{cd} with the
@code{AUTO_CD} option set) is not a directory, and does not begin with a
slash, try to expand the expression as if it were preceded by a `@code{~}' (see
@ref{Filename Expansion}).

@pindex CHASE_LINKS
@cindex links, symbolic
@cindex symbolic links
@item @code{CHASE_LINKS} (@code{-w})
Resolve symbolic links to their true values when changing directory.

@pindex CLOBBER
@cindex clobbering, of files
@cindex file clobbering, allowing
@item @code{CLOBBER} (@code{+C}, ksh: @code{+C})
Allows `@code{>}' redirection to truncate existing files,
and `@code{>>}' to create files.
Otherwise `@code{>!}' or `@code{>|}' must be used to truncate a file,
and `@code{>>!}' or `@code{>>|}' to create a file.

@pindex COMPLETE_ALIASES
@cindex aliases, completion of
@item @code{COMPLETE_ALIASES}
Prevents aliases on the command line from being internally substituted
before completion is attempted.  The effect is to make the alias a
distinct command for completion purposes.

@pindex COMPLETE_IN_WORD
@item @code{COMPLETE_IN_WORD}
If unset, the cursor is set to the end of the word if completion is
started. Otherwise it stays there and completion is done from both ends.

@pindex CORRECT
@cindex correction, spelling
@cindex spelling correction
@item @code{CORRECT} (@code{-0})
Try to correct the spelling of commands.

@pindex CORRECT_ALL
@item @code{CORRECT_ALL} (@code{-O})
Try to correct the spelling of all arguments in a line.

@pindex CSH_JUNKIE_HISTORY
@cindex csh, history style
@cindex history style, csh
@item @code{CSH_JUNKIE_HISTORY}
A history reference without an event specifier will always refer to the
previous command.  Without this option, such a history reference refers
to the same event as the previous history reference, defaulting to the
previous command.

@pindex CSH_JUNKIE_LOOPS
@cindex csh, loop style
@cindex loop style, csh
@item @code{CSH_JUNKIE_LOOPS}
Allow loop bodies to take the form `@var{list}; @code{end}' instead of
`@code{do} @var{list}; @code{done}'.

@pindex CSH_JUNKIE_QUOTES
@cindex csh, quoting style
@cindex quoting style, csh
@item @code{CSH_JUNKIE_QUOTES}
Changes the rules for single- and double-quoted text to match that of
@cite{csh}.  These require that embedded newlines be preceded by a backslash;
unescaped newlines will cause an error message.
In double-quoted strings, it is made impossible to escape `@code{$}', `@code{`}'
or `@code{"}' (and `@code{\}' itself no longer needs escaping).
Command substitutions are only expanded once, and cannot be nested.

@pindex CSH_NULL_GLOB
@cindex csh, null globbing style
@cindex null globbing style, csh
@cindex globbing, null, style, csh
@item @code{CSH_NULL_GLOB}
If a pattern for filename generation has no matches,
delete the pattern from the argument list;
do not report an error unless all the patterns
in a command have no matches.
Overrides @code{NULL_GLOB}.

@pindex EQUALS
@cindex filename substitution, =
@item @code{EQUALS}
Perform @code{=} filename substitution.
(See @ref{Filename Expansion}.)

@pindex ERR_EXIT
@cindex exit status, trapping
@item @code{ERR_EXIT} (@code{-e}, ksh: @code{-e})
If a command has a non-zero exit status, execute the @code{ZERR}
trap, if set, and exit.  This is disabled while running initialization
scripts.

@pindex EXEC
@cindex command execution, enabling
@item @code{EXEC} (@code{+n}, ksh: @code{+n})
Do execute commands.  Without this option, commands are
read and checked for syntax errors, but not executed.

@pindex EXTENDED_GLOB
@cindex globbing, extended
@item @code{EXTENDED_GLOB}
Treat the `@code{#}', `@code{~}' and `@code{^}' characters as part of patterns
for filename generation, etc.  (An initial unquoted `@code{~}'
always produces named directory expansion.)

@pindex EXTENDED_HISTORY
@cindex history, timestamping
@item @code{EXTENDED_HISTORY}
Save beginning and ending timestamps to the history file.
The format of these timestamps is
`@code{:}@var{<beginning time>}@code{:}@var{<ending time>}@code{:}@var{<command>}'.

@pindex FLOW_CONTROL
@cindex flow control
@item @code{FLOW_CONTROL}
If this option is unset,
output flow control via start/stop characters (usually assigned to
^S/^Q) is disabled in the shell's editor.

@pindex FUNCTION_ARGZERO
@cindex $0, setting
@item @code{FUNCTION_ARGZERO}
When executing a shell function or sourcing a script, set @code{$0}
temporarily to the name of the function/script.

@pindex GLOB
@cindex globbing, enabling
@cindex enabling globbing
@item @code{GLOB} (@code{+F}, ksh: @code{+f})
Perform filename generation (globbing).
(See @ref{Filename Generation}.)

@pindex GLOB_ASSIGN
@item @code{GLOB_ASSIGN}
If this option is set, filename generation (globbing) is
performed on the right hand side of scalar parameter assignments of
the form `@var{name}@code{=}@var{pattern} (e.g. `@code{foo=*}').
If the result has more than one word the parameter will become an array
with those words as arguments. This option is provided for backwards
compatibility only: globbing is always performed on the right hand side
of array assignments of the form `@var{name}@code{=(}@var{value}@code{)}'
(e.g. `@code{foo=(*)}') and this form is recommended for clarity;
with this option set, it is not possible to predict whether the result
will be an array or a scalar.

@pindex GLOB_COMPLETE
@item @code{GLOB_COMPLETE}
When the current word has a glob pattern, do not insert all the words
resulting from the expansion but cycle through them like
@code{MENU_COMPLETE}. If no matches are found, a `@code{*}' is added to the end of the
word or inserted at the cursor if @code{COMPLETE_IN_WORD} is set, and expansion
is attempted again.  Using patterns works not only for files but for all
completions, such as options, user names, etc.

@pindex GLOB_DOTS
@cindex globbing, of . files
@item @code{GLOB_DOTS} (@code{-4})
Do not require a leading `@code{.}' in a filename to be matched explicitly.

@pindex GLOB_SUBST
@item @code{GLOB_SUBST}
Treat any characters resulting from parameter substitution as being
eligible for file expansion and filename generation, and any
characters resulting from command substitution as being eligible for
filename generation.

@pindex HASH_CMDS
@cindex hashing, of commands
@cindex command hashing
@item @code{HASH_CMDS}
Note the location of each command the first time it is executed.
Subsequent invocations of the same command will use the
saved location, avoiding a path search.
If this option is unset, no path hashing will be done at all.

@pindex HASH_DIRS
@cindex hashing, of directories
@cindex directories, hashing
@item @code{HASH_DIRS}
Whenever a command is executed, hash the directory containing it,
as well as all directories that occur earlier in the path.
Has no effect if @code{HASH_CMDS} is unset.

@pindex HASH_LIST_ALL
@item @code{HASH_LIST_ALL}
Whenever a command completion is attempted, make sure the entire
command path is hashed first.  This makes the first completion slower.

@pindex HIST_ALLOW_CLOBBER
@item @code{HIST_ALLOW_CLOBBER}
Add `@code{|}' to output redirections in the history.  This allows history
references to clobber files even when @code{CLOBBER} is unset.

@pindex HIST_BEEP
@cindex history beeping
@cindex beep, history
@item @code{HIST_BEEP}
Beep when an attempt is made to access a history entry which
isn't there.

@pindex HIST_IGNORE_DUPS
@cindex history, ignoring duplicates
@item @code{HIST_IGNORE_DUPS} (@code{-h})
Do not enter command lines into the history list
if they are duplicates of the previous event.

@pindex HIST_IGNORE_SPACE
@cindex history, ignoring spaces
@item @code{HIST_IGNORE_SPACE} (@code{-g})
Do not enter command lines into the history list
if any command on the line begins with a blank.

@pindex HIST_NO_FUNCTIONS
@item @code{HIST_NO_FUNCTIONS}
Do not store function definitions in the history list.

@pindex HIST_NO_STORE
@item @code{HIST_NO_STORE}
Remove the @code{history} (@code{fc -l}) command from
the history when invoked.

@pindex HIST_REDUCE_BLANKS
@item @code{HIST_REDUCE_BLANKS}
Remove superfluous blanks from each command line
being added to the history list.

@pindex HIST_VERIFY
@cindex history, verifying substitution
@item @code{HIST_VERIFY}
Whenever the user enters a line with history substitution,
don't execute the line directly; instead, perform
history substitution and reload the line into the editing buffer.

@pindex HUP
@cindex jobs, HUP
@item @code{HUP}
Send the @code{HUP} signal to running jobs when the
shell exits.

@pindex IGNORE_BRACES
@cindex disabling brace expansion
@cindex brace expansion, disabling
@cindex expansion, brace, disabling
@item @code{IGNORE_BRACES} (@code{-I})
Do not perform brace expansion.

@pindex IGNORE_EOF
@cindex EOF, ignoring
@item @code{IGNORE_EOF} (@code{-7})
Do not exit on end-of-file.  Require the use
of @code{exit} or @code{logout} instead.
However, ten consecutive EOFs will cause the shell to exit anyway,
to avoid the shell hanging if its tty goes away.

@pindex INTERACTIVE
@item @code{INTERACTIVE} (@code{-i}, ksh: @code{-i})
This is an interactive shell.  This option is set upon initialisation if
the standard input is a tty and commands are being read from standard input.
(See the discussion of @code{SHIN_STDIN}.)
This heuristic may be overridden by specifying a state for this option
on the command line.
The value of this option cannot be changed anywhere other than the command line.

@pindex INTERACTIVE_COMMENTS
@cindex comments, in interactive shells
@item @code{INTERACTIVE_COMMENTS} (@code{-k})
Allow comments even in interactive shells.

@pindex KSH_ARRAYS
@cindex arrays, ksh style
@cindex array style, ksh
@cindex ksh, array style
@item @code{KSH_ARRAYS}
Emulate @cite{ksh} array handling as closely as possible.  If this option
is set, array elements are numbered from zero, an array parameter
without subscript refers to the first element instead of the whole array,
and braces are required to delimit a subscript (`@code{$@{path[2]@}}' rather
than just `@code{$path[2]}').

@pindex KSH_AUTOLOAD
@item @code{KSH_AUTOLOAD}
Emulate @cite{ksh} function autoloading.  This means that when a function is
autoloaded, the corresponding file is merely executed, and must define
the function itself.  (By default, the function is defined to the contents
of the file.  However, the most common @cite{ksh}-style case - of the file
containing only a simple definition of the function - is always handled
in the @cite{ksh}-compatible manner.)

@pindex KSH_GLOB
@item @code{KSH_GLOB}
In pattern matching, the interpretation of parentheses is affected by
a preceding `@code{@@}', `@code{*}', `@code{+}', `@code{?}' or `@code{!}'.
See @ref{Filename Generation}.

@pindex KSH_OPTION_PRINT
@cindex option printing, ksh style
@cindex option printing style, ksh
@cindex ksh, option printing style
@item @code{KSH_OPTION_PRINT}
Alters the way options settings are printed.

@pindex LIST_AMBIGUOUS
@cindex ambiguous completion
@cindex completion, ambiguous
@item @code{LIST_AMBIGUOUS}
If this option is set, completions are shown only if the completions
don't have a unambiguous prefix or suffix that could be inserted in
the command line.

@pindex LIST_BEEP
@cindex beep, ambiguous completion
@cindex completion, beep on ambiguous
@item @code{LIST_BEEP}
Beep on an ambiguous completion.

@pindex LIST_TYPES
@cindex marking file types
@cindex files, marking type of
@item @code{LIST_TYPES} (@code{-X})
When listing files that are possible completions, show the
type of each file with a trailing identifying mark.

@pindex LOCAL_OPTIONS
@item @code{LOCAL_OPTIONS}
If this option is set at the point of return from a shell function,
all the options (including this one) which were in force upon entry to
the function are restored.  Otherwise, only this option and the
@code{XTRACE} and @code{PRINT_EXIT_VALUE} options are restored.  Hence
if this is explicitly unset by a shell function the other options in
force at the point of return will remain so.
A shell function can also guarantee itself a known shell configuration
with a formulation like `@code{emulate zsh; setopt localoptions}'.

@pindex LOGIN
@item @code{LOGIN} (@code{-l}, ksh: @code{-l})
This is a login shell.
If this option is not explicitly set, the shell is a login shell if
the first character of the @code{argv[0]} passed to the shell is a `@code{-}'.

@pindex LONG_LIST_JOBS
@cindex jobs, list format
@item @code{LONG_LIST_JOBS} (@code{-R})
List jobs in the long format by default.

@pindex MAGIC_EQUAL_SUBST
@item @code{MAGIC_EQUAL_SUBST}
All unquoted arguments of the form `@var{identifier}@code{=}@var{expression}'
appearing after the command name have filename expansion (that is,
where @var{expression} has a leading `@code{~}' or `@code{=}') performed on
@var{expression} as if it were a parameter assignment.  The argument is
not otherwise treated specially; it is passed to the command as a single
argument, and not used as an actual parameter assignment.

@pindex MAIL_WARNING
@cindex mail, warning of reading
@item @code{MAIL_WARNING} (@code{-U})
Print a warning message if a mail file has been
accessed since the shell last checked.

@pindex MARK_DIRS
@cindex directories, marking
@cindex marking directories
@item @code{MARK_DIRS} (@code{-8}, ksh: @code{-X})
Append a trailing `@code{/}' to all directory
names resulting from filename generation (globbing).

@pindex MENU_COMPLETE
@cindex completion, menu
@item @code{MENU_COMPLETE} (@code{-Y})
On an ambiguous completion, instead of listing possibilities or beeping,
insert the first match immediately.  Then when completion is requested
again, remove the first match and insert the second match, etc.
When there are no more matches, go back to the first one again.
@code{reverse-menu-complete} may be used to loop through the list
in the other direction. This option overrides @code{AUTO_MENU}.

@pindex MONITOR
@cindex job control, allowing
@item @code{MONITOR} (@code{-m}, ksh: @code{-m})
Allow job control.  Set by default in interactive shells.

@pindex MULTIOS
@item @code{MULTIOS}
Perform implicit @cite{tee}s or @cite{cat}s when multiple
redirections are attempted (see @ref{Redirection}).

@pindex NOMATCH
@cindex globbing, no matches
@item @code{NOMATCH} (@code{+3})
If a pattern for filename generation has no matches,
print an error, instead of
leaving it unchanged in the argument list.
This also applies to file expansion
of an initial `@code{~}' or `@code{=}'.

@pindex NOTIFY
@cindex background jobs, notification
@cindex notification of background jobs
@item @code{NOTIFY} (@code{-5}, ksh: @code{-b})
Report the status of background jobs immediately, rather than
waiting until just before printing a prompt.

@pindex NULL_GLOB
@cindex globbing, no matches
@item @code{NULL_GLOB} (@code{-G})
If a pattern for filename generation has no matches,
delete the pattern from the argument list instead
of reporting an error.  Overrides @code{NOMATCH}.

@pindex NUMERIC_GLOB_SORT
@cindex globbing, sorting numerically
@item @code{NUMERIC_GLOB_SORT}
If numeric filenames are matched by a filename generation pattern,
sort the filenames numerically rather than lexicographically.

@pindex OVERSTRIKE
@cindex editor, overstrike mode
@cindex overstrike mode, of editor
@item @code{OVERSTRIKE}
Start up the line editor in overstrike mode.

@pindex PATH_DIRS
@cindex path search, extended
@item @code{PATH_DIRS} (@code{-Q})
Perform a path search even on command names with slashes in them.
Thus if `@code{/usr/local/bin}' is in the user's path, and he types
`@code{X11/xinit}', the command `@code{/usr/local/bin/X11/xinit}' will be executed
(assuming it exists).
Commands explicitly beginning with `@code{/}', `@code{./}' or `@code{../}'
are not subject to the path search.
This also applies to the @code{.} builtin,
and searches for modules performed by the @code{zmodload} builtin.

@pindex POSIX_BUILTINS
@item @code{POSIX_BUILTINS}
When this option is set the @code{command} builtin can be used to execute
shell builtin commands.  Parameter assignments specified before shell
functions and special builtins are kept after the command completes unless
the special builtin is prefixed with the @code{command} builtin.  Special
builtins are
@code{.},
@code{:},
@code{break},
@code{continue},
@code{declare},
@code{eval},
@code{exit},
@code{export},
@code{integer},
@code{local},
@code{readonly},
@code{return},
@code{set},
@code{shift},
@code{source},
@code{times},
@code{trap} and
@code{unset}.

@pindex PRINT_EIGHT_BIT
@cindex exit status, printing
@item @code{PRINT_EIGHT_BIT}
Print eight bit characters literally in completion lists, etc.
This option is not necessary if your system correctly returns the
printability of eight bit characters (see man page ctype(3)).

@pindex PRINT_EXIT_VALUE
@cindex exit status, printing
@item @code{PRINT_EXIT_VALUE} (@code{-1})
Print the exit value of programs with non-zero exit status.

@pindex PRIVILEGED
@cindex privileged mode
@cindex mode, privileged
@item @code{PRIVILEGED} (@code{-p}, ksh: @code{-p})
Turn on privileged mode. This is enabled automatically on startup if the
effective user (group) ID is not equal to the real user (group) ID.  Turning
this option off causes the effective user and group IDs to be set to the
real user and group IDs. This option disables sourcing user startup files.
If zsh is invoked as `@code{sh}' or `@code{ksh}' with this option set,
@code{/etc/suid_profile} is sourced (after @code{/etc/profile} on interactive
shells). Sourcing @code{~/.profile} is disabled and the contents of the
@code{ENV} variable is ignored. This option cannot be changed using the
@code{-m} option of @code{setopt} and @code{unsetopt}, and changing it inside a
function always changes it globally regardless of the @code{LOCAL_OPTIONS}
option.

@pindex PROMPT_BANG
@cindex prompt, ! expansion
@item @code{PROMPT_BANG}
If set, `@code{!}' is treated specially in prompt expansion.
See @ref{Prompt Expansion}.

@pindex PROMPT_CR
@cindex prompt, with CR
@item @code{PROMPT_CR} (@code{+V})
Print a carriage return just before printing
a prompt in the line editor.

@pindex PROMPT_PERCENT
@cindex prompt, % expansion
@item @code{PROMPT_PERCENT}
If set, `@code{%}' is treated specially in prompt expansion.
See @ref{Prompt Expansion}.

@pindex PROMPT_SUBST
@cindex prompt, parameter expansion
@item @code{PROMPT_SUBST}
If set, @emph{parameter expansion}, @emph{command substitution} and
@emph{arithmetic expansion} are performed in prompts.

@pindex PUSHD_IGNORE_DUPS
@cindex directory stack, ignoring duplicates
@item @code{PUSHD_IGNORE_DUPS}
Don't push multiple copies of the same directory onto the directory stack.

@pindex PUSHD_MINUS
@cindex directory stack, controlling syntax
@item @code{PUSHD_MINUS}
Exchanges the meanings of `@code{+}' and `@code{-}'
when used with a number to specify a directory in the stack.

@pindex PUSHD_SILENT
@cindex directory stack, silencing
@item @code{PUSHD_SILENT} (@code{-E})
Do not print the directory stack after @code{pushd} or @code{popd}.

@pindex PUSHD_TO_HOME
@cindex pushd, to home
@item @code{PUSHD_TO_HOME} (@code{-D})
Have @code{pushd} with no arguments act like `@code{pushd $HOME}'.

@pindex RC_EXPAND_PARAM
@cindex rc, parameter expansion style
@cindex parameter expansion style, rc
@item @code{RC_EXPAND_PARAM} (@code{-P})
Array expansions of the form
`@var{foo}@code{$@{}@var{xx}@code{@}}@var{bar}', where the parameter
@var{xx} is set to @code{(}@var{a b c}@code{)}, are substituted with
`@var{fooabar foobbar foocbar}' instead of the default
`@var{fooa b cbar}'.

@pindex RC_QUOTES
@cindex rc, quoting style
@cindex quoting style, rc
@item @code{RC_QUOTES}
Allow the character sequence `@code{@value{dsq}}' to signify a single quote
within singly quoted strings.

@pindex RCS
@cindex startup files, sourcing
@item @code{RCS} (@code{+f})
After @code{/etc/zshenv} is sourced on startup, source the
@code{.zshenv}, @code{/etc/zprofile}, @code{.zprofile},
@code{/etc/zshrc}, @code{.zshrc}, @code{/etc/zlogin}, @code{.zlogin}, and @code{.zlogout}
files, as described in @ref{Files}.
If this option is unset, only the @code{/etc/zshenv} file is sourced.

@pindex REC_EXACT
@cindex completion, exact matches
@item @code{REC_EXACT} (@code{-S})
In completion, recognize exact matches even
if they are ambiguous.

@pindex RESTRICTED
@cindex restricted shell
@item @code{RESTRICTED} (@code{-r})
Enables restricted mode.  This option cannot be changed using
@code{unsetopt}, and setting it inside a function always changes it
globally regardless of the @code{LOCAL_OPTIONS} option.  See
@ref{Restricted Shell}.

@pindex RM_STAR_SILENT
@cindex rm *, querying before
@cindex querying before rm *
@item @code{RM_STAR_SILENT} (@code{-H})
Do not query the user before executing `@code{rm *}' or `@code{rm path/*}'.

@pindex RM_STAR_WAIT
@cindex rm *, waiting before
@cindex waiting before rm *
@item @code{RM_STAR_WAIT}
If querying the user before executing `@code{rm *}' or `@code{rm path/*}',
first wait ten seconds and ignore anything typed in that time.
This avoids the problem of reflexively answering `yes' to the query
when one didn't really mean it.  The wait and query can always be
avoided by expanding the `@code{*}' in ZLE (with tab).

@pindex SH_FILE_EXPANSION
@cindex sh, expansion style
@cindex expansion style, sh
@item @code{SH_FILE_EXPANSION}
Perform filename expansion (e.g., ~ expansion) @emph{before}
parameter expansion, command substitution, arithmetic expansion
and brace expansion.
If this option is unset, it is performed @emph{after}
brace expansion, so things like `@code{~$USERNAME}' and
`@code{~@{pfalstad,rc@}}' will work.

@pindex SH_GLOB
@cindex sh, globbing style
@cindex globbing style, sh
@item @code{SH_GLOB}
Disables the special meaning of `@code{(}', `@code{|}', `@code{)}'
and '@code{<}' for globbing the result of parameter and command substitutions,
and in some other places where
the shell accepts patterns.  This option is set by default if zsh is
invoked as @code{sh} or @code{ksh}.

@pindex SHIN_STDIN
@item @code{SHIN_STDIN} (@code{-s}, ksh: @code{-s})
Commands are being read from the standard input.
Commands are read from standard input if no command is specified with
@code{-c} and no file of commands is specified.  If @code{SHIN_STDIN}
is set explicitly on the command line,
any argument that would otherwise have been
taken as a file to run will instead be treated as a normal positional
parameter.
Note that setting or unsetting this option on the command line does not
necessarily affect the state the option will have while the shell is
running - that is purely an indicator of whether on not commands are
@emph{actually} being read from standard input.
The value of this option cannot be changed anywhere other than the command line.

@pindex SH_OPTION_LETTERS
@cindex sh, single letter options style
@cindex ksh, single letter options style
@cindex single letter options, ksh style
@cindex options, single letter, ksh style
@item @code{SH_OPTION_LETTERS}
If this option is set the shell tries to interpret single letter options
(which are used with @code{set} and @code{setopt}) like @cite{ksh} does.
This also affects the value of the @code{-} special parameter.

@pindex SHORT_LOOPS
@item @code{SHORT_LOOPS}
Allow the short forms of @code{for}, @code{select},
@code{if}, and @code{function} constructs.

@pindex SH_WORD_SPLIT
@cindex field splitting, sh style
@cindex sh, field splitting style
@item @code{SH_WORD_SPLIT} (@code{-y})
Causes field splitting to be performed on unquoted parameter expansions.
Note that this option has nothing to do with word splitting.
(See @ref{Parameter Expansion}.)

@pindex SINGLE_COMMAND
@cindex single command
@pindex INTERACTIVE, use of
@item @code{SINGLE_COMMAND} (@code{-t}, ksh: @code{-t})
If the shell is reading from standard input, it exits after a single command
has been executed.  This also makes the shell non-interactive, unless the
@code{INTERACTIVE} option is explicitly set on the command line.
The value of this option cannot be changed anywhere other than the command line.

@pindex SINGLE_LINE_ZLE
@cindex editor, single line mode
@item @code{SINGLE_LINE_ZLE} (@code{-M})
Use single-line command line editing instead of multi-line.

@pindex SUN_KEYBOARD_HACK
@cindex sun keyboard, annoying
@cindex annoying keyboard, sun
@item @code{SUN_KEYBOARD_HACK} (@code{-L})
If a line ends with a backquote, and there are an odd number
of backquotes on the line, ignore the trailing backquote.
This is useful on some keyboards where the return key is
too small, and the backquote key lies annoyingly close to it.

@pindex UNSET
@cindex parameters, substituting unset
@cindex unset parameters, substituting
@item @code{UNSET} (@code{+u}, ksh: @code{+u})
Treat unset parameters as if they were empty when substituting.
Otherwise they are treated as an error.

@pindex VERBOSE
@cindex tracing, of input lines
@cindex input, tracing
@item @code{VERBOSE} (@code{-v}, ksh: @code{-v})
Print shell input lines as they are read.

@pindex XTRACE
@cindex tracing, of commands
@cindex commands, tracing
@item @code{XTRACE} (@code{-x}, ksh: @code{-x})
Print commands and their arguments as they are executed.

@pindex ZLE
@cindex editor, enabling
@cindex enabling the editor
@item @code{ZLE} (@code{-Z})
Use the zsh line editor.

@end table
@node Option Aliases, Single Letter Options, Description of Options, Options

@section Option Aliases
@noindent
@cindex options, aliases
Some options have alternative names.  These aliases are never used for
output, but can be used just like normal option names when specifying
options to the shell.

@noindent
@table @asis
@pindex BRACE_EXPAND
@item @code{BRACE_EXPAND}
@emph{NO_}@code{IGNORE_BRACES}
(ksh and bash compatibility)

@pindex DOT_GLOB
@item @code{DOT_GLOB}
@code{GLOB_DOTS}
(bash compatibility)

@pindex HASH_ALL
@item @code{HASH_ALL}
@code{HASH_CMDS}
(bash compatibility)

@pindex HIST_APPEND
@item @code{HIST_APPEND}
@code{APPEND_HISTORY}
(bash compatibility)

@pindex HIST_EXPAND
@item @code{HIST_EXPAND}
@code{BANG_HIST}
(bash compatibility)

@pindex LOG
@item @code{LOG}
@emph{NO_}@code{HIST_NO_FUNCTIONS}
(ksh compatibility)

@pindex MAIL_WARN
@item @code{MAIL_WARN}
@code{MAIL_WARNING}
(bash compatibility)

@pindex ONE_CMD
@item @code{ONE_CMD}
@code{SINGLE_COMMAND}
(bash compatibility)

@pindex PHYSICAL
@item @code{PHYSICAL}
@code{CHASE_LINKS}
(ksh and bash compatibility)

@pindex PROMPT_VARS
@item @code{PROMPT_VARS}
@code{PROMPT_SUBST}
(bash compatibility)

@pindex STDIN
@item @code{STDIN}
@code{SHIN_STDIN}
(ksh compatibility)

@pindex TRACK_ALL
@item @code{TRACK_ALL}
@code{HASH_CMDS}
(ksh compatibility)

@end table
@node Single Letter Options, , Option Aliases, Options

@section Single Letter Options
@noindent
@cindex options, single letter
@cindex single letter options

@subsection Default set
@noindent
@table @asis
@item @code{-0}
CORRECT
@item @code{-1}
PRINT_EXIT_VALUE
@item @code{-2}
@emph{NO_}BAD_PATTERN
@item @code{-3}
@emph{NO_}NOMATCH
@item @code{-4}
GLOB_DOTS
@item @code{-5}
NOTIFY
@item @code{-6}
BG_NICE
@item @code{-7}
IGNORE_EOF
@item @code{-8}
MARK_DIRS
@item @code{-9}
AUTO_LIST
@item @code{-B}
@emph{NO_}BEEP
@item @code{-C}
@emph{NO_}CLOBBER
@item @code{-D}
PUSHD_TO_HOME
@item @code{-E}
PUSHD_SILENT
@item @code{-F}
@emph{NO_}GLOB
@item @code{-G}
NULL_GLOB
@item @code{-H}
RM_STAR_SILENT
@item @code{-I}
IGNORE_BRACES
@item @code{-J}
AUTO_CD
@item @code{-K}
@emph{NO_}BANG_HIST
@item @code{-L}
SUN_KEYBOARD_HACK
@item @code{-M}
SINGLE_LINE_ZLE
@item @code{-N}
AUTO_PUSHD
@item @code{-O}
CORRECT_ALL
@item @code{-P}
RC_EXPAND_PARAM
@item @code{-Q}
PATH_DIRS
@item @code{-R}
LONG_LIST_JOBS
@item @code{-S}
REC_EXACT
@item @code{-T}
CDABLE_VARS
@item @code{-U}
MAIL_WARNING
@item @code{-V}
@emph{NO_}PROMPT_CR
@item @code{-W}
AUTO_RESUME
@item @code{-X}
LIST_TYPES
@item @code{-Y}
MENU_COMPLETE
@item @code{-Z}
ZLE
@item @code{-a}
ALL_EXPORT
@item @code{-e}
ERR_EXIT
@item @code{-f}
@emph{NO_}RCS
@item @code{-g}
HIST_IGNORE_SPACE
@item @code{-h}
HIST_IGNORE_DUPS
@item @code{-i}
INTERACTIVE
@item @code{-k}
INTERACTIVE_COMMENTS
@item @code{-l}
LOGIN
@item @code{-m}
MONITOR
@item @code{-n}
@emph{NO_}EXEC
@item @code{-p}
PRIVILEGED
@item @code{-r}
RESTRICTED
@item @code{-s}
SHIN_STDIN
@item @code{-t}
SINGLE_COMMAND
@item @code{-u}
@emph{NO_}UNSET
@item @code{-v}
VERBOSE
@item @code{-w}
CHASE_LINKS
@item @code{-x}
XTRACE
@item @code{-y}
SH_WORD_SPLIT
@end table

@subsection sh/ksh emulation set
@noindent
@table @asis
@item @code{-C}
@emph{NO_}CLOBBER
@item @code{-X}
MARK_DIRS
@item @code{-a}
ALL_EXPORT
@item @code{-b}
NOTIFY
@item @code{-e}
ERR_EXIT
@item @code{-f}
@emph{NO_}GLOB
@item @code{-i}
INTERACTIVE
@item @code{-l}
LOGIN
@item @code{-m}
MONITOR
@item @code{-n}
@emph{NO_}EXEC
@item @code{-p}
PRIVILEGED
@item @code{-r}
RESTRICTED
@item @code{-s}
SHIN_STDIN
@item @code{-t}
SINGLE_COMMAND
@item @code{-u}
@emph{NO_}UNSET
@item @code{-v}
VERBOSE
@item @code{-x}
XTRACE
@end table

@subsection Also note
@noindent
@table @asis
@item @code{-A}
Used by @code{set} for setting arrays
@item @code{-c}
Used on the command line to specify a single command
@item @code{-m}
Used by @code{setopt} for pattern-matching option setting
@item @code{-o}
Used in all places to allow use of long option names
@item @code{-s}
Used by @code{set} to sort positional parameters
@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/builtins.yo
@node Shell Builtin Commands, Zsh Line Editor, Options, Top

@chapter Shell Builtin Commands
@noindent
@cindex builtin commands
@cindex commands, builtin
@table @asis
@findex -
@item @code{-} @var{simple command}
See @ref{Precommand Modifiers}.

@findex .
@item @code{.} @var{file} [ @var{arg} ... ]
Read commands from @var{file} and execute them in the current shell
environment.
If @var{file} does not contain a slash, or if @code{PATH_DIRS}
is set, the shell looks in the components of @code{$path} to find the
directory containing @var{file}.
Files in the current directory are not read unless `@code{.}' appears
somewhere in @code{$path}.

@noindent
If any arguments @var{arg} are given,
they become the positional parameters; the old positional
parameters are restored when the @var{file} is done executing.
The exit status is the exit status of the last command executed.

@findex :
@cindex expanding parameters
@cindex parameters, expanding
@cindex doing nothing
@item @code{:} [ @var{arg} ... ]
This command only expands parameters.  A zero exit code is returned.

@findex alias
@cindex aliases, defining
@cindex aliases, listing
@item @code{alias} [ @code{-gmrL} ] [ @var{name}[@code{=}@var{value}] ... ]
For each @var{name} with a corresponding @var{value}, define an alias
with that value.  A trailing space in @var{value} causes the next word
to be checked for alias substitution.  If the @code{-g} flag is present,
define a global alias; global aliases are expanded even if they do not
occur in command position.

@noindent
For each @var{name} with no @var{value},
print the value of @var{name}, if any.  With no arguments, print all
currently defined aliases.  If the @code{-m} flag is given the arguments
are taken as patterns (they should be quoted to preserve them from being
interpreted as glob patterns), and the aliases matching these patterns
are printed.  When printing aliases and the @code{-g} or @code{-r} flags
are present, then restrict the printing to global or regular
aliases, respectively.

@noindent
If the @code{-L} flag is present, then print each
alias in a manner suitable for putting in a startup script.  The exit
status is nonzero if a @var{name} (with no @var{value}) is given for
which no alias has been defined.

@findex autoload
@cindex functions, autoloading
@cindex autoloading functions
@findex autoload
@item @code{autoload}
Same as @code{functions -u}.

@findex bg
@cindex jobs, backgrounding
@item @code{bg} [ @var{job} ... ]
@itemx @var{job} ... @code{&}
Put each specified @var{job} in the background,
or the current job if none is specified.

@findex break
@cindex exiting loops
@cindex loops, exiting
@item @code{break} [ @var{n} ]
Exit from an enclosing @code{for}, @code{while},
@code{until}, @code{select} or @code{repeat} loop.  If @var{n}
is specified, then break @var{n} levels instead of just one.

@findex builtin
@item @code{builtin} @var{name} [ @var{args} ... ]
Executes the builtin @var{name}, with the given @var{args}.

@findex bye
@item @code{bye}
Same as @code{exit}.

@findex cd
@cindex directories, changing
@item @code{cd} [ @code{-sLP} ] [ @var{arg} ]
@itemx @code{cd} [ @code{-sLP} ] @var{old} @var{new}
@itemx @code{cd} [ @code{-sLP} ] @{@code{+}|@code{-}@}@var{n}
Change the current directory.  In the first form, change the
current directory to @var{arg}, or to the value of @code{$HOME} if
@var{arg} is not specified.  If @var{arg} is `@code{-}', change to the
value of @code{$OLDPWD}, the previous directory.
If a directory named @var{arg} is not found in the current directory
and @var{arg} does not begin with a slash,
search each component of the shell parameter @code{cdpath}.
If the option @code{CDABLE_VARS} is set, and a parameter named @var{arg}
exists whose value begins with a slash, treat its value as
the directory.

@noindent
The second form of @code{cd} substitutes the string @var{new}
for the string @var{old} in the name of the current directory,
and tries to change to this new directory.

@noindent
The third form of @code{cd} extracts an entry from the directory
stack, and changes to that directory.  An argument of the form
`@code{+}@var{n}' identifies a stack entry by counting from the left
of the list shown by the @code{dirs} command, starting with zero.
An argument of the form `@code{-}@var{n}' counts from the right.
If the @code{PUSHD_MINUS} option is set, the meanings of `@code{+}'
and `@code{-}' in this context are swapped.

@noindent
If the @code{-s} option is specified, @code{cd} refuses to change the current
directory if the given pathname contains symlinks.  If the @code{-P} option
is given or the @code{CHASE_LINKS} option is set, symbolic links are resolved
to their true values.  If the @code{-L} option is given symbolic links are
followed regardless of the state of the @code{CHASE_LINKS} option.

@findex chdir
@item @code{chdir}
Same as @code{cd}.

@findex command
@item @code{command} @var{simple command}
See @ref{Precommand Modifiers}.

@findex continue
@cindex loops, continuing
@cindex continuing loops
@item @code{continue} [ @var{n} ]
Resume the next iteration of the enclosing
@code{for}, @code{while}, @code{until}, @code{select} or
@code{repeat} loop.  If @var{n} is specified, break out of
@var{n}-1 loops and resume at the @var{n}th enclosing loop.

@findex declare
@item @code{declare}
Same as @code{typeset}.

@findex dirs
@cindex directory stack, printing
@item @code{dirs} [ @code{-v} ] [ @var{arg} ... ]
With no arguments, print the contents of the directory stack.
If the @code{-v} option is given, number the directories
in the stack when printing.
Directories are added to this stack with the @code{pushd} command,
and removed with the @code{cd} or @code{popd} commands.
If arguments are specified, load them onto the directory stack,
replacing anything that was there, and push the current directory
onto the stack.

@findex disable
@cindex disabling commands
@cindex commands, disabling
@item @code{disable} [ @code{-afmr} ] @var{name} ...
Temporarily disable the @var{name}d hash table elements.  The default
is to disable builtin commands.  This allows you to use an external
command with the same name as a builtin command.  The @code{-a} option
causes @code{disable} to act on aliases.  The @code{-f} option causes
@code{disable} to act on shell functions.  The @code{-r} options causes
@code{disable} to act on reserved words.  Without arguments all disabled
hash table elements from the corresponding hash table are printed.
With the @code{-m} flag the arguments are taken as patterns (should be
quoted to preserve them from being taken as glob patterns), and all hash
table elements from the corresponding hash table matching these patterns
are disabled.  Disabled objects can be enabled with the @code{enable}
command.

@findex disown
@cindex jobs, disowning
@item @code{disown} [ @var{job} ... ]
@itemx @var{job} ... @code{&|}
@itemx @var{job} ... @code{&!}
Remove the specified @var{job}s from the job table; the shell will
no longer report their status, and will not complain if you
try to exit an interactive shell with them running or stopped.
If no @var{job} is specified, disown the current job.

@findex echo
@item @code{echo} [ @code{-neE} ] [ @var{arg} ... ]
Write each @var{arg} on the standard output, with a space separating
each one.
If the @code{-n} flag is not present, print a newline at the end.
@code{echo} recognizes the following escape sequences:

@noindent
@table @asis
@item @code{\a}
bell character
@item @code{\b}
backspace
@item @code{\c}
suppress final newline
@item @code{\e}
escape
@item @code{\f}
form feed
@item @code{\n}
linefeed (newline)
@item @code{\r}
carriage return
@item @code{\t}
horizontal tab
@item @code{\v}
vertical tab
@item @code{\\}
backslash
@item @code{\0}@var{NNN}
character code in octal
@item @code{\x}@var{NN}
character code in hexadecimal
@end table

@noindent
@pindex BSD_ECHO, use of
The @code{-E} flag, or the @code{BSD_ECHO} option, can be used to disable
these escape sequences.  In the latter case, @code{-e} flag can be used to
enable them.

@findex echotc
@cindex termcap string, printing
@item @code{echotc} @var{cap} [ @var{arg} ... ]
Output the termcap string corresponding to the capability
@var{cap}, with optional arguments.

@findex emulate
@cindex compatibility, sh
@cindex compatibility, ksh
@cindex compatibility, csh
@cindex sh, compatibility
@cindex ksh, compatibility
@cindex csh, compatibility
@item @code{emulate} [ @code{-R} ] @{@code{zsh}|@code{sh}|@code{ksh}|@code{csh}@}
Set up zsh options to emulate the specified shell as much as possible.
@cite{csh} will never be fully emulated.
If the argument is not one of the shells listed above, @code{zsh}
will be used as a default.  If the @code{-R} option is given, all options
are reset to their default value corresponding to the specified emulation
mode.

@findex enable
@cindex enabling commands
@cindex commands, enabling
@item @code{enable} [ @code{-afmr} ] @var{name} ...
Enable the @var{name}d hash table elements, presumably disabled
earlier with @code{disable}.  The default is to enable builtin commands.
The @code{-a} option causes @code{enable} to act on aliases.  The @code{-f}
option causes @code{enable} to act on shell functions.  The @code{-r}
option causes @code{enable} to act on reserved words.  Without arguments
all enabled hash table elements from the corresponding hash table are
printed.  With the @code{-m} flag the arguments are taken as patterns
(should be quoted) and all hash table elements from the corresponding
hash table matching these patterns are enabled.  Enabled objects can be
disabled with the @code{disable} builtin command.

@findex eval
@cindex evaluating arguments as commands
@item @code{eval} [ @var{arg} ... ]
Read the arguments as input to the shell and execute the resulting
command in the current shell process.

@findex exec
@item @code{exec} @var{simple command}
See @ref{Precommand Modifiers}.

@findex exit
@item @code{exit} [ @var{n} ]
Exit the shell with the exit code specified by @var{n}; if none
is specified, use the exit code from the last command executed.
@pindex IGNORE_EOF, use of
An EOF condition will also cause the shell to exit, unless
the @code{IGNORE_EOF} option is set.

@findex export
@item @code{export} [ @var{name}[@code{=}@var{value}] ... ]
The specified @var{name}s are marked for automatic export
to the environment of subsequently executed commands.
Equivalent to @code{typeset -x}, except that no parameter will be created
to hide an existing one in an outer scope.
If a parameter specified does not
already exist, it is created in the global scope.

@findex false
@cindex doing nothing, unsuccessfully
@item @code{false} [ @var{arg} ... ]
Do nothing and return an exit code of 1.

@findex fc
@cindex history, editing
@cindex editing history
@item @code{fc} [ @code{-e} @var{ename} ] [ @code{-nlrdDfEim} ] [ @var{old}@code{=}@var{new} ... ] [ @var{first} [ @var{last} ] ]
@itemx @code{fc} @code{-ARWI} [ @var{filename} ]
Select a range of commands from @var{first} to @var{last} from the
history list.
The arguments @var{first} and @var{last} may be specified as a
number or as a string.  A negative number is used as an offset
to the current history event number.
A string specifies the most recent event beginning with the given string.
All substitutions @var{old}@code{=}@var{new}, if any, are then performed
on the commands.

@noindent
If the @code{-l} flag is given, the resulting commands are listed on
standard output.
If the @code{-m} flag is also given the first argument is taken as a
pattern (should be quoted) and only the history events matching this
pattern will be shown.
Otherwise the editor program @var{ename} is invoked on a file containing
these history events.  If @var{ename} is not given, the value
of the parameter @code{FCEDIT} is used.  If @var{ename} is `@code{-}',
no editor is invoked.  When editing is complete, the edited
command is executed.

@noindent
If @var{first} is not specified, it will be set to -1 (the most recent
event), or to -16 if the @code{-l} flag is given.
If @var{last} is not specified, it will be set to @var{first},
or to -1 if the @code{-l} flag is given.

@noindent
The flag @code{-r} reverses the order of the commands and the
flag @code{-n} suppresses command numbers when listing.
Also when listing, @code{-d} prints timestamps for each command, and
@code{-f} prints full time-date stamps.  Adding the @code{-E} flag
causes the dates to be printed as `@var{dd}@code{.}@var{mm}@code{.}@var{yyyy}',
instead of the default `@var{mm}@code{/}@var{dd}@code{/}@var{yyyy}'.
Adding the @code{-i} flag causes the dates to be printed in ISO8601
`@var{yyyy}@code{-}@var{mm}@code{-}@var{dd}' format.
With the @code{-D} flag, @code{fc} prints elapsed times.

@noindent
@cindex history, file
@cindex file, history
@code{fc -R} reads the history from the given file,
@code{fc -W} writes the history out to the given file,
and @code{fc -A} appends the history out to the given file.
If the @code{-I} option is added, only those
events that are new since last incremental append (write) to
the history file are appended (written).
In any case the file will have no more than @code{$SAVEHIST}
entries.

@findex fg
@cindex jobs, foregrounding
@cindex jobs, resuming
@item @code{fg} [ @var{job} ... ]
@itemx @var{job} ...
Bring each specified @var{job} in turn to the foreground.
If no @var{job} is specified, resume the current job.

@findex functions
@item @code{functions} [ @{@code{+}|@code{-}@}@code{tum} ] [ @var{name} ... ]
Equivalent to @code{typeset -f}.

@findex getln
@cindex line, reading
@cindex reading a line
@item @code{getln} [ @code{-AclneE} ] @var{name} ...
Read the top value from the buffer stack and put it in
the shell parameter @code{name}.  Equivalent to
@code{read -zr}.

@findex getopts
@cindex options, processing
@item @code{getopts} @var{optstring} @var{name} [ @var{arg} ... ]
Checks the @var{arg}s for legal options.  If the @var{arg}s are omitted,
use the positional parameters.  A valid option argument
begins with a `@code{+}' or a `@code{-}'.  An argument not beginning with
a `@code{+}' or a `@code{-}', or the argument `@code{--}', ends the options.
@var{optstring} contains the letters that @code{getopts}
recognizes.  If a letter is followed by a `@code{:}', that option
is expected to have an argument.  The options can be
separated from the argument by blanks.

@noindent
Each time it is invoked, @code{getopts} places the option letter it finds
in the shell parameter @var{name}, prepended with a `@code{+}' when
@var{arg} begins with a `@code{+}'.  The index of the next @var{arg}
is stored in @code{OPTIND}.  The option argument, if any,
is stored in @code{OPTARG}.
@vindex OPTIND, use of
@vindex OPTARG, use of

@noindent
A leading `@code{:}' in @var{optstring} causes @code{getopts} to store the
letter of the invalid option in @code{OPTARG}, and to set @var{name}
to `@code{?}' for an unknown option and to `@code{:}' when a required option
is missing.  Otherwise, @code{getopts} prints an error
message.  The exit status is nonzero when there are no more options.

@findex hash
@item @code{hash} [ @code{-dfmrv} ] [ @var{name}[@code{=}@var{value}] ] ...
@code{hash} can be used to directly modify the contents of the command
hash table, and the named directory hash table.  Normally one would
modify these tables by modifying one's @code{PATH}
(for the command hash table) or by creating appropriate shell parameters
(for the named directory hash table).
The choice of hash table to work on is determined by the @code{-d} option;
without the option the command hash table is used, and with the option the
named directory hash table is used.

@noindent
Given no arguments, and neither the @code{-r} or @code{-f} options,
the selected hash table will be listed in full.

@noindent
The @code{-r} option causes the selected hash table to be emptied.
It will be subsequently rebuilt in the normal fashion.
The @code{-f} option causes the selected hash table to be fully
rebuilt immediately.  For the command hash table this hashes
all the absolute directories in the @code{PATH},
and for the named directory hash table this adds all users' home directories.
These two options cannot be used with any arguments.

@noindent
The @code{-m} option causes the arguments to be taken as patterns
(they should be quoted) and the elements of the hash table
matching those patterns are printed.  This is the only way to display
a limited selection of hash table elements.

@noindent
For each @var{name} with a corresponding @var{value}, put `@var{name}' in
the selected hash table, associating it with the pathname `@var{value}'.
In the command hash table, this means that
whenever `@var{name}' is used as a command argument, the shell will try
to execute the file given by `@var{value}'.
In the named directory hash table, this means
that `@var{value}' may be referred to as `@code{~}@var{name}'.

@noindent
For each @var{name} with no
corresponding @var{value}, attempt to add @var{name} to the hash table,
checking what the appropriate @code{value} is in the normal manner for
that hash table.  If an appropriate @code{value} can't be found, then
the hash table will be unchanged.

@noindent
The @code{-v} option causes hash table entries to be listed as they are
added by explicit specification.  If has no effect if used with @code{-f}.

@findex history
@item @code{history}
Same as @code{fc -l}.

@findex integer
@item @code{integer} [ @{@code{+}|@code{-}@}@code{lrtux} ] [ @var{name}[@code{=}@var{value}] ... ]
Equivalent to @code{typeset -i}, except that options irrelevant to
integers are not permitted.

@findex jobs
@item @code{jobs} [ @code{-dlprs} ] [ @var{job} ... ]
@itemx @code{jobs -Z} @var{string}
Lists information about each given job, or all jobs
if @var{job} is omitted.  The @code{-l} flag lists process
IDs, and the @code{-p} flag lists process groups.
If the @code{-r} flag is specified only running jobs will be listed
and if the @code{-s} flag is given only stopped jobs are shown.
If the @code{-d} flag is given, the directory from which the job was
started (which may not be the current directory of the job) will also
be shown.

@noindent
The @code{-Z} option replaces the shell's argument and environment space with
the given string, truncated if necessary to fit.  This will normally be
visible in @code{ps} (man page ps(1)) listings.  This feature is typically
used by daemons, to indicate their state.

@findex kill
@cindex killing jobs
@cindex jobs, killing
@item @code{kill} [ @code{-s} @var{signal_name} ] @var{job} ...
@itemx @code{kill} [ @code{-}@var{sig} ] @var{job} ...
@itemx @code{kill} @code{-l} [ @var{sig} ... ]
Sends either @code{SIGTERM} or the specified signal to the given
jobs or processes.
Signals are given by number or by names, without the `@code{SIG}' prefix.
If the signal being sent is not `@code{KILL}' or `@code{CONT}', then the job
will be sent a `@code{CONT}' signal if it is stopped.
The argument @var{job} can be the process ID of a job
not in the job list.
In the third form, @code{kill -l}, if @var{sig} is not
specified the signal names are listed.  Otherwise, for each
@var{sig} that is a name, the corresponding signal number is
listed.  For each @var{sig} that is a signal number or a number
representing the exit status of a process which was terminated or
stopped by a signal the name of the signal is printed.

@findex let
@item @code{let} @var{arg} ...
Evaluate each @var{arg} as an arithmetic expression.
See @ref{Arithmetic Evaluation} for a description
of arithmetic expressions.  The exit status is 0 if the
value of the last expression is nonzero, and 1 otherwise.

@findex limit
@cindex resource limits
@cindex limits, resource
@item @code{limit} [ @code{-hs} ] [ @var{resource} [ @var{limit} ] ] ...
Set or display resource limits.  Unless the @code{-s} flag is given,
the limit applies only the children of the shell.  If @code{-s} is
given without other arguments, the resource limits of the current
shell is set to the previously set resource limits of the children.

@noindent
If @var{limit} is not specified, print the current limit placed
on @var{resource}, otherwise
set the limit to the specified value.  If the @code{-h} flag
is given, use hard limits instead of soft limits.
If no @var{resource} is given, print all limits.

@noindent
@var{resource} can be one of:

@noindent
@table @asis
@item @code{memorylocked}
Maximum amount of memory locked in RAM.
@item @code{resident}
Maximum resident set size.
@item @code{vmemorysize}
Maximum amount of virtual memory.
@item @code{descriptors}
Maximum value for a file descriptor.
@item @code{coredumpsize}
Maximum size of a core dump.
@item @code{stacksize}
Maximum stack size for each process.
@item @code{datasize}
Maximum data size (including stack) for each process.
@item @code{filesize}
Largest single file allowed.
@item @code{cputime}
Maximum CPU seconds per process.
@item @code{maxproc}
Maximum number of processes.
@item @code{addressspace}
Maximum amount of address space used.
@item @code{cachedthreads}
Maximum number of cached threads.
@end table

@noindent
Which of these resource limits are available depends on the system.
@var{resource} can be abbreviated to any unambiguous prefix.

@noindent
@var{limit} is a number, with an optional scaling factor, as follows:

@noindent
@table @asis
@item @var{n}@code{h}
hours
@item @var{n}@code{k}
kilobytes (default)
@item @var{n}@code{m}
megabytes or minutes
@item [@var{mm}@code{:}]@var{ss}
minutes and seconds
@end table

@findex local
@item @code{local} [ @{@code{+}|@code{-}@}@code{LRZilrtu} [@var{n}]] [ @var{name}[@code{=}@var{value}] ] ...
Same as @code{typeset}, except that the options @code{-x} and
@code{-f} are not permitted.

@findex log
@vindex watch, use of
@cindex watching users
@cindex users, watching
@item @code{log}
List all users currently logged in who are affected by
the current setting of the @code{watch} parameter.

@findex logout
@item @code{logout} [ @var{n} ]
Same as @code{exit}, except that it only works in a login shell.

@findex noglob
@item @code{noglob} @var{simple command}
See @ref{Precommand Modifiers}.

@findex popd
@item @code{popd} [ @{@code{+}|@code{-}@}@var{n} ]
Removes a entry from the directory stack, and perform a @code{cd} to
the new top directory. With no argument, the current top entry is
removed.  An argument of the form `@code{+}@var{n}' identifies a stack
entry by counting from the left of the list shown by the @code{dirs} command,
starting with zero.  An argument of the form @code{-n} counts from the right.
@pindex PUSHD_MINUS, use of
If the @code{PUSHD_MINUS} option is set, the meanings of `@code{+}' and
`@code{-}' in this context are swapped.

@findex print
@item @code{print} [ @code{-nrslzpNDPoOicm} ] [ @code{-u}@var{n} ] [ @code{-R} [ @code{-en} ]] [ @var{arg} ... ]
With no flags or with flag `@code{-}', the arguments are printed on
the standard output as described by @code{echo}, with the following differences:
the escape sequence `@code{\M-}@var{x}' metafies the character
@var{x} (sets the highest bit),
`@code{\C-}@var{x}' produces a control character (`@code{\C-@@}' and `@code{\C-?}' give the
characters NUL and delete), and `@code{\E}' is a synonym for `@code{\e}'.
Finally, if not in an escape
sequence, `@code{\}' escapes the following character and is not printed.

@noindent
@table @asis
@item @code{-r}
Ignore the escape conventions of @code{echo}.

@item @code{-R}
Emulate the BSD @code{echo} command, which does not process escape sequences
unless the @code{-e} flag is given.  The @code{-n} flag suppresses the trailing
newline.  Only the @code{-e} and @code{-n} flags are recognized after
@code{-R}; all other arguments and options are printed.

@item @code{-m}
Take the first argument as a pattern (should be quoted), and remove
it from the argument list together with subsequent arguments that
do not match this pattern.

@item @code{-s}
Place the results in the history list instead of on the standard output.

@item @code{-n}
Do not add a newline to the output.

@item @code{-l}
Print the arguments separated by newlines instead of spaces.

@item @code{-N}
Print the arguments separated and terminated by nulls.

@item @code{-o}
Print the arguments sorted in ascending order.

@item @code{-O}
Print the arguments sorted in descending order.

@item @code{-i}
If given together with @code{-o} or @code{-O}, makes them work case
independently.

@item @code{-c}
Print the arguments in columns.

@item @code{-u}@var{n}
Print the arguments to file descriptor @var{n}.

@item @code{-p}
Print the arguments to the input of the coprocess.

@item @code{-z}
Push the arguments onto the editing buffer stack, separated by spaces;
no escape sequences are recognized.

@item @code{-D}
Treat the arguments as directory names, replacing prefixes with @code{~}
expressions, as appropriate.

@item @code{-P}
Perform prompt expansion (see @ref{Prompt Expansion}).

@end table

@findex pushd
@pindex PUSHD_TO_HOME, use of
@pindex PUSHD_MINUS, use of
@pindex CDABLE_VARS, use of
@pindex PUSHD_SILENT, use of
@item @code{pushd} [ @var{arg} ]
@itemx @code{pushd} @var{old} @var{new}
@itemx @code{pushd} @{@code{+}|@code{-}@}@var{n}
Change the current directory, and push the old current directory
onto the directory stack.  In the first form, change the
current directory to @var{arg}.
If @var{arg} is not specified, change to the second directory
on the stack (that is, exchange the top two entries), or
change to @code{$HOME} if the @code{PUSHD_TO_HOME}
option is set or if there is only one entry on the stack.

@noindent
If @var{arg} is `@code{-}', change to @code{$OLDPWD}, the previous directory.
If a directory named @var{arg} is not found in the current directory
and @var{arg} does not contain a slash,
search each component of the shell parameter @code{cdpath}.
If the option @code{CDABLE_VARS} is set, and a parameter named @var{arg}
exists whose value begins with a slash, treat its value as
the directory.

@noindent
If the option @code{PUSHD_SILENT} is not set, the directory
stack will be printed after a @code{pushd} is performed.

@noindent
The second form of @code{pushd} substitutes the string @var{new}
for the string @var{old} in the name of the current directory,
and tries to change to this new directory.

@noindent
The third form of @code{pushd} changes directory by rotating the
directory list.  An argument of the form `@code{+}@var{n}' identifies a stack
entry by counting from the left of the list shown by the @code{dirs}
command, starting with zero.  An argument of the form `@code{-}@var{n}' counts
from the right.  If the @code{PUSHD_MINUS} option is set, the meanings
of `@code{+}' and `@code{-}' in this context are swapped.

@findex pushln
@item @code{pushln} [ @var{arg} ... ]
Equivalent to @code{print -nz}.

@findex pwd
@pindex CHASE_LINKS, use of
@item @code{pwd} [ @code{-rLP} ]
Print the absolute pathname of the current working directory.
If the @code{-r} or the @code{-P} flag is specified, or the @code{CHASE_LINKS}
option is set and the @code{-L} flag is not given, the printed path will not
contain symbolic links.

@findex r
@item @code{r}
Same as @code{fc -e -}.

@findex read
@vindex IFS, use of
@item @code{read} [ @code{-rzpqAclneE} ] [ @code{-k} [ @var{num} ] ] [ @code{-u}@var{n} ] [ @var{name}[@code{?}@var{prompt}] ] [ @var{name} ...  ]
Read one line and break it into fields using the characters
in @code{$IFS} as separators, except as noted below.
The first field is assigned to the first @var{name}, the second field
to the second @var{name}, etc., with leftover
fields assigned to the last @var{name}.

@noindent
@table @asis
@item @code{-r}
Raw mode: a `@code{\}' at the end of a line does not signify line
continuation.

@item @code{-q}
Read only one character from the terminal and set @var{name} to
`@code{y}' if this character was `@code{y}' or `@code{Y}' and to `@code{n}' otherwise.
With this flag set the return value is zero only if the character was
`@code{y}' or `@code{Y}'.  Note that this always reads from the terminal, even
if used with the @code{-p} or @code{-u} or @code{-z} flags or with redirected input.

@item @code{-k} [ @var{num} ]
Read only one (or @var{num}) characters.  All are assigned to the first
@var{name}, without word splitting.  This flag is ignored when @code{-q} is
present.  Input is read from the terminal unless one of @code{-u} or @code{-p}
is present.

@item @code{-z}
Read one entry from the editor buffer stack and assign it to the first
@var{name}, without word splitting.  Text is pushed onto the stack with
`@code{print -z}' or with @code{push-line} from the line editor (see
@ref{Zsh Line Editor}).  This flag is ignored when the @code{-k} or @code{-q} flags are present.

@item @code{-e}
@itemx @code{-E}
The input read is printed (echoed) to the standard output.  If the @code{-e}
flag is used, no input is assigned to the parameters.

@item @code{-A}
The first @var{name} is taken as the name of an array and all words are
assigned to it.

@item @code{-c}
@itemx @code{-l}
These flags are allowed only if called inside a
function used for completion (specified with the @code{-K} flag to
@code{compctl}).  If the @code{-c} flag is given, the words of the
current command are read. If the @code{-l} flag is given, the whole
line is assigned as a scalar.  If both flags are present, @code{-l}
is used and @code{-c} is ignored.  If @var{name} is omitted then
@code{REPLY} is used for scalars and @code{reply} for arrays.

@item @code{-n}
Together with @code{-c}, the number of the word the cursor is on is
read.  With @code{-l}, the index of the character the cursor is on is
read.  Note that the command name is word number 1, not word 0,
and that when the cursor is at the end of the line, its character
index is the length of the line plus one.

@item @code{-u}@var{n}
Input is read from file descriptor @var{n}.

@item @code{-p}
Input is read from the coprocess.

@end table

@noindent
If the first argument contains a `@code{?}', the remainder of this
word is used as a @var{prompt} on standard error when the shell
is interactive.

@noindent
The value (exit status) of @code{read} is 1 when an end-of-file is
encountered, or when @code{-c} or @code{-l} is present and the command is
not called from a @code{compctl} function.  Otherwise the value is 0.

@noindent
The behavior of some combinations of the @code{-k}, @code{-p}, @code{-q}, @code{-u}
and @code{-z} flags is undefined.  Presently @code{-q} cancels all the others,
@code{-p} cancels @code{-u}, @code{-k} cancels @code{-z}, and otherwise @code{-z}
cancels both @code{-p} and @code{-u}.

@noindent
The @code{-c} or @code{-l} flags cancel any and all of @code{-kpquz}.

@cindex parameters, marking readonly
@findex readonly
@item @code{readonly}
Same as @code{typeset -r}.

@findex rehash
@item @code{rehash}
Same as @code{hash -r}.

@findex return
@cindex functions, returning from
@item @code{return} [ @var{n} ]
Causes a shell function or @code{.} script to return to
the invoking script with the return status specified by @var{n}.  If @var{n}
is omitted, the return status is that of the last command
executed.

@noindent
If @code{return} was executed from a trap in a @code{TRAP}@var{NAL} function,
the effect is different for zero and non-zero return status.  With zero
status (or after an implicit return at the end of the trap), the shell
will return to whatever it was previously processing; with a non-zero
status, the shell will behave as interrupted except that the return
status of the trap is retained.  Note that the signal which caused the
trap is passed as the first argument, so the statement `@code{return
$((128+$1))}' will return the same status as if the signal had not
been trapped.

@findex set
@cindex parameters, listing
@cindex parameters, positional
@cindex parameters, setting array
@cindex array parameters, setting
@item @code{set} [ @{@code{+}|@code{-}@}@var{options} | @{@code{+}|@code{-}@}@code{o} @var{option_name} ] ... [ @{@code{+}|@code{-}@}@code{A} [ @var{name} ] ] [ @var{arg} ... ]
Set the options for the shell and/or set the positional parameters, or
declare and set an array.  If the @code{-s} option is given, it causes the
specified arguments to be sorted before assigning them to the positional
parameters (or to the array @var{name} if @code{-A} is used).  With @code{+s}
sort arguments in descending order.  For the meaning of the other flags, see
@ref{Options}.  Flags may be specified by name using the @code{-o} option.

@noindent
If the @code{-A} flag is specified, @var{name} is
set to an array containing the given @var{arg}s. if @code{+A} is used and
@var{name} is an array, the given arguments will replace the initial
elements of that array; if no @var{name} is specified, all arrays are
printed.  Otherwise the positional parameters are set.  If no arguments are
given, then the names and values of all parameters are printed on the
standard output.  If the only argument is `@code{+}',
the names of all parameters are printed.

@findex setopt
@cindex options, setting
@item @code{setopt} [ @{@code{+}|@code{-}@}@var{options} | @{@code{+}|@code{-}@}@code{o} @var{option_name} ] [ @var{name} ... ]
Set the options for the shell.  All options specified either
with flags or by name are set.  If no arguments are supplied,
the names of all options currently set are printed.
If the @code{-m} flag is given the arguments are taken as patterns
(which should be quoted to preserve them from being interpreted as glob
patterns), and all options with names matching these patterns are set.

@findex shift
@cindex parameters, positional
@item @code{shift} [ @var{n} ] [ @var{name} ... ]
The positional parameters @code{$@{}@var{n}+1@code{@}} ... are renamed
to @code{$1} ..., where @var{n} is an arithmetic expression that
defaults to 1.
If any @var{name}s are given then the arrays with these names are
shifted instead of the positional parameters.

@findex source
@item @code{source} @var{file} [ @var{arg} ... ]
Same as @code{.}, except that the current directory is always searched and
is always searched first, before directories in @code{$path}.

@findex suspend
@cindex shell, suspending
@cindex suspending the shell
@item @code{suspend} [ @code{-f} ]
Suspend the execution of the shell (send it a @code{SIGTSTP})
until it receives a @code{SIGCONT}.
Unless the @code{-f} option is given, this will refuse to suspend a login shell.

@findex test
@item @code{test} [ @var{arg} ... ]
@itemx @code{[} [ @var{arg} ... ] @code{]}
Like the system version of @code{test}.  Added for compatibility;
use conditional expressions instead (see @ref{Conditional Expressions}).

@findex times
@cindex shell, timing
@cindex timing the shell
@item @code{times}
Print the accumulated user and system times for the shell
and for processes run from the shell.

@findex trap
@cindex signals, trapping
@cindex trapping signals
@item @code{trap} [ @var{arg} [ @var{sig} ... ] ]
@var{arg} is a command to be read and executed when the shell
receives @var{sig}.  Each @var{sig} can be given as a number
or as the name of a signal.
If @var{arg} is `@code{-}', then all traps @var{sig} are reset to their
default values.  If @var{arg} is the null string, then this signal
is ignored by the shell and by the commands it invokes.

@noindent
If @var{sig} is @code{ZERR} then @var{arg} will be executed
after each command with a nonzero exit status.
If @var{sig} is @code{DEBUG} then @var{arg} will be executed
after each command.
If @var{sig} is @code{0} or @code{EXIT}
and the @code{trap} statement is executed inside the body of a function,
then the command @var{arg} is executed after the function completes.
If @var{sig} is @code{0} or @code{EXIT}
and the @code{trap} statement is not executed inside the body of a function,
then the command @var{arg} is executed when the shell terminates.

@noindent
The @code{trap} command with no arguments prints a list of commands
associated with each signal.

@findex true
@cindex doing nothing, successfully
@item @code{true} [ @var{arg} ... ]
Do nothing and return an exit code of 0.

@findex ttyctl
@cindex tty, freezing
@item @code{ttyctl} @code{-fu}
The @code{-f} option freezes the tty, and @code{-u} unfreezes it.
When the tty is frozen, no changes made to the tty settings by
external programs will be honored by the shell, except for changes in the
size of the screen; the shell will
simply reset the settings to their previous values as soon as each
command exits or is suspended.  Thus, @code{stty} and similar programs have
no effect when the tty is frozen.  Without options it reports whether the
terminal is frozen or not.

@findex type
@item @code{type} [ @code{-wfpams} ] @var{name} ...
Equivalent to @code{whence -v}.

@findex typeset
@cindex parameters, setting
@cindex parameters, declaring
@item @code{typeset} [ @{@code{+}|@code{-}@}@code{LRUZfilrtuxm} [@var{n}]] [ @var{name}[@code{=}@var{value}] ... ]
Set attributes and values for shell parameters.
When invoked inside a function a new parameter is created which will be
unset when the function completes.  The new parameter will not be
exported unless @code{ALL_EXPORT} is set, in which case the parameter will be
exported provided no parameter of that name already exists.
The following attributes are valid:

@noindent
@table @asis
@item @code{-L}
Left justify and remove leading blanks from @var{value}.
If @var{n} is nonzero, it defines the width of the field;
otherwise it is determined by the width of the value of the first
assignment.
When the parameter is printed, it is filled on the right with
blanks or truncated if necessary to fit the field.
Leading zeros are removed if the @code{-Z} flag is also set.

@item @code{-R}
Right justify and fill with leading blanks.  If @var{n} is nonzero
if defines the width of the field;
otherwise it is determined by the width of the value of the first
assignment.
When the parameter is printed, the field is left filled with
blanks or truncated from the end.

@item @code{-U}
For arrays keep only the first element of each duplications. It can also be
set for colon separated special parameters like @code{PATH} or @code{FIGNORE},
etc.

@item @code{-Z}
Right justify and fill with leading zeros if the first non-blank
character is a digit and the @code{-L} flag has not been set.
If @var{n} is nonzero it defines the width of the field;
otherwise it is determined by the width of the value of the
first assignment.

@item @code{-f}
The names refer to functions rather than parameters.  No assignments
can be made, and the only other valid flags are @code{-t}
and @code{-u}.  The flag @code{-t} turns on execution tracing for this
function.  The flag @code{-u} causes this function to be marked
for autoloading.  The @code{fpath} parameter will be searched to find the
function definition when the function is first referenced; see
@ref{Functions}.

@item @code{-i}
Use an internal integer representation.  If @var{n} is nonzero
it defines the output arithmetic base, otherwise it is determined by the first
assignment.

@item @code{-l}
Convert to lower case.

@item @code{-r}
The given @var{name}s are marked readonly.

@item @code{-t}
Tags the named parameters.  Tags have no special meaning to the shell.

@item @code{-u}
Convert to upper case.

@item @code{-x}
Mark for automatic export to the environment of subsequently
executed commands.

@end table

@noindent
Using `@code{+}' rather than `@code{-}' causes these flags to be turned off.
If no arguments are given but flags are specified,
a list of named parameters which have these flags set is printed.
Using `@code{+}' instead of `@code{-}' keeps their values from being printed.
If no arguments or options are given, the names and attributes
of all parameters are printed. If only the @code{-m} flag is given the
arguments are taken as patterns (should be quoted) and all parameters
or functions (with the @code{-f} flag) with matching names are printed.

@findex ulimit
@cindex resource limits
@cindex limits, resource
@item @code{ulimit} [ @code{-SHacdflmnpstv} [ @code{limit} ] ... ]
Set or display resource limits of the shell and the processes started by
the shell.  The value of @var{limit} can be a number in the unit specified
below or the value `@code{unlimited}'.  If the @code{-H} flag is given use
hard limits instead of soft limits.  If the @code{-S} flag is given
together with the @code{-H} flag set both hard and soft limits.  If no
options are used, the file size limit (@code{-f}) is assumed.  If
@var{limit} is omitted the current value of the specified resources are
printed.  When more than one resource values are printed the limit name and
unit is printed before each value.

@noindent
@table @asis
@item @code{-a}
Lists all of the current resource limits.
@item @code{-c}
512-byte blocks on the size of core dumps.
@item @code{-d}
K-bytes on the size of the data segment.
@item @code{-f}
512-byte blocks on the size of files written.
@item @code{-l}
K-bytes on the size of locked-in memory.
@item @code{-m}
K-bytes on the size of physical memory.
@item @code{-n}
open file descriptors.
@item @code{-s}
K-bytes on the size of the stack.
@item @code{-t}
CPU seconds to be used.
@item @code{-u}
processes available to the user.
@item @code{-v}
K-bytes on the size of virtual memory.
@end table

@findex umask
@cindex umask
@item @code{umask} [ @code{-S} ] [ @var{mask} ]
The umask is set to @var{mask}.  @var{mask} can be either
an octal number or a symbolic value as described in man page chmod(1).
If @var{mask} is omitted, the current value is printed.  The @code{-S}
option causes the mask to be printed as a symbolic value.  Otherwise,
the mask is printed as an octal number.  Note that in
the symbolic form the permissions you specify are those which are to be
allowed (not denied) to the users specified.

@cindex aliases, removing
@findex unalias
@item @code{unalias}
Same as @code{unhash -a}.

@cindex functions, removing
@findex unfunction
@item @code{unfunction}
Same as @code{unhash -f}.

@findex unhash
@item @code{unhash} [ @code{-adfm} ] @var{name} ...
Remove the element named @var{name} from an internal hash table.  The
default is remove elements from the command hash table.  The @code{-a}
option causes @code{unhash} to remove aliases.  The @code{-f} option causes
@code{unhash} to remove shell functions.  The @code{-d} options causes
@code{unhash} to remove named directories.  If the @code{-m} flag is given
the arguments are taken as patterns (should be quoted) and all elements
of the corresponding hash table with matching names will be removed.

@findex unlimit
@cindex resource limits
@cindex limits, resource
@item @code{unlimit} [ @code{-hs} ] @var{resource} ...
The resource limit for each @var{resource} is set to the hard limit.
If the @code{-h} flag is given and the shell has appropriate privileges,
the hard resource limit for each @var{resource} is removed.
The resources of the shell process are only changed if the @code{-s}
flag is given.

@findex unset
@cindex parameters, unsetting
@item @code{unset} [ @code{-fm} ] @var{name} ...
Each named parameter is unset.
Local parameters remain local even if unset; they appear unset within scope,
but the previous value will still reappear when the scope ends.

@noindent
If the @code{-m} flag is specified the
arguments are taken as patterns (should be quoted) and all parameters
with matching names are unset.  @code{unset -f} is equivalent to
@code{unfunction}.

@findex unsetopt
@cindex options, unsetting
@item @code{unsetopt} [ @{@code{+}|@code{-}@}@var{options} | @{@code{+}|@code{-}@}@code{o} @var{option_name} ] [ @var{name} ... ]
Unset the options for the shell.  All options specified either
with flags or by name are unset.  If no arguments are supplied,
the names of all options currently unset are printed.
If the @code{-m} flag is given the arguments are taken as patterns
(which should be quoted to preserve them from being interpreted as glob
patterns), and all options with names matching these patterns are unset.

@findex wait
@cindex waiting for jobs
@cindex jobs, waiting for
@item @code{wait} [ @var{job} ... ]
Wait for the specified jobs or processes.  If @var{job} is not given
then all currently active child processes are waited for.
Each @var{job} can be either a job specification or the process ID
of a job in the job table.
The exit status from this command is that of the job waited for.

@findex whence
@item @code{whence} [ @code{-vcwfpams} ] @var{name} ...
For each name, indicate how it would be interpreted if used as a
command name.

@noindent
@table @asis
@item @code{-v}
Produce a more verbose report.

@item @code{-c}
Print the results in a @cite{csh}-like format.
This takes precedence over @code{-v}.

@item @code{-w}
For each @var{name}, print `@var{name}@code{:} @var{word}' where @var{word}
is one of @code{alias}, @code{builtin}, @code{command}, @code{function},
@code{hashed}, @code{reserved} or @code{none}, according as @var{name}
corresponds to an alias, a built-in command, an external command, a
shell function, a command defined with the @code{hash} builtin, a
reserved word, or is not recognised.  This takes precedence over
@code{-v} and @code{-c}.

@item @code{-f}
Causes the contents of a shell function to be
displayed, which would otherwise not happen unless the @code{-c}
flag were used.

@item @code{-p}
Do a path search for @var{name}
even if it is an alias, reserved word, shell function or builtin.

@item @code{-a}
Do a search for all occurrences of @var{name}
throughout the command path.
Normally only the first occurrence is printed.

@item @code{-m}
The arguments are taken as patterns (should be
quoted), and the information is displayed for each command matching one
of these patterns.

@item @code{-s}
If a pathname contains symlinks, print the symlink-free pathname as well.

@end table

@findex where
@item @code{where} [ @code{-wpms} ] @var{name} ...
Equivalent to @code{whence -ca}.

@findex which
@item @code{which} [ @code{-wpams} ] @var{name} ...
Equivalent to @code{whence -c}.

@findex zmodload
@cindex modules, loading
@cindex loading modules
@item @code{zmodload} [ @code{-iL} ] [ @var{name} ... ]
@itemx @code{zmodload} @code{-u} [ @code{-i} ] @var{name} ...
@itemx @code{zmodload} @code{-d} [ @code{-L} ] [ @var{name} [ @var{dep} ... ] ]
@itemx @code{zmodload} @code{-du} @var{name} [ @var{dep} ... ]
@itemx @code{zmodload} @code{-a} [ @code{-iL} ] [ @var{name} [ @var{builtin} ... ] ]
@itemx @code{zmodload} @code{-au} [ @code{-i} ] @var{builtin} ...
@code{zmodload} performs operations relating to zsh's loadable modules.
This feature is not available on all operating systems,
or on all installations on a particular operating system.

@noindent
In the simplest case,
@code{zmodload} loads a binary module.  The module must be in a file with a
name consisting of the specified @var{name} followed by a standard suffix,
usually `@code{.so}'.  If this can't be found, the @var{name} is tried without
the suffix.
If the module to be loaded is already loaded and the @code{-i}
option is given, the duplicate module is ignored.  Otherwise
@code{zmodload} prints an error message.

@noindent
The @var{name}d module is searched for in the same way a command is, using
@code{$module_path} instead of @code{$path}.  If @var{name} contains a `@code{/}',
it will be used as-is, and a path search will be performed otherwise.
This behaviour can be modified by the @code{PATH_DIRS} option.
@cindex PATH_DIRS, use of

@noindent
With @code{-u}, @code{zmodload} unloads modules.  The same @var{name}
must be given that was given when the module was loaded, but it is not
necessary for the module to exist in the filesystem.
The @code{-i} option suppresses the error if the module is already
unloaded (or was never loaded).

@noindent
Each module has a boot and a cleanup function.  The module
will not be loaded if its boot function fails.  Similarly a module
can only be unloaded if its cleanup function runs successfully.

@noindent
Without arguments all currently loaded binary modules are printed.
The @code{-L} option causes this list to be in the form of a series of
@code{zmodload} commands.

@noindent
The @code{-d} option can be used to specify module dependencies.
This operation is idempotent regardless of the @code{-i} option.
The modules named in the second and subsequent arguments will be
loaded before the module named in the first argument.

@noindent
With @code{-d} and one
argument, all dependencies for that module are listed.  With @code{-d} and no
arguments, all module dependencies are listed.
This listing is by default in a Makefile-like format.
The @code{-L} option changes this format to a list of
@code{zmodload -d} commands.

@noindent
If @code{-d} and @code{-u} are both used, dependencies are removed.
This operation is idempotent regardless of the @code{-i} option.
If only one argument is given, all dependencies for that module are removed.

@noindent
The @code{-a} option defines autoloaded builtins.  It defines the
specified @var{builtin}s.  When any of those builtins is called, the module
specified in the first argument is loaded.  If only one argument is given,
one builtin is defined, with the same name as the module.
@code{-i} suppresses the error if the builtin is already defined or
autoloaded, regardless of which module it came from.

@noindent
With @code{-a} and no arguments, all
autoloaded builtins are listed, with the module name (if different)
shown in parentheses after the builtin name.  The @code{-L} option changes
this format to a list of @code{zmodload -a} commands.

@noindent
If @code{-a} is used
together with the @code{-u} option it removes builtins defined with
@code{zmodload -a}.  This is only possible if the builtin is not yet
loaded.  @code{-i} suppresses the error if the builtin is already
removed (or never existed).

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/zle.yo
@node Zsh Line Editor, Programmable Completion, Shell Builtin Commands, Top

@chapter Zsh Line Editor
@noindent
@cindex line editor
@cindex editor, line

@section Description
@noindent
@pindex ZLE, use of
If the @code{ZLE} option is set (it is by default)
and the shell input is attached to the terminal, the user
is allowed to edit command lines.

@noindent
There are two display modes.  The first, multiline mode, is the
default.  It only works if the @code{TERM} parameter is set to a valid
terminal type that can move the cursor up.  The second, single line
mode, is used if @code{TERM} is invalid or incapable of moving the
cursor up, or if the @code{SINGLE_LINE_ZLE} option is set.
@pindex SINGLE_LINE_ZLE, use of
@cindex ksh, editor mode
@cindex editor ksh style
This mode
is similar to @cite{ksh}, and uses no termcap sequences.  If @code{TERM} is
"emacs", the @code{ZLE} option will be unset by default.

@section Keymaps
@noindent
@cindex keymaps
@cindex key bindings
@cindex bindings, key
A keymap in ZLE contains a set of bindings between key sequences
and ZLE commands.  The empty key sequence cannot be bound.

@noindent
There can be any number of keymaps at any time, and each keymap has one
or more names.  If all of a keymap's names are deleted, it disappears.
@findex bindkey, use of
@code{bindkey} can be used to manipulate keymap names.

@noindent
Initially, there are four keymaps:

@noindent
@table @asis
@item @code{emacs}
EMACS emulation
@item @code{viins}
vi emulation - insert mode
@item @code{vicmd}
vi emulation - command mode
@item @code{.safe}
fallback keymap
@end table

@noindent
The `@code{.safe}' keymap is special.  It can never be altered, and the name
can never be removed.  However, it can be linked to other names, which can
be removed.  In the future other special keymaps may be added; users should
avoid using names beginning with `@code{.}' for their own keymaps.

@noindent
@vindex VISUAL
@vindex EDITOR
In addition to these four names, either `@code{emacs}' or `@code{viins}' is
also linked to the name `@code{main}'.  If one of the @code{VISUAL} or
@code{EDITOR} environment variables contain the string `@code{vi}' when the shell
starts up then it will be `@code{viins}', otherwise it will be `@code{emacs}'.
@code{bindkey}'s @code{-e} and @code{-v}
options provide a convenient way to override this default choice.

@noindent
When the editor starts up, it will select the `@code{main}' keymap.
If that keymap doesn't exist, it will use `@code{.safe}' instead.

@noindent
In the `@code{.safe}' keymap, each single key is bound to @code{self-insert},
except for ^J (line feed) and ^M (return) which are bound to @code{accept-line}.
This is deliberately not pleasant to use; if you are using it, it
means you deleted the main keymap, and you should put it back.

@subsection Reading Commands
@noindent
When ZLE is reading a command from the terminal, it may read a sequence
that is bound to some command and is also a prefix of a longer bound string.
In this case ZLE will wait a certain time to see if more characters
are typed, and if not (or they don't match any longer string) it will
execute the binding.  This timeout is defined by the @code{KEYTIMEOUT} parameter;
its default is 0.4 sec.  No timeout is done if the prefix string is not bound.

@noindent
As well as ZLE commands, key sequences can be bound to other strings, by using
`@code{bindkey -s}'.
When such a sequence is read, the replacement string is pushed back as input,
and the command reading process starts again using these fake keystrokes.
This input can itself invoke further replacement strings, but in order to
detect loops the process will be stopped if there are twenty such replacements
without a real command being read.

@section Widgets
@noindent
@cindex widgets
All actions in the editor are performed by `widgets'.  A widget's job is
simply to perform some small action.  The ZLE commands that key sequences
in keymaps are bound to are in fact widgets.  Widgets can be user-defined
or built in.

@noindent
There are 162 standard widgets built in to ZLE (see sectref(Standard Widgets)).
Other built-in widgets can be defined by other modules (see
@ref{Zsh Modules}).  Each built-in widget has two names: its normal canonical name, and the
same name preceded by a `@code{.}'.  The `@code{.}' name is special: it can't be
rebound to a different widget.  This makes the widget available even when
its usual name has been redefined.

@noindent
User-defined widgets are defined using `@code{zle -N}', and implemented
as shell functions.  When the widget is executed, the corresponding
shell function is executed, and can perform editing (or other) actions.
It is recommended that user-defined widgets should not have names
starting with `@code{.}'.

@section User-Defined Widgets
@noindent
@cindex widgets, user-defined
User-defined widgets, being implemented as shell functions,
can execute any normal shell command.  They can also run other widgets
(whether built-in or user-defined) using the @code{zle} builtin command.
Finally, they can examine and edit the ZLE buffer being edited by
reading and setting the special parameters described below.

@noindent
@cindex parameters, editor
@cindex parameters, zle
These special parameters are always available in widget functions, but
are not in any way special outside ZLE.  If they have some normal value
outside ZLE, that value is temporarily inaccessible, but will return
when the widget function exits.  These special parameters in fact have
local scope, like parameters created in a function using @code{local}.

@noindent
@table @asis
@vindex BUFFER
@item @code{BUFFER} (scalar)
The entire contents of the edit buffer.  If it is written to, the
cursor remains at the same offset, unless that would put it outside the
buffer.

@vindex CURSOR
@item @code{CURSOR} (integer)
The offset of the cursor, within the edit buffer.  This is in the range
0 to @code{$#BUFFER}, and is by definition equal to @code{$#LBUFFER}.
Attempts to move the cursor outside the buffer will result in the
cursor being moved to the appropriate end of the buffer.

@vindex LBUFFER
@item @code{LBUFFER} (scalar)
The part of the buffer that lies to the left of the cursor position.
If it is assigned to, only that part of the buffer is replaced, and the
cursor remains between the new @code{$LBUFFER} and the old @code{$RBUFFER}.

@vindex RBUFFER
@item @code{RBUFFER} (scalar)
The part of the buffer that lies to the right of the cursor position.
If it is assigned to, only that part of the buffer is replaced, and the
cursor remains between the old @code{$LBUFFER} and the new @code{$RBUFFER}.

@end table

@section Standard Widgets
@noindent
@cindex widgets, standard
The following is a list of all the standard widgets,
and their default bindings in emacs mode,
vi command mode and vi insert mode
(the `@code{emacs}', `@code{vicmd}' and `@code{viins}' keymaps, respectively).
@menu
* Movement::
* History Control::
* Modifying Text::
* Arguments::
* Completion::
* Miscellaneous::
@end menu
@node Movement, History Control, , Zsh Line Editor

@subsection Movement
@noindent
@table @asis
@tindex vi-backward-blank-word
@item @code{vi-backward-blank-word} (unbound) (B) (unbound)
Move backward one word, where a word is defined as a series of
non-blank characters.

@tindex backward-char
@item @code{backward-char} (^B ESC-[D) (unbound) (unbound)
Move backward one character.

@tindex vi-backward-char
@item @code{vi-backward-char} (unbound) (^H h ^?) (unbound)
Move backward one character, without changing lines.

@tindex backward-word
@item @code{backward-word} (ESC-B ESC-b) (unbound) (unbound)
Move to the beginning of the previous word.

@tindex emacs-backward-word
@item @code{emacs-backward-word}
Move to the beginning of the previous word.

@tindex vi-backward-word
@item @code{vi-backward-word} (unbound) (b) (unbound)
Move to the beginning of the previous word, vi-style.

@tindex beginning-of-line
@item @code{beginning-of-line} (^A) (unbound) (unbound)
Move to the beginning of the line.  If already at the beginning
of the line, move to the beginning of the previous line, if any.

@tindex vi-beginning-of-line
@item @code{vi-beginning-of-line}
Move to the beginning of the line, without changing lines.

@tindex end-of-line
@item @code{end-of-line} (^E) (unbound) (unbound)
Move to the end of the line.  If already at the end
of the line, move to the end of the next line, if any.

@tindex vi-end-of-line
@item @code{vi-end-of-line} (unbound) ($) (unbound)
Move to the end of the line.
If an argument is given to this command, the cursor will be moved to
the end of the line (argument - 1) lines down.

@tindex vi-forward-blank-word
@item @code{vi-forward-blank-word} (unbound) (W) (unbound)
Move forward one word, where a word is defined as a series of
non-blank characters.

@tindex vi-forward-blank-word-end
@item @code{vi-forward-blank-word-end} (unbound) (E) (unbound)
Move to the end of the current word, or, if at the end of the current word,
to the end of the next word,
where a word is defined as a series of non-blank characters.

@tindex forward-char
@item @code{forward-char} (^F ESC-[C) (unbound) (unbound)
Move forward one character.

@tindex vi-forward-char
@item @code{vi-forward-char} (unbound) (space l) (unbound)
Move forward one character.

@tindex vi-find-next-char
@item @code{vi-find-next-char} (^X^F) (f) (unbound)
Read a character from the keyboard, and move to
the next occurrence of it in the line.

@tindex vi-find-next-char-skip
@item @code{vi-find-next-char-skip} (unbound) (t) (unbound)
Read a character from the keyboard, and move to
the position just before the next occurrence of it in the line.

@tindex vi-find-prev-char
@item @code{vi-find-prev-char} (unbound) (F) (unbound)
Read a character from the keyboard, and move to
the previous occurrence of it in the line.

@tindex vi-find-prev-char-skip
@item @code{vi-find-prev-char-skip} (unbound) (T) (unbound)
Read a character from the keyboard, and move to
the position just after the previous occurrence of it in the line.

@tindex vi-first-non-blank
@item @code{vi-first-non-blank} (unbound) (^) (unbound)
Move to the first non-blank character in the line.

@tindex vi-forward-word
@item @code{vi-forward-word} (unbound) (w) (unbound)
Move forward one word, vi-style.

@tindex forward-word
@item @code{forward-word} (ESC-F ESC-f) (unbound) (unbound)
Move to the beginning of the next word.
The editor's idea of a word is specified with the @code{WORDCHARS}
parameter.

@tindex emacs-forward-word
@item @code{emacs-forward-word}
Move to the end of the next word.

@tindex vi-forward-word-end
@item @code{vi-forward-word-end} (unbound) (e) (unbound)
Move to the end of the next word.

@tindex vi-goto-column
@item @code{vi-goto-column} (ESC-|) (|) (unbound)
Move to the column specified by the numeric argument.

@tindex vi-goto-mark
@item @code{vi-goto-mark} (unbound) (`) (unbound)
Move to the specified mark.

@tindex vi-goto-mark-line
@item @code{vi-goto-mark-line} (unbound) (') (unbound)
Move to beginning of the line containing the specified mark.

@tindex vi-repeat-find
@item @code{vi-repeat-find} (unbound) (;) (unbound)
Repeat the last @code{vi-find} command.

@tindex vi-rev-repeat-find
@item @code{vi-rev-repeat-find} (unbound) (,) (unbound)
Repeat the last @code{vi-find} command in the opposite direction.

@end table
@node History Control, Modifying Text, Movement, Zsh Line Editor

@subsection History Control
@noindent
@table @asis
@tindex beginning-of-buffer-or-history
@item @code{beginning-of-buffer-or-history} (ESC-<) (unbound) (unbound)
Move to the beginning of the buffer, or if already there,
move to the first event in the history list.

@tindex beginning-of-line-hist
@item @code{beginning-of-line-hist}
Move to the beginning of the line.  If already at the
beginning of the buffer, move to the previous history line.

@tindex beginning-of-history
@item @code{beginning-of-history}
Move to the first event in the history list.

@tindex down-line-or-history
@item @code{down-line-or-history} (^N ESC-[B) (j) (unbound)
Move down a line in the buffer, or if already at the bottom line,
move to the next event in the history list.

@tindex vi-down-line-or-history
@item @code{vi-down-line-or-history} (unbound) (+) (unbound)
Move down a line in the buffer, or if already at the bottom line,
move to the next event in the history list.
Then move to the first non-blank character on the line.

@tindex down-line-or-search
@item @code{down-line-or-search}
Move down a line in the buffer, or if already at the bottom line,
search forward in the history for a line beginning with the first
word in the buffer.

@tindex down-history
@item @code{down-history} (unbound) (^N) (unbound)
Move to the next event in the history list.

@tindex history-beginning-search-backward
@item @code{history-beginning-search-backward}
Search backward in the history for a line beginning with the current
line up to the cursor.
This leaves the cursor in its original position.

@tindex end-of-buffer-or-history
@item @code{end-of-buffer-or-history} (ESC->) (unbound) (unbound)
Move to the end of the buffer, or if already there,
move to the last event in the history list.

@tindex end-of-line-hist
@item @code{end-of-line-hist}
Move to the end of the line.  If already at the end of
the buffer, move to the next history line.

@tindex end-of-history
@item @code{end-of-history}
Move to the last event in the history list.

@tindex vi-fetch-history
@item @code{vi-fetch-history} (unbound) (G) (unbound)
Fetch the history line specified by the numeric argument.
This defaults to the current history line
(i.e. the one that isn't history yet).

@tindex history-incremental-search-backward
@item @code{history-incremental-search-backward} (^R ^Xr) (unbound) (unbound)
Search backward incrementally for a specified string.  The search is
case-insensitive if the search string does not have uppercase letters and no
numeric argument was given.  The string may begin with `@code{^}' to anchor the
search to the beginning of the line.

@noindent
A restricted set of editing functions
is available in the mini-buffer.  An interrupt signal, as defined by the stty
setting, will stop the search and go back to the original line.  An undefined
key will have the same effect. The supported functions are:
@code{backward-delete-char},
@code{vi-backward-delete-char},
@code{clear-screen},
@code{redisplay},
@code{quoted-insert},
@code{vi-quoted-insert},
@code{accept-and-hold},
@code{accept-and-infer-next-history},
@code{accept-line} and
@code{accept-line-and-down-history}.

@noindent
@code{magic-space} just inserts a space.
@code{vi-cmd-mode} toggles between the `@code{main}' and `@code{vicmd}' keymaps;
the `@code{main}' keymap (insert mode) will be selected initially.
@code{history-incremental-search-backward} will get the
next occurrence of the contents of the mini-buffer.
@code{history-incremental-search-forward} inverts the sense of the search.
@code{vi-repeat-search} and @code{vi-rev-repeat-search} are similarly supported.
The direction of the search is indicated in the mini-buffer.

@noindent
Any multi-character string
that is not bound to one of the above functions will beep and interrupt the
search, leaving the last found line in the buffer. Any single character that
is not bound to one of the above functions, or @code{self-insert} or
@code{self-insert-unmeta}, will have the same effect but the function will be
executed.

@tindex history-incremental-search-forward
@item @code{history-incremental-search-forward} (^S ^Xs) (unbound) (unbound)
Search forward incrementally for a specified string.  The search is
case-insensitive if the search string does not have uppercase letters and no
numeric argument was given.  The string may begin with `@code{^}' to anchor the
search to the beginning of the line.  The functions available in the
mini-buffer are the same as for @code{history-incremental-search-backward}.

@tindex history-search-backward
@item @code{history-search-backward} (ESC-P ESC-p) (unbound) (unbound)
Search backward in the history for a line beginning with the first
word in the buffer.

@tindex vi-history-search-backward
@item @code{vi-history-search-backward} (unbound) (/) (unbound)
Search backward in the history for a specified string.
The string may begin with `@code{^}' to anchor the search to the
beginning of the line.

@noindent
A restricted set of editing functions is available in
the mini-buffer.  An interrupt signal, as defined by the stty setting,  will
stop the search.
The functions available in the mini-buffer are:
@code{accept-line},
@code{backward-delete-char},
@code{vi-backward-delete-char},
@code{backward-kill-word},
@code{vi-backward-kill-word},
@code{clear-screen},
@code{redisplay},
@code{quoted-insert}
and
@code{vi-quoted-insert}.

@noindent
@code{vi-cmd-mode} is treated the same as accept-line, and
@code{magic-space} is treated as a space.
Any other character that is not bound to self-insert or
self-insert-unmeta will beep and be ignored. If the function is called from vi
command mode, the bindings of the current insert mode will be used.

@tindex history-search-forward
@item @code{history-search-forward} (ESC-N ESC-n) (unbound) (unbound)
Search forward in the history for a line beginning with the first
word in the buffer.

@tindex vi-history-search-forward
@item @code{vi-history-search-forward} (unbound) (?) (unbound)
Search forward in the history for a specified string.
The string may begin with `@code{^}' to anchor the search to the
beginning of the line. The functions available in the mini-buffer are the same
as for @code{vi-history-search-backward}.

@tindex infer-next-history
@item @code{infer-next-history} (^X^N) (unbound) (unbound)
Search in the history list for a line matching the current one and
fetch the event following it.

@tindex insert-last-word
@item @code{insert-last-word} (ESC-_ ESC-.) (unbound) (unbound)
Insert the last word from the previous history event at the
cursor position.  If a positive numeric argument is given,
insert that word from the end of the previous history event.
If the argument is zero or negative insert that word from the
left (zero inserts the previous command word).

@tindex vi-repeat-search
@item @code{vi-repeat-search} (unbound) (n) (unbound)
Repeat the last vi history search.

@tindex vi-rev-repeat-search
@item @code{vi-rev-repeat-search} (unbound) (N) (unbound)
Repeat the last vi history search, but in reverse.

@tindex up-line-or-history
@item @code{up-line-or-history} (^P ESC-[A) (k) (unbound)
Move up a line in the buffer, or if already at the top line,
move to the previous event in the history list.

@tindex vi-up-line-or-history
@item @code{vi-up-line-or-history} (unbound) (-) (unbound)
Move up a line in the buffer, or if already at the top line,
move to the previous event in the history list.
Then move to the first non-blank character on the line.

@tindex up-line-or-search
@item @code{up-line-or-search}
Move up a line in the buffer, or if already at the top line,
search backward in the history for a line beginning with the
first word in the buffer.

@tindex up-history
@item @code{up-history} (unbound) (^P) (unbound)
Move to the previous event in the history list.

@tindex history-beginning-search-forward
@item @code{history-beginning-search-forward}
Search forward in the history for a line beginning with the current
line up to the cursor.
This leaves the cursor in its original position.

@end table
@node Modifying Text, Arguments, History Control, Zsh Line Editor

@subsection Modifying Text
@noindent
@table @asis
@tindex vi-add-eol
@item @code{vi-add-eol} (unbound) (A) (unbound)
Move to the end of the line and enter insert mode.

@tindex vi-add-next
@item @code{vi-add-next} (unbound) (a) (unbound)
Enter insert mode after the current cursor position, without changing lines.

@tindex backward-delete-char
@item @code{backward-delete-char} (^H ^?) (unbound) (unbound)
Delete the character behind the cursor.

@tindex vi-backward-delete-char
@item @code{vi-backward-delete-char} (unbound) (X) (^H)
Delete the character behind the cursor, without changing lines.
If in insert mode, this won't delete past the point where insert mode was
last entered.

@tindex backward-delete-word
@item @code{backward-delete-word}
Delete the word behind the cursor.

@tindex backward-kill-line
@item @code{backward-kill-line}
Kill from the beginning of the line to the cursor position.

@tindex backward-kill-word
@item @code{backward-kill-word} (^W ESC-^H ESC-^?) (unbound) (unbound)
Kill the word behind the cursor.

@tindex vi-backward-kill-word
@item @code{vi-backward-kill-word} (unbound) (unbound) (^W)
Kill the word behind the cursor, without going past the point where insert
mode was last entered.

@tindex capitalize-word
@item @code{capitalize-word} (ESC-C ESC-c) (unbound) (unbound)
Capitalize the current word and move past it.

@tindex vi-change
@item @code{vi-change} (unbound) (c) (unbound)
Read a movement command from the keyboard, and kill
from the cursor position to the endpoint of the movement.
Then enter insert mode.
If the command is @code{vi-change}, change the current line.

@tindex vi-change-eol
@item @code{vi-change-eol} (unbound) (C) (unbound)
Kill to the end of the line and enter insert mode.

@tindex vi-change-whole-line
@item @code{vi-change-whole-line} (unbound) (S) (unbound)
Kill the current line and enter insert mode.

@tindex copy-region-as-kill
@item @code{copy-region-as-kill} (ESC-W ESC-w) (unbound) (unbound)
Copy the area from the cursor to the mark to the kill buffer.

@tindex copy-prev-word
@item @code{copy-prev-word} (ESC-^_) (unbound) (unbound)
Duplicate the word behind the cursor.

@tindex vi-delete
@item @code{vi-delete} (unbound) (d) (unbound)
Read a movement command from the keyboard, and kill
from the cursor position to the endpoint of the movement.
If the command is @code{vi-delete}, kill the current line.

@tindex delete-char
@item @code{delete-char}
Delete the character under the cursor.

@tindex vi-delete-char
@item @code{vi-delete-char} (unbound) (x) (unbound)
Delete the character under the cursor,
without going past the end of the line.

@tindex delete-word
@item @code{delete-word}
Delete the current word.

@tindex down-case-word
@item @code{down-case-word} (ESC-L ESC-l) (unbound) (unbound)
Convert the current word to all lowercase and move past it.

@tindex kill-word
@item @code{kill-word} (ESC-D ESC-d) (unbound) (unbound)
Kill the current word.

@tindex gosmacs-transpose-chars
@item @code{gosmacs-transpose-chars}
Exchange the two characters behind the cursor.

@tindex vi-indent
@item @code{vi-indent} (unbound) (>) (unbound)
Indent a number of lines.

@tindex vi-insert
@item @code{vi-insert} (unbound) (i) (unbound)
Enter insert mode.

@tindex vi-insert-bol
@item @code{vi-insert-bol} (unbound) (I) (unbound)
Move to the first non-blank character on the line and enter insert mode.

@tindex vi-join
@item @code{vi-join} (^X^J) (J) (unbound)
Join the current line with the next one.

@tindex kill-line
@item @code{kill-line} (^K) (unbound) (unbound)
Kill from the cursor to the end of the line.
If already on the end of the line, kill the newline character.

@tindex vi-kill-line
@item @code{vi-kill-line} (unbound) (unbound) (^U)
Kill from the cursor back to wherever insert mode was last entered.

@tindex vi-kill-eol
@item @code{vi-kill-eol} (unbound) (D) (unbound)
Kill from the cursor to the end of the line.

@tindex kill-region
@item @code{kill-region}
Kill from the cursor to the mark.

@tindex kill-buffer
@item @code{kill-buffer} (^X^K) (unbound) (unbound)
Kill the entire buffer.

@tindex kill-whole-line
@item @code{kill-whole-line} (^U) (unbound) (unbound)
Kill the current line.

@tindex vi-match-bracket
@item @code{vi-match-bracket} (^X^B) (%) (unbound)
Move to the bracket character (one of @code{@{@}}, @code{()} or @code{[]}) that
matches the one under the cursor.
If the cursor is not on a bracket character, move forward without going
past the end of the line to find one, and then go to the matching bracket.

@tindex vi-open-line-above
@item @code{vi-open-line-above} (unbound) (O) (unbound)
Open a line above the cursor and enter insert mode.

@tindex vi-open-line-below
@item @code{vi-open-line-below} (unbound) (o) (unbound)
Open a line below the cursor and enter insert mode.

@tindex vi-oper-swap-case
@item @code{vi-oper-swap-case}
Read a movement command from the keyboard, and swap
the case of all characters
from the cursor position to the endpoint of the movement.
If the movement command is @code{vi-oper-swap-case},
swap the case of all characters on the current line.

@tindex overwrite-mode
@item @code{overwrite-mode} (^X^O) (unbound) (unbound)
Toggle between overwrite mode and insert mode.

@tindex vi-put-before
@item @code{vi-put-before} (unbound) (P) (unbound)
Insert the contents of the kill buffer before the cursor.
If the kill buffer contains a sequence of lines (as opposed to characters),
paste it above the current line.

@tindex vi-put-after
@item @code{vi-put-after} (unbound) (p) (unbound)
Insert the contents of the kill buffer after the cursor.
If the kill buffer contains a sequence of lines (as opposed to characters),
paste it below the current line.

@tindex quoted-insert
@item @code{quoted-insert} (^V) (unbound) (unbound)
Insert the next character typed into the buffer literally.
An interrupt character will not be inserted.

@tindex vi-quoted-insert
@item @code{vi-quoted-insert} (unbound) (unbound) (^Q ^V)
Display a `@code{^}' at the cursor position, and
insert the next character typed into the buffer literally.
An interrupt character will not be inserted.

@tindex quote-line
@item @code{quote-line} (ESC-') (unbound) (unbound)
Quote the current line; that is, put a `@code{'}' character at the
beginning and the end, and convert all `@code{'}' characters
to `@code{'\@value{dsq}}'.

@tindex quote-region
@item @code{quote-region} (ESC-") (unbound) (unbound)
Quote the region from the cursor to the mark.

@tindex vi-replace
@item @code{vi-replace} (unbound) (R) (unbound)
Enter overwrite mode.

@tindex vi-repeat-change
@item @code{vi-repeat-change} (unbound) (.) (unbound)
Repeat the last vi mode text modification.
If a count was used with the modification, it is remembered.
If a count is given to this command, it overrides the remembered count,
and is remembered for future uses of this command.
The cut buffer specification is similarly remembered.

@tindex vi-replace-chars
@item @code{vi-replace-chars} (unbound) (r) (unbound)
Replace the character under the cursor with a character
read from the keyboard.

@tindex self-insert
@item @code{self-insert} (printable characters) (unbound) (printable characters and some control characters)
Insert a character into the buffer at the cursor position.

@tindex self-insert-unmeta
@item @code{self-insert-unmeta} (ESC-^I ESC-^J ESC-^M) (unbound) (unbound)
Insert a character into the buffer after stripping the meta bit
and converting ^M to ^J.

@tindex vi-substitute
@item @code{vi-substitute} (unbound) (s) (unbound)
Substitute the next character(s).

@tindex vi-swap-case
@item @code{vi-swap-case} (unbound) (~) (unbound)
Swap the case of the character under the cursor and move past it.

@tindex transpose-chars
@item @code{transpose-chars} (^T) (unbound) (unbound)
Exchange the two characters to the left of the
cursor if at end of line, else exchange the
character under the cursor with the character
to the left.

@tindex transpose-words
@item @code{transpose-words} (ESC-T ESC-t) (unbound) (unbound)
Exchange the current word with the one before it.

@tindex vi-unindent
@item @code{vi-unindent} (unbound) (<) (unbound)
Unindent a number of lines.

@tindex up-case-word
@item @code{up-case-word} (ESC-U ESC-u) (unbound) (unbound)
Convert the current word to all caps and move past it.

@tindex yank
@item @code{yank} (^Y) (unbound) (unbound)
Insert the contents of the kill buffer at the cursor position.

@tindex yank-pop
@item @code{yank-pop} (ESC-y) (unbound) (unbound)
Remove the text just yanked, rotate the kill-ring,
and yank the new top.  Only works following
@code{yank} or @code{yank-pop}.

@tindex vi-yank
@item @code{vi-yank} (unbound) (y) (unbound)
Read a movement command from the keyboard, and copy the region
from the cursor position to the endpoint of the movement
into the kill buffer.
If the command is @code{vi-yank}, copy the current line.

@tindex vi-yank-whole-line
@item @code{vi-yank-whole-line} (unbound) (Y) (unbound)
Copy the current line into the kill buffer.

@tindex vi-yank-eol
@item @code{vi-yank-eol}
Copy the region from the cursor position to the end of the line
into the kill buffer.
Arguably, this is what Y should do in vi, but it isn't what it actually does.

@end table
@node Arguments, Completion, Modifying Text, Zsh Line Editor

@subsection Arguments
@noindent
@table @asis
@tindex digit-argument
@item @code{digit-argument} (ESC-0..ESC-9) (1-9) (unbound)
Start a new numeric argument, or add to the current one.
See also @code{vi-digit-or-beginning-of-line}.

@tindex neg-argument
@item @code{neg-argument} (ESC--) (unbound) (unbound)
Changes the sign of the following argument.

@tindex universal-argument
@item @code{universal-argument}
Multiply the argument of the next command by 4.  Alternatively, if
this command is followed by an integer (positive or negative), use
that as the argument for the next command.  Thus digits cannot be
repeated using this command.  For example, if this command occurs
twice, followed immediately by @code{forward-char}, move forward sixteen
spaces; if instead it is followed by @code{-2}, then @code{forward-char},
move backward two spaces.

@end table
@node Completion, Miscellaneous, Arguments, Zsh Line Editor

@subsection Completion
@noindent
@table @asis
@tindex accept-and-menu-complete
@item @code{accept-and-menu-complete}
In a menu completion, insert the current completion into the buffer,
and advance to the next possible completion.

@tindex complete-word
@item @code{complete-word}
Attempt completion on the current word.

@tindex delete-char-or-list
@item @code{delete-char-or-list} (^D) (unbound) (unbound)
Delete the character under the cursor.  If the cursor
is at the end of the line, list possible completions for the
current word.

@tindex expand-cmd-path
@item @code{expand-cmd-path}
Expand the current command to its full pathname.

@tindex expand-or-complete
@item @code{expand-or-complete} (TAB) (unbound) (TAB)
Attempt shell expansion on the current word.
If that fails,
attempt completion.

@tindex expand-or-complete-prefix
@item @code{expand-or-complete-prefix}
Attempt shell expansion on the current word up to cursor.

@tindex expand-history
@item @code{expand-history} (ESC-space ESC-!) (unbound) (unbound)
Perform history expansion on the edit buffer.

@tindex expand-word
@item @code{expand-word} (^X*) (unbound) (unbound)
Attempt shell expansion on the current word.

@tindex list-choices
@item @code{list-choices} (ESC-^D) (^D =) (^D)
List possible completions for the current word.

@tindex list-expand
@item @code{list-expand} (^Xg ^XG) (^G) (^G)
List the expansion of the current word.

@tindex magic-space
@item @code{magic-space}
Perform history expansion and insert a space into the
buffer.  This is intended to be bound to space.

@tindex menu-complete
@pindex MENU_COMPLETE, use of
@item @code{menu-complete}
Like @code{complete-word}, except that menu completion is used.
See the @code{MENU_COMPLETE} option.

@tindex menu-expand-or-complete
@item @code{menu-expand-or-complete}
Like @code{expand-or-complete}, except that menu completion is used.

@tindex reverse-menu-complete
@item @code{reverse-menu-complete}
Perform menu completion, like @code{menu-complete}, except that if
a menu completion is already in progress, move to the @emph{previous}
completion rather than the next.

@end table
@node Miscellaneous, , Completion, Zsh Line Editor

@subsection Miscellaneous
@noindent
@table @asis
@tindex accept-and-hold
@item @code{accept-and-hold} (ESC-A ESC-a) (unbound) (unbound)
Push the contents of the buffer on the buffer stack
and execute it.

@tindex accept-and-infer-next-history
@item @code{accept-and-infer-next-history}
Execute the contents of the buffer.
Then search the history list for a line matching the current one
and push the event following onto the buffer stack.

@tindex accept-line
@item @code{accept-line} (^J ^M) (^J ^M) (^J ^M)
Finish editing the buffer.  Normally this causes the buffer to be
executed as a shell command.

@tindex accept-line-and-down-history
@item @code{accept-line-and-down-history} (^O) (unbound) (unbound)
Execute the current line, and push the next history
event on the the buffer stack.

@tindex vi-cmd-mode
@item @code{vi-cmd-mode} (^X^V) (unbound) (^[)
Enter command mode; that is, select the `@code{vicmd}' keymap.
Yes, this is bound by default in emacs mode.

@tindex vi-caps-lock-panic
@item @code{vi-caps-lock-panic}
Hang until any lowercase key is pressed.
This is for vi users without the mental capacity to keep
track of their caps lock key (like the author).

@tindex clear-screen
@item @code{clear-screen} (^L ESC-^L) (^L) (^L)
Clear the screen and redraw the prompt.

@tindex describe-key-briefly
@item @code{describe-key-briefly}
Reads a key sequence, then prints the function bound to that sequence.

@tindex exchange-point-and-mark
@item @code{exchange-point-and-mark} (^X^X) (unbound) (unbound)
Exchange the cursor position with the position of the mark.

@tindex execute-named-cmd
@item @code{execute-named-cmd} (ESC-x) (unbound) (unbound)
Read the name of an editor command and
execute it.  A restricted set of editing functions is available in the
mini-buffer.  An interrupt signal, as defined by the stty setting, will
abort the function. The allowed functions are:
@code{backward-delete-char},
@code{vi-backward-delete-char},
@code{clear-screen},
@code{redisplay},
@code{quoted-insert},
@code{vi-quoted-insert},
@code{backward-kill-word},
@code{vi-backward-kill-word},
@code{kill-whole-line},
@code{vi-kill-line},
@code{backward-kill-line},
@code{list-choices},
@code{delete-char-or-list},
@code{complete-word},
@code{accept-line},
@code{expand-or-complete} and
@code{expand-or-complete-prefix}.

@noindent
@code{kill-region} kills the last word,
and vi-cmd-mode is treated the same as accept-line.
The space and tab characters, if not bound to one of
these functions, will complete the name and then list the
possibilities if the @code{AUTO_LIST} option is set.
Any other character that is not bound to @code{self-insert} or
@code{self-insert-unmeta} will beep and be ignored.
The bindings of the current insert mode will be used.

@tindex execute-last-named-cmd
@item @code{execute-last-named-cmd} (ESC-z) (unbound) (unbound)
Redo the last function executed with @code{execute-named-cmd}.

@tindex get-line
@item @code{get-line} (ESC-G ESC-g) (unbound) (unbound)
Pop the top line off the buffer stack and insert it at the
cursor position.

@tindex pound-insert
@item @code{pound-insert} (unbound) (#) (unbound)
If there is no # character at the beginning of the buffer,
add one to the beginning of each line.
If there is one, remove a # from each line that has one.
In either case, accept the current line.
The @code{INTERACTIVE_COMMENTS} option must be set
for this to have any usefulness.

@tindex vi-pound-insert
@item @code{vi-pound-insert}
If there is no # character at the beginning of the current line,
add one.  If there is one, remove it.
The @code{INTERACTIVE_COMMENTS} option must be set
for this to have any usefulness.

@tindex push-input
@item @code{push-input}
Push the entire current multiline construct onto the buffer stack and
return to the top-level (@code{PS1}) prompt.
If the current parser construct is only a single line, this is exactly
like @code{push-line}.
Next time the editor starts up or is popped with @code{get-line}, the
construct will be popped off the top of the buffer stack and loaded
into the editing buffer.

@tindex push-line
@item @code{push-line} (^Q ESC-Q ESC-q) (unbound) (unbound)
Push the current buffer onto the buffer stack and clear
the buffer.
Next time the editor starts up, the buffer will be popped
off the top of the buffer stack and loaded into the editing
buffer.

@tindex push-line-or-edit
@item @code{push-line-or-edit}
At the top-level (@code{PS1}) prompt, equivalent to @code{push-line}.
At a secondary (@code{PS2}) prompt, move the entire current multiline
construct into the editor buffer.
The latter is equivalent to @code{push-input} followed by @code{get-line}.

@tindex redisplay
@item @code{redisplay} (unbound) (^R) (^R)
Redisplays the edit buffer.

@tindex send-break
@item @code{send-break} (^G ESC-^G) (unbound) (unbound)
Abort the current editor function, e.g. @code{execute-named-command}, or the
editor itself, e.g. if you are in @code{vared}. Otherwise abort the parsing of
the current line.

@tindex run-help
@item @code{run-help} (ESC-H ESC-h) (unbound) (unbound)
Push the buffer onto the buffer stack, and execute the
command `@code{run-help} @var{cmd}', where @var{cmd} is the current
command.  @code{run-help} is normally aliased to @var{man}.

@tindex vi-set-buffer
@item @code{vi-set-buffer} (unbound) (") (unbound)
Specify a buffer to be used in the following command.
There are 35 buffers that can be specified:
the 26 `named' buffers @code{"a} to @code{"z}
and the nine `queued' buffers @code{"1} to @code{"9}.  The named buffers can also
be specified as @code{"A} to @code{"Z}.

@noindent
When a buffer is specified for a cut command, the text being cut replaces
the previous contents of the specified buffer.  If a named buffer
is specified using a capital, the newly cut text is appended to the buffer
instead of overwriting it.

@noindent
If no buffer is specified for a cut command, @code{"1} is used, and the
contents of @code{"1} to @code{"8} are each shifted along one buffer; the contents of
@code{"9} is lost.

@tindex vi-set-mark
@item @code{vi-set-mark} (unbound) (m) (unbound)
Set the specified mark at the cursor position.

@tindex set-mark-command
@item @code{set-mark-command} (^@@) (unbound) (unbound)
Set the mark at the cursor position.

@tindex spell-word
@item @code{spell-word} (ESC-$ ESC-S ESC-s) (unbound) (unbound)
Attempt spelling correction on the current word.

@tindex undefined-key
@item @code{undefined-key}
This command is executed when a key sequence that is not bound to any
command is typed.  By default it beeps.

@tindex undo
@item @code{undo} (^_ ^Xu ^X^U) (unbound) (unbound)
Incrementally undo the last text modification.

@tindex redo
@item @code{redo}
Incrementally redo undone text modifications.

@tindex vi-undo-change
@item @code{vi-undo-change} (unbound) (u) (unbound)
Undo the last text modification.
If repeated, redo the modification.

@tindex what-cursor-position
@item @code{what-cursor-position} (^X=) (unbound) (unbound)
Print the character under the cursor, its code as an octal, decimal and
hexadecimal number, the current cursor position within the buffer and the
column of the cursor in the current line.

@tindex where-is
@item @code{where-is}
Read the name of an editor command and and print the listing of key
sequences that invoke the specified command.

@tindex which-command
@item @code{which-command} (ESC-?) (unbound) (unbound)
Push the buffer onto the buffer stack, and execute the
command `@code{which-command} @var{cmd}'. where @var{cmd} is the current
command.  @code{which-command} is normally aliased to @var{whence}.

@tindex vi-digit-or-beginning-of-line
@item @code{vi-digit-or-beginning-of-line} (unbound) (0) (unbound)
If the last command executed was a digit as part of an argument,
continue the argument.  Otherwise, execute vi-beginning-of-line.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/compctl.yo
@node Programmable Completion, Zsh Modules, Zsh Line Editor, Top

@chapter Programmable Completion
@noindent
@cindex completion, programmable
@cindex completion, controlling
@findex compctl

@section Description
@noindent
@table @asis
@item @code{compctl} [ @code{-CDT} ] @var{options} [ @var{command} ... ]
@item @code{compctl} [ @code{-CDT} ] @var{options} [ @code{-x} @var{pattern} @var{options} @code{-} ... @code{--} ] [ @code{+} @var{options} [ @code{-x} ... @code{--} ] ... [@code{+}] ] [ @var{command} ... ]
@item @code{compctl} @code{-L} [ @code{-CDT} ] [ @var{command} ... ]
@item @code{compctl} @code{+} @var{command} ...
@end table

@noindent
Control the editor's completion behavior according to the supplied set
of @var{options}.  Various editing commands, notably
@code{expand-or-complete-word}, usually bound to tab, will
attempt to complete a word typed by the user, while others, notably
@code{delete-char-or-list}, usually bound to ^D in EMACS editing
mode, list the possibilities; @code{compctl} controls what those
possibilities are.  They may for example be filenames (the most common
case, and hence the default), shell variables, or words from a
user-specified list.
@menu
* Command Flags::
* Option Flags::
* Alternative Completion::
* Extended Completion::
* Example::
@end menu
@node Command Flags, Option Flags, , Programmable Completion

@section Command Flags
@noindent
Completion of the arguments of a command may be different for each
command or may use the default.  The behavior when completing the
command word itself may also be separately specified.  These
correspond to the following flags and arguments, all of which (except
for @code{-L}) may be combined with any combination of the
@var{options} described subsequently in @ref{Option Flags}:

@noindent
@table @asis
@item @var{command} ...
controls completion for the named commands, which must be listed last
on the command line.  If completion is attempted for a command with a
pathname containing slashes and no completion definition is found, the
search is retried with the last pathname component.  Note that aliases
are expanded before the command name is determined unless the
@code{COMPLETE_ALIASES} option is set.  Commands should not be combined
with the @code{-C}, @code{-D} or @code{-T} flags.

@item @code{-C}
controls completion when the command word itself is being completed.
If no @code{compctl -C} command has been issued,  the names of any
executable command (whether in the path or specific to the shell, such
as aliases or functions) are completed.

@item @code{-D}
controls default completion behavior for the arguments of commands not
assigned any special behavior.  If no @code{compctl -D} command has
been issued, filenames are completed.

@item @code{-T}
supplies completion flags to be used before any other processing is
done, even those given to specific commands with other compctl
definitions.  This is only useful when combined with extended
completion (the @code{-x} flag, see @ref{Extended Completion} below).
Using this flag you can define default behavior
which will apply to all commands without exception, or you can alter
the standard behavior for all commands.  For example, if your access
to the user database is too slow and/or it contains too many users (so
that completion after `@code{~}' is too slow to be usable), you can use

@noindent
@code{compctl -Tx  'C[0,*/*]' -f - 's[~]' -k friends -S/}

@noindent
to complete the strings in the array @code{friends} after a `@code{~}'.
The first argument is necessary so that this form of ~-completion is
not tried after the directory name is finished.

@item @code{-L}
lists the existing completion behavior in a manner suitable for
putting into a start-up script; the existing behavior is not changed.
Any combination of the above forms may be specified, otherwise all
defined completions are listed.  Any other flags supplied
are ignored.

@item @emph{no argument}
If no argument is given, @code{compctl} lists all defined completions
in an abbreviated form;  with a list of @var{options}, all completions
with those flags set (not counting extended completion) are listed.

@end table

@noindent
If the @code{+} flag is alone and followed immediately by the @var{command}
list, the completion behavior for all the commands in the list is reset to
the default.  In other words, completion will subsequently use the
options specified by the @code{-D} flag.
@node Option Flags, Alternative Completion, Command Flags, Programmable Completion

@section Option Flags
@noindent
@table @asis
@item [ @code{-fcFBdeaRGovNAIOPZEnbjrzu/} ]
@item [ @code{-k} @var{array} ] [ @code{-g} @var{globstring} ] [ @code{-s} @var{subststring} ]
@item [ @code{-K} @var{function} ] [ @code{-H} @var{num pattern} ]
@item [ @code{-Q} ] [ @code{-P} @var{prefix} ] [ @code{-S} @var{suffix} ]
@item [ @code{-W} @var{file-prefix} ]
@item [ @code{-q} ] [ @code{-X} @var{explanation} ] [ @code{-Y} @var{explanation} ]
@item [ @code{-y} @var{func-or-var} ] [ @code{-l} @var{cmd} ] [ @code{-U} ]
@end table

@noindent
The remaining @var{options} specify the type of command arguments
to look for during completion.  Any combination of these flags may be
specified; the result is a sorted list of all the possibilities.  The
options are as follows.
@menu
* Simple Flags::
* Flags with Arguments::
* Control Flags::
@end menu
@node Simple Flags, Flags with Arguments, , Option Flags

@subsection Simple Flags
@noindent
These produce completion lists made up by the shell itself:

@noindent
@table @asis
@item @code{-f}
Filenames and filesystem paths.

@item @code{-/}
Just filesystem paths.

@item @code{-c}
Command names, including aliases, shell functions, builtins
and reserved words.

@item @code{-F}
Function names.

@item @code{-B}
Names of builtin commands.

@item @code{-m}
Names of external commands.

@item @code{-w}
Reserved words.

@item @code{-a}
Alias names.

@item @code{-R}
Names of regular (non-global) aliases.

@item @code{-G}
Names of global aliases.

@item @code{-d}
This can be combined with @code{-F}, @code{-B}, @code{-w},
@code{-a}, @code{-R} and @code{-G} to get names of disabled
functions, builtins, reserved words or aliases.

@item @code{-e}
This option (to show enabled commands) is in effect by default, but
may be combined with @code{-d}; @code{-de} in combination with
@code{-F}, @code{-B}, @code{-w}, @code{-a}, @code{-R} and @code{-G}
will complete names of functions, builtins, reserved words or aliases
whether or not they are disabled.

@item @code{-o}
Names of shell options (see
@ref{Options}).

@item @code{-v}
Names of any variable defined in the shell.

@item @code{-N}
Names of scalar (non-array) parameters.

@item @code{-A}
Array names.

@item @code{-I}
Names of integer variables.

@item @code{-O}
Names of read-only variables.

@item @code{-p}
Names of parameters used by the shell (including special parameters).

@item @code{-Z}
Names of shell special parameters.

@item @code{-E}
Names of environment variables.

@item @code{-n}
Named directories.

@item @code{-b}
Key binding names.

@item @code{-j}
Job names:  the first word of the job leader's command line.  This is useful
with the @code{kill} builtin.

@item @code{-r}
Names of running jobs.

@item @code{-z}
Names of suspended jobs.

@item @code{-u}
User names.

@end table
@node Flags with Arguments, Control Flags, Simple Flags, Option Flags

@subsection Flags with Arguments
@noindent
These have user supplied arguments to determine how the list of
completions is to be made up:

@noindent
@table @asis
@item @code{-k} @var{array}
Names taken from the elements of @code{$}@var{array} (note that the `@code{$}'
does not appear on the command line).
Alternatively, the argument @var{array} itself may be a set
of space- or comma-separated values in parentheses, in which any
delimiter may be escaped with a backslash; in this case the argument
should be quoted.  For example,

@noindent
@code{compctl -k "(cputime filesize datasize stacksize@*
    coredumpsize resident descriptors)" limit}

@item @code{-g} @var{globstring}
The @var{globstring} is expanded using filename globbing; it should be
quoted to protect it from immediate expansion. The resulting
filenames are taken as the possible completions.  Use `@code{*(/)}' instead of
`@code{*/}' for directories.  The @code{fignore} special parameter is not
applied to the resulting files.  More than one pattern may be given
separated by blanks. (Note that brace expansion is @emph{not} part of
globbing.  Use the syntax `@code{(either|or)}' to match alternatives.)

@item @code{-s} @var{subststring}
The @var{subststring} is split into words and these words are than
expanded using all shell expansion mechanisms (see
@ref{Expansion}).  The resulting words are taken as possible
completions.  The @code{fignore} special parameter is not applied to the
resulting files.  Note that @code{-g} is faster for filenames.

@item @code{-K} @var{function}
Call the given function to get the completions.  The function is
passed two arguments: the prefix and the suffix of the word on which
completion is to be attempted, in other words those characters before
the cursor position, and those from the cursor position onwards.  The
whole command line can be accessed with the @code{-c} and @code{-l} flags
of the @code{read} builtin.  The
function should set the variable @code{reply} to an array containing
the completions (one completion per element); note that @code{reply}
should not be made local to the function.  From such a function the
command line can be accessed with the @code{-c} and @code{-l} flags to
the @code{read} builtin.  For example,

@noindent
@code{function whoson @{ reply=(`users`); @}@*
compctl -K whoson talk}

@noindent
completes only logged-on users after `@code{talk}'.  Note that `@code{whoson}' must
return an array, so `@code{reply=`users`}' would be incorrect.

@item @code{-H} @var{num pattern}
The possible completions are taken from the last @var{num} history
lines.  Only words matching @var{pattern} are taken.  If @var{num} is
zero or negative the whole history is searched and if @var{pattern} is
the empty string all words are taken (as with `@code{*}').  A typical
use is

@noindent
@code{compctl -D -f + -H 0 @value{dsq}}

@noindent
which forces completion to look back in the history list for a word if
no filename matches.

@end table
@node Control Flags, , Flags with Arguments, Option Flags

@subsection Control Flags
@noindent
These do not directly specify types of name to be completed, but
manipulate the options that do:

@noindent
@table @asis
@item @code{-Q}
This instructs the shell not to quote any metacharacters in the possible
completions.  Normally the results of a completion are inserted into
the command line with any metacharacters quoted so that they are
interpreted as normal characters.  This is appropriate for filenames
and ordinary strings.  However, for special effects, such as inserting
a backquoted expression from a completion array (@code{-k}) so that
the expression will not be evaluated until the complete line is
executed, this option must be used.

@item @code{-P} @var{prefix}
The @var{prefix} is inserted just before the completed string; any
initial part already typed will be completed and the whole @var{prefix}
ignored for completion purposes.  For example,

@noindent
@code{compctl -j -P "%" kill}

@noindent
inserts a `%' after the kill command and then completes job names.

@item @code{-S} @var{suffix}
When a completion is found the @var{suffix} is inserted after
the completed string.  In the case of menu completion the suffix is
inserted immediately, but it is still possible to cycle through the
list of completions by repeatedly hitting the same key.

@item @code{-W} @var{file-prefix}
With directory @var{file-prefix}:  for command, file, directory and
globbing completion (options @code{-c}, @code{-f}, @code{-/}, @code{-g}), the file
prefix is implicitly added in front of the completion.  For example,

@noindent
@code{compctl -/ -W ~/Mail maildirs}

@noindent
completes any subdirectories to any depth beneath the directory
@code{~/Mail}, although that prefix does not appear on the command line.

@item @code{-q}
If used with a suffix as specified by the @code{-S} option, this
causes the suffix to be removed if the next character typed is a blank
or does not insert anything (the same rule as used for the
@code{AUTO_REMOVE_SLASH} option).  The option is most useful for list
separators (comma, colon, etc.).

@item @code{-l} @var{cmd}
This option cannot be combined with any other.  It restricts the range
of command line words that are considered to be arguments.  If
combined with one of the extended completion patterns `@code{p[}...@code{]}',
`@code{r[}...@code{]}', or `@code{R[}...@code{]}'  (see @ref{Extended Completion}
below) the range is restricted to the range of arguments
specified in the brackets.  Completion is then performed as if these
had been given as arguments to the @var{cmd} supplied with the
option. If the @var{cmd} string is empty the first word in the range
is instead taken as the command name, and command name completion
performed on the first word in the range.  For example,

@noindent
@code{compctl -x 'r[-exec,;]' -l @value{dsq} -- find}

@noindent
completes arguments between `@code{-exec}' and the following `@code{;}' (or the end
of the command line if there is no such string) as if they were
a separate command line.

@item @code{-U}
Use the whole list of possible completions, whether or not they
actually match the word on the command line.  The word typed so far
will be deleted.  This is most useful with a function (given by the
@code{-K} option) which can examine the word components passed to it
(or via the @code{read} builtin's @code{-c} and @code{-l} flags) and
use its own criteria to decide what matches.  If there is no
completion, the original word is retained.

@item @code{-y} @var{func-or-var}
The list provided by @var{func-or-var} is displayed instead of the list
of completions whenever a listing is required; the actual completions
to be inserted are not affected.  It can be provided in two
ways. Firstly, if @var{func-or-var} begins with a @code{$} it defines a
variable, or if it begins with a left parenthesis a literal
array, which contains the list.  A variable may have been set by a
call to a function using the @code{-K} option.  Otherwise it contains the
name of a function which will be executed to create the list.  The
function will be passed as an argument list all matching completions,
including prefixes and suffixes expanded in full, and should set the
array @var{reply} to the result.  In both cases, the display list will
only be retrieved after a complete list of matches has been created.

@noindent
Note that the returned list does not have to correspond, even in
length, to the original set of matches, and may be passed as a scalar
instead of an array.  No special formatting of characters is
performed on the output in this case; in particular, newlines are
printed literally and if they appear output in columns is suppressed.

@item @code{-X} @var{explanation}
Print @var{explanation} when trying completion on the current set of
options. A `@code{%n}' in this string is replaced by the number of matches.
The explanation only appears if completion was tried and there was
no unique match, or when listing completions.

@item @code{-Y} @var{explanation}
Identical to @code{-X}, except that the @var{explanation} first undergoes
expansion following the usual rules for strings in double quotes.
The expansion will be carried out after any functions are called for
the @code{-K} or @code{-y} options, allowing them to set variables.

@end table
@node Alternative Completion, Extended Completion, Option Flags, Programmable Completion

@section Alternative Completion
@noindent
@table @asis
@item @code{compctl} [ @code{-CDT} ] @var{options} @code{+} @var{options} [ @code{+} ... ] [ @code{+} ] @var{command} ...
@end table

@noindent
The form with `@code{+}' specifies alternative options. Completion is
tried with the options before the first `@code{+}'. If this produces no
matches completion is tried with the flags after the `@code{+}' and so on. If
there are no flags after the last `@code{+}' and a match has not been found
up to that point, default completion is tried.
@node Extended Completion, Example, Alternative Completion, Programmable Completion

@section Extended Completion
@noindent
@table @asis
@item @code{compctl} [ @code{-CDT} ] @var{options} @code{-x} @var{pattern} @var{options} @code{-} ... @code{--} [ @var{command} ... ]
@item @code{compctl} [ @code{-CDT} ] @var{options} [ @code{-x} @var{pattern} @var{options} @code{-} ... @code{--} ] [ @code{+} @var{options} [ @code{-x} ... @code{--} ] ... [@code{+}] ] [ @var{command} ... ]
@end table

@noindent
The form with `@code{-x}' specifies extended completion for the
commands given; as shown, it may be combined with alternative
completion using `@code{+}'.  Each @var{pattern} is examined in turn; when a
match is found, the corresponding @var{options}, as described in
@ref{Option Flags} above, are used to generate possible
completions.  If no @var{pattern} matches, the @var{options} given
before the @code{-x} are used.

@noindent
Note that each pattern should be supplied as a single argument and
should be quoted to prevent expansion of metacharacters by the
shell.

@noindent
A @var{pattern} is built of sub-patterns separated by commas; it
matches if at least one of these sub-patterns matches (they are
`or'ed). These sub-patterns are in turn composed of other
sub-patterns separated by white spaces which match if all of the
sub-patterns match (they are `and'ed).  An element of the
sub-patterns is of the form `@var{c}@code{[}...@code{][}...@code{]}', where the pairs of
brackets may be repeated as often as necessary, and matches if any of
the sets of brackets match (an `or').  The example below makes this
clearer.

@noindent
The elements may be any of the following:

@noindent
@table @asis
@item @code{s[}@var{string}@code{]}...
Matches if the current word on the command line starts with
one of the strings given in brackets.  The @var{string} is not removed
and is not part of the completion.

@item @code{S[}@var{string}@code{]}...
Like @code{s[}@var{string}@code{]} except that the @var{string} is part of the
completion.

@item @code{p[}@var{from}@code{,}@var{to}@code{]}...
Matches if the number of the current word is between one of
the @var{from} and @var{to} pairs inclusive. The comma and @var{to}
are optional; @var{to} defaults to the same value as @var{from}.  The
numbers may be negative: @code{-}@var{n} refers to the @var{n}'th last word
on the line.

@item @code{c[}@var{offset}@code{,}@var{string}@code{]}...
Matches if the @var{string} matches the word offset by
@var{offset} from the current word position.  Usually @var{offset}
will be negative.

@item @code{C[}@var{offset}@code{,}@var{pattern}@code{]}...
Like @code{c} but using pattern matching instead.

@item @code{w[}@var{index}@code{,}@var{string}@code{]}...
Matches if the word in position @var{index} is equal
to the corresponding @var{string}.  Note that the word count is made
after any alias expansion.

@item @code{W[}@var{index}@code{,}@var{pattern}@code{]}...
Like @code{w} but using pattern matching instead.

@item @code{n[}@var{index}@code{,}@var{string}@code{]}...
Matches if the current word contains @var{string}.  Anything up to and
including the @var{index}th occurrence of this string will not be
considered part of the completion, but the rest will.  @var{index} may
be negative to count from the end: in most cases, @var{index} will be
1 or -1.  For example,

@noindent
@code{compctl -s '`users`' -x 'n[1,@@]' -k hosts -- talk}

@noindent
will usually complete usernames, but if you insert an @code{@@} after the
name, names from the array @var{hosts} (assumed to contain hostnames,
though you must make the array yourself) will be completed.  Other
commands such as @code{rcp} can be handled similarly.

@item @code{N[}@var{index}@code{,}@var{string}@code{]}...
Like @code{n} except that the string will be
taken as a character class.  Anything up to and including the
@var{index}th occurrence of any of the characters in @var{string}
will not be considered part of the completion.

@item @code{m[}@var{min}@code{,}@var{max}@code{]}...
Matches if the total number of words lies between @var{min} and
@var{max} inclusive.

@item @code{r[}@var{str1}@code{,}@var{str2}@code{]}...
Matches if the cursor is after a word with prefix @var{str1}.  If there
is also a word with prefix @var{str2} on the command line it matches
only if the cursor is before this word.

@item @code{R[}@var{str1}@code{,}@var{str2}@code{]}...
Like @code{r} but using pattern matching instead.

@end table
@node Example, , Extended Completion, Programmable Completion

@section Example
@noindent
@code{compctl -u -x 's[@code{+}] c[-1,-f],s[-f+]' -g '~/Mail/*(:t)' \ @*
    - 's[-f],c[-1,-f]' -f -- mail}

@noindent
This is to be interpreted as follows:

@noindent
If the current command is @code{mail}, then

@noindent

if ((the current word begins with @code{+} and the previous word is @code{-f})
or (the current word begins with @code{-f+})), then complete the
non-directory part (the `@code{:t}' glob modifier) of files in the directory
@code{~/Mail}; else

@noindent
if the current word begins with @code{-f} or the previous word was @code{-f}, then
complete any file; else

@noindent
complete user names.

@noindent
@c (avoiding a yodl bug)
@c Yodl file: Zsh/modules.yo
@node Zsh Modules, , Programmable Completion, Top

@chapter Zsh Modules
@noindent
@cindex modules

@section Description
@noindent
Some optional parts of zsh are in modules, separate from the core
of the shell.  Each of these modules may be linked in to the
shell at build time,
or can be dynamically linked while the shell is running
if the installation supports this feature.  The modules available are:

@noindent
@table @asis
@item @code{cap}
Builtins for manipulating POSIX.1e (POSIX.6) capability (privilege) sets.

@item @code{clone}
A builtin that can clone a running shell onto another terminal.

@item @code{comp1}
Base of the completion system.  Used by the @code{compctl} and @code{zle} modules.

@item @code{compctl}
The @code{compctl} builtin for controlling completion.

@item @code{deltochar}
A ZLE function duplicating EMACS' @code{zap-to-char}.

@item @code{example}
An example of how to write a module.

@item @code{files}
Some basic file manipulation commands as builtins.

@item @code{sched}
A builtin that provides a timed execution facility within the shell.

@item @code{stat}
A builtin command interface to the @code{stat} system call.

@item @code{zle}
The Zsh Line Editor, including the @code{bindkey} and @code{vared} builtins.

@end table
@menu
* The cap Module::
* The clone Module::
* The comp1 Module::
* The compctl Module::
* The deltochar Module::
* The example Module::
* The files Module::
* The sched Module::
* The stat Module::
* The zle Module::
@end menu
@c Yodl file: Zsh/mod_cap.yo
@node The cap Module, The clone Module, , Zsh Modules

@section The cap Module
@noindent
The @code{cap} module is used for manipulating POSIX.1e (POSIX.6) capability
sets.  If the operating system does not support this interface, the
builtins defined by this module will do nothing.
The builtins in this module are:

@noindent
@table @asis
@findex cap
@cindex capabilities, setting
@item @code{cap} [ @var{capabilities} ]
Change the shell's process capability sets to the specified @var{capabilities},
otherwise display the shell's current capabilities.

@findex getcap
@cindex capabilities, getting from files
@item @code{getcap} @var{filename} ...
This is a built-in implementation of the POSIX standard utility.  It displays
the capability sets on each specified @var{filename}.

@findex setcap
@cindex capabilities, setting on files
@item @code{setcap} @var{capabilities} @var{filename} ...
This is a built-in implementation of the POSIX standard utility.  It sets
the capability sets on each specified @var{filename} to the specified
@var{capabilities}.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/mod_clone.yo
@node The clone Module, The comp1 Module, The cap Module, Zsh Modules

@section The clone Module
@noindent
The @code{clone} module makes available one builtin command:

@noindent
@table @asis
@findex clone
@cindex shell, cloning
@cindex cloning the shell
@cindex terminal
@item @code{clone} @var{tty}
Creates a forked instance of the current shell, attached to the specified
@var{tty}.  In the new shell, the @code{PID}, @code{PPID} and @code{TTY} special
parameters are changed appropriately.  @code{$!} is set to zero in the new
shell, and to the new shell's PID in the original shell.

@noindent
The return value of the builtin is zero in both shells if successful,
and non-zero on error.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/mod_comp1.yo
@node The comp1 Module, The compctl Module, The clone Module, Zsh Modules

@section The comp1 Module
@noindent
The @code{comp1} module does nothing that is visible to the user.
Its purpose is to provide the internal basis of the programmable
completion mechanism.

@noindent
This module must be loaded before any module that
provides a means of controlling completion (such as the @code{compctl}
module), or that uses completions (such as the @code{zle} module).
This is done automatically for modules distributed with zsh, and
for other modules can be effected by the use of @code{zmodload -d}.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/mod_compctl.yo
@node The compctl Module, The deltochar Module, The comp1 Module, Zsh Modules

@section The compctl Module
@noindent
The @code{compctl} module makes available one builtin command, @code{compctl},
which is the standard way to control completions for ZLE.  See
@ref{Programmable Completion}.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/mod_deltochar.yo
@node The deltochar Module, The example Module, The compctl Module, Zsh Modules

@section The deltochar Module
@noindent
The @code{deltochar} module makes available one ZLE function:

@noindent
@table @asis
@tindex delete-to-char
@item @code{delete-to-char}
Read a character from the keyboard, and
delete from the cursor position up to and including the next
(or, with repeat count @var{n}, the @var{n}th) instance of that character.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/mod_example.yo
@node The example Module, The files Module, The deltochar Module, Zsh Modules

@section The example Module
@noindent
The @code{example} module makes available one builtin command:

@noindent
@table @asis
@findex example
@cindex modules, example
@cindex modules, writing
@cindex writing modules
@item @code{example} [ @code{-flags} ] [ @var{args} ... ]
Displays the flags and arguments it is invoked with.

@end table

@noindent
The purpose of the module is to serve as an example of how to write a
module.
@c (avoiding a yodl bug)
@c Yodl file: Zsh/mod_files.yo
@node The files Module, The sched Module, The example Module, Zsh Modules

@section The files Module
@noindent
@cindex files, manipulating
The @code{files} module makes some standard commands available as builtins:

@noindent
@table @asis
@findex ln
@item @code{ln} [ @code{-dfis} ] @var{filename} @var{dest}
@itemx @code{ln} [ @code{-dfis} ] @var{filename} ... @var{dir}
Creates hard (or, with @code{-s}, symbolic) links.  In the first form, the
specified @var{dest}ination is created, as a link to the specified
@var{filename}.  In the second form, each of the @var{filename}s is
taken in turn, and linked to a pathname in the specified @var{dir}ectory
that has the same last pathname component.

@noindent
Normally, @code{ln} will not attempt to create hard links to
directories.  This check can be overridden using the @code{-d} option.
Typically only the super-user can actually succeed in creating
hard links to directories.
This does not apply to symbolic links in any case.

@noindent
By default, existing files cannot be replaced by links.
The @code{-i} option causes the user to be queried about replacing
existing files.  The @code{-f} option causes existing files to be
silently deleted, without querying.  @code{-f} takes precedence.

@findex mkdir
@item @code{mkdir} [ @code{-p} ] [ @code{-m} @var{mode} ] @var{dir} ...
Creates directories.  With the @code{-p} option, non-existing parent
directories are first created if necessary, and there will be
no complaint if the directory already exists.
The @code{-m} option can be used to specify (in octal) a set of file permissions
for the created directories, otherwise mode 777 modified by the current
@code{umask} (see man page umask(2)) is used.

@findex mv
@item @code{mv} [ @code{-fi} ] @var{filename} @var{dest}
@itemx @code{mv} [ @code{-fi} ] @var{filename} ... @var{dir}
Moves files.  In the first form, the specified @var{filename} is moved
to the specified @var{dest}ination.  In the second form, each of the
@var{filename}s is
taken in turn, and moved to a pathname in the specified @var{dir}ectory
that has the same last pathname component.

@noindent
By default, the user will be queried before replacing any file
that the user cannot write to, but writable files will be silently
removed.
The @code{-i} option causes the user to be queried about replacing
any existing files.  The @code{-f} option causes any existing files to be
silently deleted, without querying.  @code{-f} takes precedence.

@noindent
Note that this @code{mv} will not move files across devices.
Historical versions of @code{mv}, when actual renaming is impossible,
fall back on copying and removing files; if this behaviour is desired,
use @code{cp} and @code{rm} manually.  This may change in a future version.

@findex rm
@item @code{rm} [ @code{-dfirs} ] @var{filename} ...
Removes files and directories specified.

@noindent
Normally, @code{rm} will not remove directories (except with the @code{-r}
option).  The @code{-d} option causes @code{rm} to try removing directories
with @code{unlink} (see man page unlink(2)), the same method used for files.
Typically only the super-user can actually succeed in unlinking
directories in this way.
@code{-d} takes precedence over @code{-r}.

@noindent
By default, the user will be queried before removing any file
that the user cannot write to, but writable files will be silently
removed.
The @code{-i} option causes the user to be queried about removing
any files.  The @code{-f} option causes files to be
silently deleted, without querying, and suppresses all error indications.
@code{-f} takes precedence.

@noindent
The @code{-r} option causes @code{rm} to recursively descend into directories,
deleting all files in the directory before removing the directory with
the @code{rmdir} system call (see man page rmdir(2)).

@noindent
The @code{-s} option is a zsh extension to @code{rm} functionality.  It enables
paranoid behaviour, intended to avoid common security problems involving
a root-run @code{rm} being tricked into removing files other than the ones
intended.  It will refuse to follow symbolic links, so that (for example)
``@code{rm /tmp/foo/passwd}@value{dsq} can't accidentally remove @code{/etc/passwd}
if @code{/tmp/foo} happens to be a link to @code{/etc}.  It will also check
where it is after leaving directories, so that a recursive removal of
a deep directory tree can't end up recursively removing @code{/usr} as
a result of directories being moved up the tree.

@findex rmdir
@item @code{rmdir} @var{dir} ...
Removes empty directories specified.

@findex sync
@item @code{sync}
Calls the system call of the same name (see man page sync(2)), which
flushes dirty buffers to disk.  It might return before the I/O has
actually been completed.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/mod_sched.yo
@node The sched Module, The stat Module, The files Module, Zsh Modules

@section The sched Module
@noindent
The @code{sched} module makes available one builtin command:

@noindent
@table @asis
@findex sched
@cindex timed execution
@cindex execution, timed
@item @code{sched} [@code{+}]@var{hh}@code{:}@var{mm} @var{command} ...
@itemx @code{sched} [ @code{-}@var{item} ]
Make an entry in the scheduled list of commands to execute.
The time may be specified in either absolute or relative time.
With no arguments, prints the list of scheduled commands.
With the argument `@code{-}@var{item}', removes the given item
from the list.

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/mod_stat.yo
@node The stat Module, The zle Module, The sched Module, Zsh Modules

@section The stat Module
@noindent
The @code{stat} module makes available one builtin command:

@noindent
@table @asis
@findex stat
@cindex files, listing
@cindex files, examining
@item @code{stat} [ @code{-gnNlLtTrs} ] [ @code{-f} @var{fd} ] [ @code{-A} @var{array} ] [ @code{-F} @var{fmt} ] [ @code{+}@var{element} ] [ @var{file} ... ]
The command acts as a front end to the @code{stat} system call (see
man page stat(2)).
If the @code{stat} call fails, the appropriate system error message
printed and status 1 is returned.
The fields of @code{struct stat} give information about
the files provided as arguments to the command.  In addition to those
available from the @code{stat} call, an extra element `@code{link}' is provided.
These elements are:

@noindent
@table @asis
@item @code{device}
The number of the device on which the file resides.

@item @code{inode}
The unique number of the file on this device (`@emph{inode}' number).

@item @code{mode}
The mode of the file; that is, the file's type and access permissions.
With the @code{-s} option, this will
be returned as a string corresponding to the first column in the
display of the @code{ls -l} command.

@item @code{nlink}
The number of hard links to the file.

@item @code{uid}
The user ID of the owner of the file.  With the @code{-s}
option, this is displayed as a user name.

@item @code{gid}
The group ID of the file.  With the @code{-s} option, this
is displayed as a group name.

@item @code{rdev}
The raw device number.  This is only useful for special devices.

@item @code{size}
The size of the file in bytes.

@item @code{atime}
@itemx @code{mtime}
@itemx @code{ctime}
The last access, modification and inode change times
of the file, respectively, as the number of seconds since
midnight GMT on 1st January, 1970.  With the @code{-s} option,
these are printed as strings for the local time zone; the format
can be altered with the @code{-F} option, and with the @code{-g}
option the times are in GMT.

@item @code{blksize}
The number of bytes in one allocation block on the
device on which the file resides.

@item @code{block}
The number of disk blocks used by the file.

@item @code{link}
If the file is a link and the @code{-L} option is in
effect, this contains the name of the file linked to, otherwise
it is empty.  Note that if this element is selected (``@code{stat +link}@value{dsq})
then the @code{-L} option is automatically used.

@end table

@noindent
A particular element may be selected by including its name
preceded by a `@code{+}' in the option list; only one element is allowed.
The element may be shortened to any unique set of leading
characters.  Otherwise, all elements will be shown for all files.

@noindent
Options:

@noindent
@table @asis
@item @code{-A} @var{array}
Instead of displaying the results on standard
output, assign them to an @var{array}, one @code{struct stat} element per array
element for each file in order.  In this case neither the name
of the element nor the name of the files is provided unless the
@code{-t} or @code{-n} options are provided, respectively.  In the
former case the element name appears as a prefix to the
appropriate array element and in the latter case the file name
appears as a separate array element preceding all the others.
Other formatting options are respected.

@item @code{-f} @var{fd}
Use the file on file descriptor @var{fd} instead of
named files; no list of file names is allowed in this case.

@item @code{-F} @var{fmt}
Supplies a @code{strftime} (see man page strftime(3)) string for the
formatting of the time elements.  The @code{-s} option is implied.

@item @code{-g}
Show the time elements in the GMT time zone.  The
@code{-s} option is implied.

@item @code{-l}
List the names of the type elements (to standard
output or an array as appropriate) and return immediately;
options other than @code{-A} and arguments are ignored.

@item @code{-L}
Perform an @code{lstat} (see man page lstat(2)) rather than a @code{stat}
system call.  In this case, if the file is a link, information
about the link itself rather than the target file is returned.
This option is required to make the @code{link} element useful.

@item @code{-n}
Always show the names of files.  Usually these are
only shown when output is to standard output and there is more
than one file in the list.

@item @code{-N}
Never show the names of files.

@item @code{-r}
Print raw data (the default format) alongside string
data (the @code{-s} format); the string data appears in parentheses
after the raw data.

@item @code{-s}
Print @code{mode}, @code{uid}, @code{gid} and the three time
elements as strings instead of numbers.  In each case the format
is like that of @code{ls -l}.

@item @code{-t}
Always show the type names for the elements of
@code{struct stat}.  Usually these are only shown when output is to
standard output and no individual element has been selected.

@item @code{-T}
Never show the type names of the @code{struct stat} elements.

@end table

@end table
@c (avoiding a yodl bug)
@c Yodl file: Zsh/mod_zle.yo
@node The zle Module, , The stat Module, Zsh Modules

@section The zle Module
@noindent
The @code{zle} module contains the Zsh Line Editor.  See
@ref{Zsh Line Editor}.  It also contains three related builtin commands:

@noindent
@table @asis
@findex bindkey
@cindex keys, rebinding
@cindex rebinding keys
@cindex keys, binding
@cindex binding keys
@cindex keymaps
@item @code{bindkey} [ @var{options} ] @code{-l}
@itemx @code{bindkey} [ @var{options} ] @code{-d}
@itemx @code{bindkey} [ @var{options} ] @code{-D} @var{keymap} ...
@itemx @code{bindkey} [ @var{options} ] @code{-A} @var{old-keymap new-keymap}
@itemx @code{bindkey} [ @var{options} ] @code{-N} @var{new-keymap} [ @var{old-keymap} ]
@itemx @code{bindkey} [ @var{options} ] @code{-m}
@itemx @code{bindkey} [ @var{options} ] @code{-r} @var{in-string} ...
@itemx @code{bindkey} [ @var{options} ] @code{-s} @var{in-string out-string} ...
@itemx @code{bindkey} [ @var{options} ] @var{in-string command} ...
@itemx @code{bindkey} [ @var{options} ] [ @var{in-string} ]
@code{bindkey}'s options can be divided into three categories: keymap selection,
operation selection, and others.  The keymap selection options are:

@noindent
@table @asis
@item @code{-e}
Selects keymap `@code{emacs}', and also links it to `@code{main}'.

@item @code{-v}
Selects keymap `@code{viins}', and also links it to `@code{main}'.

@item @code{-a}
Selects keymap `@code{vicmd}'.

@item @code{-M}
The first non-option argument is used as a keymap name,
and does not otherwise count as an argument.

@end table

@noindent
Some operations do not permit a keymap to be selected.
If a keymap selection is required and none of the options above are used, the
`@code{main}' keymap is used.  These operations do not permit a keymap to be
selected:

@noindent
@table @asis
@item @code{-l}
List all existing keymap names.  If the @code{-L}
option is used, list in the form of @code{bindkey}
commands to create the keymaps.

@item @code{-d}
Delete all existing keymaps and reset to the default state.

@item @code{-D} @var{keymap} ...
Delete the named @var{keymap}s.

@item @code{-A} @var{old-keymap new-keymap}
Make the @var{new-keymap} name an alias for @var{old-keymap}, so that
both names refer to the same keymap.  The names have equal standing;
if either is deleted, the other remains.  If there is already a keymap
with the @var{new-keymap} name, it is deleted.

@item @code{-N} @var{new-keymap} [ @var{old-keymap} ]
Create a new keymap, named @var{new-keymap}.  If a keymap already has that
name, it is deleted.  If an @var{old-keymap} name is given, the new keymap
is initialised to be a duplicate of it, otherwise the new keymap will
be empty.

@end table

@noindent
The following operations require a keymap to be selected:

@noindent
@table @asis
@item @code{-m}
Add the built-in set of meta-key bindings to the selected keymap.
Only keys that are unbound or bound to @code{self-insert} are affected.

@item @code{-r} @var{in-string} ...
Unbind the specified @var{in-string}s in the selected keymap.
This is exactly equivalent to binding the strings to @code{undefined-key}.

@item @code{-s} @var{in-string out-string} ...
Bind each @var{in-string} to each @var{out-string}.
When @var{in-string} is typed, @var{out-string} will be
pushed back and treated as input to the line editor.

@item @var{in-string command} ...
Bind each @var{in-string} to each @var{command}.

@item [ @var{in-string} ]
List key bindings.  If an @var{in-string} is specified, the binding of
that string in the selected keymap is displayed.  Otherwise, all key
bindings in the selected keymap are displayed.  As an exception,
if the @code{-e} or @code{-v} options are used alone, the keymap is @emph{not}
displayed - the implicit linking of keymaps is the only thing that happens.

@end table

@noindent
In the binding operations, if the @code{-R} option is used, the @var{in-string}s
are interpreted as ranges, instead of plain strings.  A valid range
consists of two characters, with an optional `@code{-}'
between them.  All characters between the two specified, inclusive,
are bound as specified.

@noindent
For either @var{in-string} or @var{out-string}, the following
escape sequences are recognised:

@noindent
@table @asis
@item @code{\a}
bell character
@item @code{\b}
backspace
@item @code{\e}, @code{\E}
escape
@item @code{\f}
form feed
@item @code{\n}
linefeed (newline)
@item @code{\r}
carriage return
@item @code{\t}
horizontal tab
@item @code{\v}
vertical tab
@item @code{\}@var{NNN}
character code in octal
@item @code{\x}@var{NN}
character code in hexadecimal
@item @code{\M}[@code{-}]@var{X}
character with meta bit set
@item @code{\C}[@code{-}]@var{X}
control character
@item @code{^}@var{X}
control character
@end table

@noindent
In all other cases, `@code{\}' escapes the following character.  Delete is
written as `@code{^?}'.  Note that `@code{\M^?}' and `@code{^\M?}' are not the same.

@findex vared
@cindex parameters, editing
@cindex editing parameters
@item @code{vared} [ @code{-ch} ] [ @code{-p} @var{prompt} ] [ @code{-r} @var{rprompt} ] @var{name}
The value of the parameter @var{name} is loaded into the edit
buffer, and the line editor is invoked.  When the editor exits,
@var{name} is set to the string value returned by the editor.
If the @code{-c} flag is given, the parameter is created if it doesn't
already exist.
If the @code{-p} flag is given, the following string will be taken as
the prompt to display at the left.  If the @code{-r} flag is given,
the following string gives the prompt to display at the right.  If the
@code{-h} flag is specified, the history can be accessed from ZLE.

@findex zle
@cindex widgets, rebinding
@cindex rebinding widgets
@cindex widgets, binding
@cindex binding widgets
@cindex widgets, invoking
@cindex invoking widgets
@cindex widgets, calling
@cindex calling widgets
@cindex widgets, defining
@cindex defining widgets
@item @code{zle} @code{-l} [ @code{-L} ]
@itemx @code{zle} @code{-D} @var{widget} ...
@itemx @code{zle} @code{-A} @var{old-widget} @var{new-widget}
@itemx @code{zle} @code{-N} @var{widget} [ @var{function} ]
@itemx @code{zle} @var{widget}
The @code{zle} builtin performs a number of different actions concerning
ZLE.  Which operation it performs depends on its options:

@noindent
@table @asis
@item @code{-l} [ @code{-L} ]
List all existing user-defined widgets.  If the @code{-L}
option is used, list in the form of @code{zle}
commands to create the widgets.
Built-in widgets are not listed.

@item @code{-D} @var{widget} ...
Delete the named @var{widget}s.

@item @code{-A} @var{old-widget} @var{new-widget}
Make the @var{new-widget} name an alias for @var{old-widget}, so that
both names refer to the same widget.  The names have equal standing;
if either is deleted, the other remains.  If there is already a widget
with the @var{new-widget} name, it is deleted.

@item @code{-N} @var{widget} [ @var{function} ]
Create a user-defined widget.  If there is already a widget with the
specified name, it is overwritten.  When the new
widget is invoked from within the editor, the specified shell @var{function}
is called.  If no function name is specified, it defaults to
the same name as the widget.

@item @var{widget}
Invoke the specified widget.  This can only be done when ZLE is
active; normally this will be within a user-defined widget.

@end table

@end table
@c (avoiding a yodl bug)
@c (avoiding a yodl bug)
@c (avoiding a yodl bug)
@c (avoiding a yodl bug)
@c Yodl file: Zsh/index.yo
@node Concept Index, Variables Index, Top, Top
@unnumbered Concept Index

@printindex cp

@noindent
@node Variables Index, Options Index, Concept Index, Top
@unnumbered Variables Index

@printindex vr

@noindent
@node Options Index, Functions Index, Variables Index, Top
@unnumbered Options Index

@printindex pg

@noindent
@node Functions Index, Editor Functions Index, Options Index, Top
@unnumbered Functions Index

@printindex fn

@noindent
@node Editor Functions Index, Keystroke Index, Functions Index, Top
@unnumbered Editor Functions Index

@printindex tp

@noindent
@node Keystroke Index, , Editor Functions Index, Top
@unnumbered Keystroke Index

@printindex ky
@c (avoiding a yodl bug)

@setchapternewpage odd
@contents
@bye
