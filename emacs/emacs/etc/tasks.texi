\input texinfo @c -*-texinfo-*-
@c %**start of header
@setfilename tasks.info
@settitle GNU Task List
@c UPDATE THIS DATE WHENEVER YOU MAKE CHANGES!
@set lastupdate 1 February 1997
@c %**end of header

@setchapternewpage off

@titlepage
@title GNU Task List
@author Free Software Foundation
@author last updated @value{lastupdate}
@end titlepage

@ifinfo
@node Top, Preface, (dir), (dir)
@top GNU Task List

This file is updated automatically from @file{tasks.texi}, which was
last updated on @value{lastupdate}.
@end ifinfo

@menu
* Preface::
* Documentation::
* Unix-Related Projects::
* Kernel Projects::
* Extensions::
* X Windows Projects::
* Other Projects::
* Compilers::
* Games and Recreations::
@end menu

@node Preface, Documentation, Top, Top
@chapter About the GNU Task List

Check with @code{gnu@@prep.ai.mit.edu}, for a possibly more current
copy.  You can also ftp it from a GNU FTP host in directory
@file{/pub/gnu/tasks} - These files in different formats are available:
@file{tasks.text}, @file{tasks.texi}, @file{tasks.info}, and
@file{tasks.dvi}.  It is also available on the GNU World Wide Web
server: @file{http://www.gnu.ai.mit.edu}.

If you start working steadily on a project, please let @code{gnu@@prep}
know.  We might have information that could help you; we'd also like to
send you the GNU coding standards.

Because of the natural tendency for most volunteers to write programming
tools or programming languages, we have a comparative shortage of
applications useful for non-programmer users.  Therefore, we ask you to
consider writing such a program.

In general, a new program that does a completely new job advances the
GNU project more than an improvement to an existing program.

@node Documentation
@chapter Documentation

We very urgently need documentation for some parts of the system
that already exist or will exist very soon:

@itemize @bullet
@item
Completion of the documentation for CC-mode, a new Emacs mode for
C, C++ and other languages.

@item
A C reference manual.  (RMS made a try at one, which you could start
with).

@item
A manual for Ghostscript.


@item
A manual for TCSH.

@item
A manual for PIC (the graphics formatting language).

@item
A manual for Oleo.

@item
A book on how GCC works and why various machine descriptions
are written as they are.

@item
A manual for programming X-window applications.

@item
Manuals for various X window managers.

@item
Reference cards for those manuals that don't have them: C
Compiler, Make, Texinfo, Termcap, and maybe the C Library.

@item
Many utilities need documentation, including @code{grep} and others.
@end itemize

@node Unix-Related Projects
@chapter Unix-Related Projects

@itemize @bullet
@item
An improved version of the POSIX utility @code{pax}.  There is one on
Usenet, but it is said to be poorly written.  Talk with
@code{mib@@gnu.ai.mit.edu} about this project.

@ignore
@item
Modify the GNU @code{dc} program to use the math routines of GNU
@code{bc}.
@end ignore

@item
A @code{grap} preprocessor program for @code{troff}.

@item
Various other libraries.

@item
An emulation of SCCS that works using RCS.

@item
Less urgent: @code{diction}, @code{explain}, and @code{style}, or
something to do the same kind of job.  Compatibility with Unix is not
especially important for these programs.
@end itemize

@node Kernel Projects
@chapter Kernel-Related Projects

@itemize @bullet
@item
An over-the-ethernet debugger stub that will allow the kernel to be
debugged from GDB running on another machine.

This stub needs its own self-contained implementation of all protocols
to be used, since the GNU system will use user processes to implement
all but the lowest levels, and the stub won't be able to use those
processes.  If a simple self-contained implementation of IP and TCP is
impractical, it might be necessary to design a new, simple protocol
based directly on ethernet.  It's not crucial to support high speed or
communicating across gateways.

It might be possible to use the Mach ethernet driver code, but it would
need some changes.

@item
A shared memory X11 server to run under MACH is very desirable.  The
machine specific parts should be kept well separated.

@item
An implementation of CIFS, the ``Common Internet File System,'' for the
HURD.  This protocol is an offshoot of SMB.
@end itemize

@node Extensions
@chapter Extensions to Existing GNU Software

@itemize @bullet
@item
Enhance GCC.  See files @file{PROJECTS} and @file{PROBLEMS} in the GCC
distribution.

@item
Rewrite GNU @code{sed} completely, to make it cleaner.

@item
Rewrite Automake and Deja-GNU in Scheme, so they can run in Guile.
Right now they are written in Perl and TCL, respectively.  There are
also other programs, not terribly long, which we would also like
to have rewritten in Scheme.

@item
Finish the partially-implemented C interpreter project.

@item
Help with the development of GNUStep, a GNU implementation of the
OpenStep specification.

@item
Add features to GNU Make to record the precise rule with which each file
was last recompiled; then recompile any file if its rule in the makefile
has changed.

@item
Add a few features to GNU @code{diff}, such as handling large input
files without reading entire files into core.

@item
An @code{nroff} macro package to simplify @code{texi2roff}.

@item
A queueing system for the mailer Smail that groups pending work by
destination rather than by original message.  This makes it possible
to schedule retries coherently for each destination.  Talk to
@code{tron@@veritas.com} about this.

Smail also needs a new chief maintainer.

@item
Enhanced cross-reference browsing tools.  (We now have something at
about the level of @code{cxref}.)  We also could use something like
@code{ctrace}.  (Some people are now working on this project.)
@end itemize

@node X Windows Projects
@chapter X Windows Projects

@itemize @bullet
@item
An emulator for Macintosh graphics calls on top of X Windows.

@item
A music playing and editing system.

@item
A program to edit dance notation (such as labanotation) and display
dancers moving on the screen.

@item
Port the Vibrant toolkit to work on X without using Motif.

@item
A program to display and edit Hypercard stacks.

@item
A paint program, supporting both bitmap-oriented operations and
component-oriented operations.  @code{xpaint} exists, but isn't very
usable.

@item
A vector-based drawing program in the spirit of Adobe Illustrator
and Corel Draw.

@item
An interactive 3D modeling utility with rendering/raytracing capabilities.

@item
A program for graphic morphing of scanned photographs.
@end itemize

@node Other Projects
@chapter Other Projects

If you think of others that should be added, please
send them to @code{gnu@@prep.ai.mit.edu}.

@itemize @bullet
@item
A free program for public-key encryption.

This program should use the Diffie-Helman algorithm for public key
encryption, not the RSA algorithm, because the Diffie-Helman patent in
the US will expire in 1997.  It should use triple-DES, not IDEA, for
block encryption because IDEA is patented in many countries and the
patents will not expire soon.  In other respects, it should be like PGP.

This program needs to be written by someone who is not a US citizen,
outside the US, to avoid problems with US export control law.

Many people believe that PGP is free software, but that is not actually
true.  The distribution terms set by the copyright holders do not allow
everyone to use and redistribute it.

@item
A program to convert compiled programs represented in OSF ANDF
(``Architecture Neutral Distribution Format'') into ANSI C.

@item
An imitation of Page Maker or Ventura Publisher.

@item
An imitation of @code{dbase2} or @code{dbase3} (How dbased!)

@item
A program to reformat Fortran programs in a way that is pretty.

@item
A bulletin board system.  There are a few free ones, but they don't have
all the features that people want in such systems.  It would make sense
to start with an existing one and add the other features.

@item
A general ledger program, including support for accounts payable, 
account receivables, payroll, inventory control, order processing, etc.

@item
A teleconferencing program which does the job of CU-SeeMe (which is,
alas, not free software).

@item
A program to typeset C code for printing.
For ideas on what to do, see the book,

@display
Human Factors and Typography for More Readable Programs,
Ronald M. Baecker and Aaron Marcus,
Addison-Wesley, ISBN 0-201-10745-7
@end display

(I don't quite agree with a few of the details they propose.)

@item
Speech-generation programs (there is a program from Brown U that you
could improve).

@item
Speech-recognition programs (single-speaker, disconnected speech is sufficient).

@item
A program to play sound distributed in ``Real Audio'' format.

@item
A program to generate ``Real Audio'' format from audio input.

@item
More scientific mathematical subroutines.
(A clone of SPSS is being written already.)

@item
Statistical tools.

@item
Software to replace card catalogues in libraries.

@item
Grammar and style checking programs.

@item
An implementation of the S language (an interpreted language used for
statistics).

@item
A translator from Scheme to C.

@item
Optical character recognition programs; especially if suitable for
scanning documents with multiple fonts and capturing font info as well
as character codes.  Work is being done on this, but more help is needed.

@item
A program to scan a line drawing and convert it to Postscript.

@item
A program to recognize handwriting.

@item
A pen based interface.

@item
CAD software, such as a vague imitation of Autocad.

@item
Software for comparing DNA sequences, and finding matches and
alignments.
@end itemize

@node Compilers
@chapter Compilers for Other Batch Languages

Volunteers are needed to write parsers/front ends for languages such as
Algol 60, Algol 68, PL/I, Cobol, Fortran 90, or whatever, to be used
with the code generation phases of the GNU C compiler.  (C, C++, and
Objective-C are done; Fortran 77 is mostly done; Ada, Pascal, and Java
are being worked on.)

@c Fortran status is here so gnu@prep and the volunteer coordinators
@c don't have to answer the question -len
You can get the status of the Fortran front end with this command:

@example
finger -l fortran@@gnu.ai.mit.edu
@end example

@node Games and Recreations
@chapter Games and Recreations

Video-oriented games that work with the X window system.

@itemize @bullet
@item
A Doom-compatible display game engine, for running the many free
levels people have written for Doom.

@item
Empire (there is a free version but it needs upgrading)

@item
An ``empire builder'' system that makes it easy to write various kinds of
simulation games.

@item
Improve GnuGo, which is not yet very sophisticated.

@item
Imitations of popular video games:

@itemize -
@item
Space war, Asteroids, Pong, Columns.
@item
Defending cities from missiles.
@item
Plane shoots at lots of other planes, tanks, etc.
@item
Wizard fights fanciful monster.
@item
A golf game.
@item
Program a robot by sticking building blocks together,
then watch it explore a world.
@item
Biomorph evolution (as in Scientific American).
@item
A program to display effects of moving at relativistic speeds.
@end itemize

@item
Intriguing screen-saver programs to make interesting pictures.
Other such programs that are simply entertaining to watch.
For example, an aquarium.
@end itemize

We do not need @code{rogue}, as we have @code{hack}.

@contents

@bye
