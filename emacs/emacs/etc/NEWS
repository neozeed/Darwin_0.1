GNU Emacs NEWS -- history of user-visible changes.  1 Sep 1997
Copyright (C) 1996, 1997 Free Software Foundation, Inc.
See the end for copying conditions.

Please send Emacs bug reports to bug-gnu-emacs@prep.ai.mit.edu.
For older news, see the file ONEWS.

* Changes in Emacs 20.1

** Scroll bars are now on the left side of the window.

** The mode line no longer includes the string `Emacs'.
This makes more space in the mode line for other information.

** Emacs has a new facility for customization of its many user
options.  It is called M-x customize.  With this facility you can look
at the many user options in an organized way; they are grouped into a
tree structure.

M-x customize also knows what sorts of values are legitimate for each
user option and ensures that you don't use invalid values.

With M-x customize, you can set options either for the present Emacs
session or permanently.  (Permanent settings are stored automatically
in your .emacs file.)

** When you select a region with the mouse, it is highlighted
immediately afterward.  At that time, if you type the DELETE key, it
kills the region.

The BACKSPACE key, and the ASCII character DEL, do not do this; they
delete the character before point, as usual.

** In an incremental search the whole current match is highlighted
on terminals which support this.  (You can disable this feature
by setting search-highlight to nil.)

** In the minibuffer, in some cases, you can now use M-n to
insert the default value into the minibuffer as text.  In effect,
the default value (if the minibuffer routines know it) is tacked
onto the history "in the future".  (The more normal use of the
history list is to use M-p insert minibuffer input used in the
past.)

** In Text mode, now only blank lines separate paragraphs.
This makes it possible to get the full benefit of Adaptive Fill mode
in Text mode, and other modes derived from it (such as Mail mode).
TAB in Text mode now runs the command indent-relative; this
makes a practical difference only when you use indented paragraphs.

As a result, the old Indented Text mode is now identical to Text mode,
and is an alias for it.

If you want spaces at the beginning of a line to start a paragraph,
use the new mode, Paragraph Indent Text mode.

** Scrolling changes

*** Scroll commands to scroll a whole screen now preserve the screen
position of the cursor, if scroll-preserve-screen-position is non-nil.

In this mode, if you scroll several screens back and forth, finishing
on the same screen where you started, the cursor goes back to the line
where it started.

*** If you set scroll-conservatively to a small number, then when you
move point a short distance off the screen, Emacs will scroll the
screen just far enough to bring point back on screen, provided that
does not exceed `scroll-conservatively' lines.

*** The new variable scroll-margin says how close point can come to the
top or bottom of a window.  It is a number of screen lines; if point
comes within that many lines of the top or bottom of the window, Emacs
recenters the window.

** International character set support (MULE)

Emacs now supports a wide variety of international character sets,
including European variants of the Latin alphabet, as well as Chinese,
Devanagari (Hindi and Marathi), Ethiopian, Greek, IPA, Japanese,
Korean, Lao, Russian, Thai, Tibetan, and Vietnamese scripts.  These
features have been merged from the modified version of Emacs known as
MULE (for "MULti-lingual Enhancement to GNU Emacs")

Users of these scripts have established many more-or-less standard
coding systems for storing files.  Emacs uses a single multibyte
character encoding within Emacs buffers; it can translate from a wide
variety of coding systems when reading a file and can translate back
into any of these coding systems when saving a file.

Keyboards, even in the countries where these character sets are used,
generally don't have keys for all the characters in them.  So Emacs
supports various "input methods", typicaly one for each script or
language, to make it possible to type them.

The Emacs internal multibyte encoding represents a non-ASCII
character a sequence of bytes in the range 0200 through 0377.

The new prefix key C-x RET is used for commands that pertain
to multibyte characters, coding systems, and input methods.

You can disable multibyte character support as follows:

  (setq-default enable-multibyte-characters nil)

Calling the function standard-display-european turns off multibyte
characters, unless you specify a non-nil value for the second
argument, AUTO.  This provides compatibility for people who are
already using standard-display-european to continue using single-byte
characters for their work until they want to change.

*** Input methods

An input method is a kind of character conversion which is designed
specifically for interactive input.  In Emacs, typically each language
has its own input method (though sometimes several languages which use
the same characters can share one input method).  Some languages
support several input methods.

The simplest kind of input method works by mapping ASCII letters into
another alphabet.  This is how the Greek and Russian input methods
work.

A more powerful technique is composition: converting sequences of
characters into one letter.  Many European input methods use
composition to produce a single non-ASCII letter from a sequence which
consists of a letter followed by diacritics.  For example, a' is one
sequence of two characters that might be converted into a single
letter.

The input methods for syllabic scripts typically use mapping followed
by conversion.  The input methods for Thai and Korean work this way.
First, letters are mapped into symbols for particular sounds or tone
marks; then, sequences of these which make up a whole syllable are
mapped into one syllable sign--most often a "composite character".

None of these methods works very well for Chinese and Japanese, so
they are handled specially.  First you input a whole word using
phonetic spelling; then, after the word is in the buffer, Emacs
converts it into one or more characters using a large dictionary.

Since there is more than one way to represent a phonetically spelled
word using Chinese characters, Emacs can only guess which one to use;
typically these input methods give you a way to say "guess again" if
the first guess is wrong.

*** The command C-x RET m (toggle-enable-multibyte-characters)
turns multibyte character support on or off for the current buffer.

If multibyte character support is turned off in a buffer, then each
byte is a single character, even codes 0200 through 0377--exactly as
they did in Emacs 19.34.  This includes the features for support for
the European character, ISO Latin-1 and ISO Latin-2.

However, there is no need to turn off multibyte character support to
use ISO Latin-1 or ISO Latin-2; the Emacs multibyte character set
includes all the characters in these character sets, and Emacs can
translate automatically to and from either one.

*** Visiting a file in single-byte mode.

Turning off multibyte character support in the buffer after visiting a
file with multibyte code conversion will display the multibyte
sequences already in the buffer, byte by byte.  This is probably not
what you want.

If you want to edit a file of single-byte characters (Latin-1, for
example), you can do it by specifying `no-conversion' as the coding
system when reading the file.  This coding system also turns off
multibyte characters in that buffer.

If you turn off multibyte character support entirely, this turns off
character conversion as well.

*** Displaying international characters on X Windows.

A font for X typically displays just one alphabet or script.
Therefore, displaying the entire range of characters Emacs supports
requires using many fonts.

Therefore, Emacs now supports "fontsets".  Each fontset is a
collection of fonts, each assigned to a range of character codes.

A fontset has a name, like a font.  Individual fonts are defined by
the X server; fontsets are defined within Emacs itself.  But once you
have defined a fontset, you can use it in a face or a frame just as
you would use a font.

If a fontset specifies no font for a certain character, or if it
specifies a font that does not exist on your system, then it cannot
display that character.  It will display an empty box instead.

The fontset height and width are determined by the ASCII characters
(that is, by the font in the fontset which is used for ASCII
characters).  If another font in the fontset has a different height,
or the wrong width, then characters assigned to that font are clipped,
and displayed within a box if highlight-wrong-size-font is non-nil.

*** Defining fontsets.

Emacs does not use any fontset by default.  Its default font is still
chosen as in previous versions.  You can tell Emacs to use a fontset
with the `-fn' option or the `Font' X resource.

Emacs creates a standard fontset automatically according to the value
of standard-fontset-spec.  This fontset's short name is
`fontset-standard'.  Bold, italic, and bold-italic variants of the
standard fontset are created automatically.

If you specify a default ASCII font with the `Font' resource or `-fn'
argument, a fontset is generated from it.  This works by replacing the
FOUNDARY, FAMILY, ADD_STYLE, and AVERAGE_WIDTH fields of the font name
with `*' then using this to specify a fontset.  This fontset's short
name is `fontset-startup'.

Emacs checks resources of the form Fontset-N where N is 0, 1, 2...
The resource value should have this form:
	FONTSET-NAME, [CHARSET-NAME:FONT-NAME]...
FONTSET-NAME should have the form of a standard X font name, except:
	* most fields should be just the wild card "*".
	* the CHARSET_REGISTRY field should be "fontset"
	* the CHARSET_ENCODING field can be any nickname of the fontset.
The construct CHARSET-NAME:FONT-NAME can be repeated any number
of times; each time specifies the font for one character set.
CHARSET-NAME should be the name name of a character set, and
FONT-NAME should specify an actual font to use for that character set.

Each of these fontsets has an alias which is made from the
last two font name fields, CHARSET_REGISTRY and CHARSET_ENCODING.
You can refer to the fontset by that alias or by its full name.

For any character sets that you don't mention, Emacs tries to choose a
font by substituting into FONTSET-NAME.  For instance, with the
following resource,
	Emacs*Fontset-0: -*-fixed-medium-r-normal-*-24-*-*-*-*-*-fontset-24
the font for ASCII is generated as below:
	-*-fixed-medium-r-normal-*-24-*-ISO8859-1
Here is the substitution rule:
    Change CHARSET_REGISTRY and CHARSET_ENCODING to that of the charset
    defined in the variable x-charset-registries.  For instance, ASCII has
    the entry (ascii . "ISO8859-1") in this variable.  Then, reduce
    sequences of wild cards -*-...-*- with a single wildcard -*-.
    (This is to prevent use of auto-scaled fonts.)

The function which processes the fontset resource value to create the
fontset is called create-fontset-from-fontset-spec.  You can also call
that function explicitly to create a fontset.

With the X resource Emacs.Font, you can specify a fontset name just
like an actual font name.  But be careful not to specify a fontset
name in a wildcard resource like Emacs*Font--that tries to specify the
fontset for other purposes including menus, and they cannot handle
fontsets.

*** The command M-x set-language-environment sets certain global Emacs
defaults for a particular choice of language.

Selecting a language environment typically specifies a default input
method and which coding systems to recognize automatically when
visiting files.  However, it does not try to reread files you have
already visited; the text in those buffers is not affected.  The
language environment may also specify a default choice of coding
system for new files that you create.

It makes no difference which buffer is current when you use
set-language-environment, because these defaults apply globally to the
whole Emacs session.

*** The command C-x RET f (set-buffer-file-coding-system)
specifies the file coding system for the current buffer.  This
specifies what sort of character code translation to do when saving
the file.  As an argument, you must specify the name of one of the
coding systems that Emacs supports.

*** The command C-x RET c (universal-coding-system-argument)
lets you specify a coding system when you read or write a file.
This command uses the minibuffer to read a coding system name.
After you exit the minibuffer, the specified coding system
is used for *the immediately following command*.

So if the immediately following command is a command to read or
write a file, it uses the specified coding system for that file.

If the immediately following command does not use the coding system,
then C-x RET c ultimately has no effect.

For example,  C-x RET c iso-8859-1 RET C-x C-f temp RET
visits the file `temp' treating it as ISO Latin-1.

*** You can specify the coding system for a file using the -*-
construct.  Include `coding: CODINGSYSTEM;' inside the -*-...-*-
to specify use of coding system CODINGSYSTEM.  You can also
specify the coding system in a local variable list at the end
of the file.

*** The command C-x RET t (set-terminal-coding-system) specifies
the coding system for terminal output.  If you specify a character
code for terminal output, all characters output to the terminal are
translated into that characters code.

This feature is useful for certain character-only terminals built in
various countries to support the languages of those countries.

By default, output to the terminal is not translated at all.

*** The command C-x RET k (set-keyboard-coding-system) specifies
the coding system for keyboard input.

Character code translation of keyboard input is useful for terminals
with keys that send non-ASCII graphic characters--for example,
some terminals designed for ISO Latin-1 or subsets of it.

By default, keyboard input is not translated at all.

Character code translation of keyboard input is similar to using an
input method, in that both define sequences of keyboard input that
translate into single characters.  However, input methods are designed
to be convenient for interactive use, while the code translations are
designed to work with terminals.

*** The command C-x RET p (set-buffer-process-coding-system)
specifies the coding system for input and output to a subprocess.
This command applies to the current buffer; normally, each subprocess
has its own buffer, and thus you can use this command to specify
translation to and from a particular subprocess by giving the command
in the corresponding buffer.

By default, process input and output are not translated at all.

*** The variable file-name-coding-system specifies the coding system
to use for encoding file names before operating on them.
It is also used for decoding file names obtained from the system.

*** The command C-\ (toggle-input-method) activates or inactivates
an input method.  If no input method has been selected before, the
command prompts for you to specify the language and input method you
want to use.

C-u C-\ (select-input-method) lets you switch to a different input
method.  C-h C-\ (or C-h I) descriibes the current input nethod.

*** Some input methods remap the keyboard to emulate various keyboard
layouts commonly used for particular scripts.  How to do this
remapping properly depends on your actual keyboard layout.  To specify
which layout your keyboard has, use M-x quail-set-keyboard-layout.

*** The command C-h C (describe-coding-system) displays
the coding systems currently selected for various purposes, plus
related information.

*** The command C-h h (view-hello-file) displays a file called
HELLO, which has examples of text in many languages, using various
scripts.

*** The command C-h L (describe-language-support) displays
information about the support for a particular language.
You specify the language as an argument.

*** The mode line now contains a letter or character that identifies
the coding system used in the visited file.  It normally follows the
first dash.

A dash indicates the default state of affairs: no code conversion,
(except CRLF => newline if appropriate).  `=' means no conversion
whatsoever.  The ISO 8859 coding systems are represented by digits
1 through 9.  Other coding systems are represented by letters:

    A alternativnyj (Russian)
    B big5 (Chinese)
    C cn-gb-2312 (Chinese)
    C iso-2022-cn (Chinese)
    D in-is13194-devanagari (Indian languages)
    E euc-japan (Japanese)
    I iso-2022-cjk or iso-2022-ss2 (Chinese, Japanese, Korean)
    J junet (iso-2022-7) or old-jis (iso-2022-jp-1978-irv)  (Japanese)
    K euc-korea (Korean)
    R koi8 (Russian)
    Q tibetan
    S shift_jis (Japanese)
    T lao
    T tis620 (Thai)
    V viscii or vscii (Vietnamese)
    i iso-2022-lock (Chinese, Japanese, Korean)
    k iso-2022-kr (Korean)
    v viqr (Vietnamese)
    z hz (Chinese)

When you are using a character-only terminal (not a window system),
two additional characters appear in between the dash and the file
coding system.  These two characters describe the coding system for
keyboard input, and the coding system for terminal output.

*** The new variable rmail-file-coding-system specifies the code
conversion to use for RMAIL files.  The default value is nil.

When you read mail with Rmail, each message is decoded automatically
into Emacs' internal format.  This has nothing to do with
rmail-file-coding-system.  That variable controls reading and writing
Rmail files themselves.

*** The new variable sendmail-coding-system specifies the code
conversion for outgoing mail.  The default value is nil.

Actually, there are three different ways of specifying the coding system
for sending mail:

- If you use C-x RET f in the mail buffer, that takes priority.
- Otherwise, if you set sendmail-coding-system non-nil, that specifies it.
- Otherwise, the default coding system for new files is used,
  if that is non-nil.  That comes from your language environment.
- Otherwise, Latin-1 is used.

*** The command C-h t (help-with-tutorial) accepts a prefix argument
to specify the language for the tutorial file.  Currently, English,
Japanese, Korean and Thai are supported.  We welcome additional
translations.

** An easy new way to visit a file with no code or format conversion
of any kind: Use M-x find-file-literally.  There is also a command
insert-file-literally which inserts a file into the current buffer
without any conversion.

** C-q's handling of octal character codes is changed.
You can now specify any number of octal digits.
RET terminates the digits and is discarded;
any other non-digit terminates the digits and is then used as input.

** There are new commands for looking up Info documentation for
functions, variables and file names used in your programs.

Type M-x info-lookup-symbol to look up a symbol in the buffer at point.
Type M-x info-lookup-file to look up a file in the buffer at point.

Precisely which Info files are used to look it up depends on the major
mode.  For example, in C mode, the GNU libc manual is used.

** M-TAB in most programming language modes now runs the command
complete-symbol.  This command performs completion on the symbol name
in the buffer before point.

With a numeric argument, it performs completion  based on the set of
symbols documented in the Info files for the programming language that
you are using.

With no argument, it does completion based on the current tags tables,
just like the old binding of M-TAB (complete-tag).

** File locking works with NFS now.

The lock file for FILENAME is now a symbolic link named .#FILENAME,
in the same directory as FILENAME.

This means that collision detection between two different machines now
works reasonably well; it also means that no file server or directory
can become a bottleneck.

The new method does have drawbacks.  It means that collision detection
does not operate when you edit a file in a directory where you cannot
create new files.  Collision detection also doesn't operate when the
file server does not support symbolic links.  But these conditions are
rare, and the ability to have collision detection while using NFS is
so useful that the change is worth while.

When Emacs or a system crashes, this may leave behind lock files which
are stale.  So you may occasionally get warnings about spurious
collisions.  When you determine that the collision is spurious, just
tell Emacs to go ahead anyway.

** If you wish to use Show Paren mode to display matching parentheses,
it is no longer sufficient to load paren.el.  Instead you must call
show-paren-mode.

** If you wish to use Delete Selection mode to replace a highlighted
selection when you insert new text, it is no longer sufficient to load
delsel.el.  Instead you must call the function delete-selection-mode.

** If you wish to use Partial Completion mode to complete partial words
within symbols or filenames, it is no longer sufficient to load
complete.el.  Instead you must call the function partial-completion-mode.

** If you wish to use uniquify to rename buffers for you,
it is no longer sufficient to load uniquify.el.  You must also
set uniquify-buffer-name-style to one of the non-nil legitimate values.

** Changes in View mode.

*** Several new commands are available in View mode.
Do H in view mode for a list of commands.

*** There are two new commands for entering View mode:
view-file-other-frame and view-buffer-other-frame.

*** Exiting View mode does a better job of restoring windows to their
previous state.

*** New customization variable view-scroll-auto-exit. If non-nil,
scrolling past end of buffer makes view mode exit.

*** New customization variable view-exits-all-viewing-windows.  If
non-nil, view-mode will at exit restore all windows viewing buffer,
not just the selected window.

*** New customization variable view-read-only.  If non-nil, visiting a
read-only file automatically enters View mode, and toggle-read-only
turns View mode on or off.

*** New customization variable view-remove-frame-by-deleting controls
how to remove a not needed frame at view mode exit. If non-nil,
delete the frame, if nil make an icon of it.

** C-x v l, the command to print a file's version control log,
now positions point at the entry for the file's current branch version.

** C-x v =, the command to compare a file with the last checked-in version,
has a new feature.  If the file is currently not locked, so that it is
presumably identical to the last checked-in version, the command now asks
which version to compare with.

** When using hideshow.el incremental search can temporary show hidden
blocks if a match is inside the block. 

The block is hided again if the search is continued and the next match
is outside the block. By customizing the variable
isearch-hide-immediately you can choose to hide all the temporary
shown blocks only when exiting from incremental search.

By customizing the variable hs-isearch-open you can choose what kind
of blocks to temporary show during isearch: comment blocks, code
blocks, all of them or none.

** The new command C-x 4 0 (kill-buffer-and-window) kills the
current buffer and deletes the selected window.  It asks for
confirmation first.

** C-x C-w, which saves the buffer into a specified file name,
now changes the major mode according to that file name.
However, the mode will not be changed if
(1) a local variables list or the `-*-' line specifies a major mode, or
(2) the current major mode is a "special" mode,
    not suitable for ordinary files, or
(3) the new file name does not particularly specify any mode.

This applies to M-x set-visited-file-name as well.

However, if you set change-major-mode-with-file-name to nil, then
these commands do not change the major mode.

** M-x occur changes.

*** If the argument to M-x occur contains upper case letters,
it performs a case-sensitive search.

*** In the *Occur* buffer made by M-x occur,
if you type g or M-x revert buffer, this repeats the search
using the same regular expression and the same buffer as before.

** In Transient Mark mode, the region in any one buffer is highlighted
in just one window at a time.  At first, it is highlighted in the
window where you set the mark.  The buffer's highlighting remains in
that window unless you select to another window which shows the same
buffer--then the highlighting moves to that window.

** The feature to suggest key bindings when you use M-x now operates
after the command finishes.  The message suggesting key bindings
appears temporarily in the echo area.  The previous echo area contents
come back after a few seconds, in case they contain useful information.

** Each frame now independently records the order for recently
selected buffers, so that the default for C-x b is now based on the
buffers recently selected in the selected frame.

** Outline mode changes.

*** Outline mode now uses overlays (this is the former noutline.el).

*** Incremental searches skip over invisible text in Outline mode.

** When a minibuffer window is active but not the selected window, if
you try to use the minibuffer, you used to get a nested minibuffer.
Now, this not only gives an error, it also cancels the minibuffer that
was already active.

The motive for this change is so that beginning users do not
unknowingly move away from minibuffers, leaving them active, and then
get confused by it.

If you want to be able to have recursive minibuffers, you must
set enable-recursive-minibuffers to non-nil.

** Changes in dynamic abbrevs.

*** Expanding dynamic abbrevs with M-/ is now smarter about case
conversion.  If the expansion has mixed case not counting the first
character, and the abbreviation matches the beginning of the expansion
including case, then the expansion is copied verbatim.

The expansion is also copied verbatim if the abbreviation itself has
mixed case.  And using SPC M-/ to copy an additional word always
copies it verbatim except when the previous copied word is all caps.

*** The values of `dabbrev-case-replace' and `dabbrev-case-fold-search'
are no longer Lisp expressions.  They have simply three possible
values.

`dabbrev-case-replace' has these three values: nil (don't preserve
case), t (do), or `case-replace' (do like M-x query-replace).
`dabbrev-case-fold-search' has these three values: nil (don't ignore
case), t (do), or `case-fold-search' (do like search).

** Minibuffer history lists are truncated automatically now to a
certain length.  The variable history-length specifies how long they
can be.  The default value is 30.

** Changes in Mail mode.

*** The key C-x m no longer runs the `mail' command directly.
Instead, it runs the command `compose-mail', which invokes the mail
composition mechanism you have selected with the variable
`mail-user-agent'.  The default choice of user agent is
`sendmail-user-agent', which gives behavior compatible with the old
behavior.

C-x 4 m now runs compose-mail-other-window, and C-x 5 m runs
compose-mail-other-frame.

*** While composing a reply to a mail message, you can use the command
C-c C-r to cite just the region from the message you are replying to.
This copies the text which is the selected region in the buffer that
shows the original message.

*** The command C-c C-i inserts a file at the end of the message,
with separator lines around the contents.

*** The command M-x expand-mail-aliases expands all mail aliases
in suitable mail headers.  Emacs automatically extracts mail alias
definitions from your mail alias file (e.g., ~/.mailrc).  You do not
need to expand mail aliases yourself before sending mail.

*** New features in the mail-complete command.

**** The mail-complete command now inserts the user's full name,
for local users or if that is known.  The variable mail-complete-style
controls the style to use, and whether to do this at all.
Its values are like those of mail-from-style.

**** The variable mail-passwd-command lets you specify a shell command
to run to fetch a set of password-entries that add to the ones in
/etc/passwd.

**** The variable mail-passwd-file now specifies a list of files to read
to get the list of user ids.  By default, one file is used:
/etc/passwd.

** You can "quote" a file name to inhibit special significance of
special syntax, by adding `/:' to the beginning.  Thus, if you have a
directory named `/foo:', you can prevent it from being treated as a
reference to a remote host named `foo' by writing it as `/:/foo:'.

Emacs uses this new construct automatically when necessary, such as
when you start it with a working directory whose name might otherwise
be taken to be magic.

** There is a new command M-x grep-find which uses find to select
files to search through, and grep to scan them.  The output is
available in a Compile mode buffer, as with M-x grep.

M-x grep now uses the -e option if the grep program supports that.
(-e prevents problems if the search pattern starts with a dash.)

** In Dired, the & command now flags for deletion the files whose names
suggest they are probably not needed in the long run.

In Dired, * is now a prefix key for mark-related commands.

new key		dired.el binding		old key
-------		----------------		-------
  * c		dired-change-marks		c
  * m		dired-mark			m
  * *		dired-mark-executables		*  (binding deleted)
  * /		dired-mark-directories		/  (binding deleted)
  * @		dired-mark-symlinks		@  (binding deleted)
  * u		dired-unmark			u
  * DEL		dired-unmark-backward		DEL
  * ?		dired-unmark-all-files		M-C-?
  * !		dired-unmark-all-marks
  * %		dired-mark-files-regexp		% m
  * C-n		dired-next-marked-file		M-}
  * C-p		dired-prev-marked-file		M-{

** Rmail changes.

*** When Rmail cannot convert your incoming mail into Babyl format, it
saves the new mail in the file RMAILOSE.n, where n is an integer
chosen to make a unique name.  This way, Rmail will not keep crashing
each time you run it.

*** In Rmail, the variable rmail-summary-line-count-flag now controls
whether to include the line count in the summary.  Non-nil means yes.

*** In Rmail summary buffers, d and C-d (the commands to delete
messages) now take repeat counts as arguments.  A negative argument
means to move in the opposite direction.

*** In Rmail, the t command now takes an optional argument which lets
you specify whether to show the message headers in full or pruned.

*** In Rmail, the new command w (rmail-output-body-to-file) writes
just the body of the current message into a file, without the headers.
It takes the file name from the message subject, by default, but you
can edit that file name in the minibuffer before it is actually used
for output.

** Gnus changes.

*** nntp.el has been totally rewritten in an asynchronous fashion.

*** Article prefetching functionality has been moved up into 
Gnus.  

*** Scoring can now be performed with logical operators like 
`and', `or', `not', and parent redirection.

*** Article washing status can be displayed in the
article mode line.

*** gnus.el has been split into many smaller files.

*** Suppression of duplicate articles based on Message-ID.

(setq gnus-suppress-duplicates t)

*** New variables for specifying what score and adapt files
are to be considered home score and adapt files.  See
`gnus-home-score-file' and `gnus-home-adapt-files'.

*** Groups can inherit group parameters from parent topics.

*** Article editing has been revamped and is now usable.

*** Signatures can be recognized in more intelligent fashions.
See `gnus-signature-separator' and `gnus-signature-limit'.

*** Summary pick mode has been made to look more nn-like.
Line numbers are displayed and the `.' command can be
used to pick articles.

*** Commands for moving the .newsrc.eld from one server to
another have been added.

    `M-x gnus-change-server'

*** A way to specify that "uninteresting" fields be suppressed when
generating lines in buffers.

*** Several commands in the group buffer can be undone with
`M-C-_'.

*** Scoring can be done on words using the new score type `w'.

*** Adaptive scoring can be done on a Subject word-by-word basis:

    (setq gnus-use-adaptive-scoring '(word))

*** Scores can be decayed.
 
    (setq gnus-decay-scores t)

*** Scoring can be performed using a regexp on the Date header.  The
Date is normalized to compact ISO 8601 format first.

*** A new command has been added to remove all data on articles from
the native server.

   `M-x gnus-group-clear-data-on-native-groups'

*** A new command for reading collections of documents
(nndoc with nnvirtual on top) has been added -- `M-C-d'.

*** Process mark sets can be pushed and popped.

*** A new mail-to-news backend makes it possible to post
even when the NNTP server doesn't allow posting.

*** A new backend for reading searches from Web search engines
(DejaNews, Alta Vista, InReference) has been added.

    Use the `G w' command in the group buffer to create such
    a group.

*** Groups inside topics can now be sorted using the standard
sorting functions, and each topic can be sorted independently.

    See the commands under the `T S' submap.

*** Subsets of the groups can be sorted independently.

    See the commands under the `G P' submap.

*** Cached articles can be pulled into the groups.
  
    Use the `Y c' command.

*** Score files are now applied in a more reliable order.

*** Reports on where mail messages end up can be generated.

    `M-x nnmail-split-history'

*** More hooks and functions have been added to remove junk
from incoming mail before saving the mail.
 
    See `nnmail-prepare-incoming-header-hook'.

*** The nnml mail backend now understands compressed article files.

*** To enable Gnus to read/post multi-lingual articles, you must execute
the following code, for instance, in your .emacs.

	(add-hook 'gnus-startup-hook 'gnus-mule-initialize)

Then, when you start Gnus, it will decode non-ASCII text automatically
and show appropriate characters.  (Note: if you are using gnus-mime
from the SEMI package, formerly known as TM, you should NOT add this
hook to gnus-startup-hook; gnus-mime has its own method of handling
this issue.)

Since it is impossible to distinguish all coding systems
automatically, you may need to specify a choice of coding system for a
particular news group.  This can be done by:

	(gnus-mule-add-group NEWSGROUP 'CODING-SYSTEM)

Here NEWSGROUP should be a string which names a newsgroup or a tree
of newsgroups.  If NEWSGROUP is "XXX.YYY", all news groups under
"XXX.YYY" (including "XXX.YYY.ZZZ") will use the specified coding
system.  CODING-SYSTEM specifies which coding system to use (for both
for reading and posting.

CODING-SYSTEM can also be a cons cell of the form
  (READ-CODING-SYSTEM . POST-CODING-SYSTEM)
Then READ-CODING-SYSTEM is used when you read messages from the
newsgroups, while POST-CODING-SYSTEM is used when you post messages
there.

Emacs knows the right coding systems for certain newsgroups by
default.  Here are some of these default settings:

	(gnus-mule-add-group "fj" 'iso-2022-7)
	(gnus-mule-add-group "alt.chinese.text" 'hz-gb-2312)
	(gnus-mule-add-group "alt.hk" 'hz-gb-2312)
	(gnus-mule-add-group "alt.chinese.text.big5" 'cn-big5)
	(gnus-mule-add-group "soc.culture.vietnamese" '(nil . viqr))

When you replay by mail to an articles, these settings are ignored;
the mail is encoded according to sendmail-coding-system, as usual.

** CC mode changes.

*** If you edit primarily one style of C (or C++, Objective-C, Java)
code, you may want to make the CC Mode style variables have global
values so that you can set them directly in your .emacs file.  To do
this, set c-style-variables-are-local-p to nil in your .emacs file.
Note that this only takes effect if you do it *before* cc-mode.el is
loaded.

If you typically edit more than one style of C (or C++, Objective-C,
Java) code in a single Emacs session, you may want to make the CC Mode 
style variables have buffer local values.  By default, all buffers
share the same style variable settings; to make them buffer local, set 
c-style-variables-are-local-p to t in your .emacs file.  Note that you 
must do this *before* CC Mode is loaded.

*** The new variable c-indentation-style holds the C style name
of the current buffer.

*** The variable c-block-comments-indent-p has been deleted, because
it is no longer necessary.  C mode now handles all the supported styles
of block comments, with no need to say which one you will use.

*** There is a new indentation style "python", which specifies the C
style that the Python developers like.

*** There is a new c-cleanup-list option: brace-elseif-brace.
This says to put ...} else if (...) {... on one line,
just as brace-else-brace says to put ...} else {... on one line.

** VC Changes [new]

** In vc-retrieve-snapshot (C-x v r), if you don't specify a snapshot
name, it retrieves the *latest* versions of all files in the current
directory and its subdirectories (aside from files already locked).

This feature is useful if your RCS directory is a link to a common
master directory, and you want to pick up changes made by other
developers.

You can do the same thing for an individual file ty typing C-u C-x C-q
RET in a buffer visiting that file.

*** VC can now handle files under CVS that are being "watched" by
other developers.  Such files are made read-only by CVS.  To get a
writable copy, type C-x C-q in a buffer visiting such a file.  VC then
calls "cvs edit", which notifies the other developers of it.

*** vc-version-diff (C-u C-x v =) now suggests reasonable defaults for
version numbers, based on the current state of the file.

** Calendar changes.

A new function, list-holidays, allows you list holidays or subclasses
of holidays for ranges of years.  Related menu items allow you do this
for the year of the selected date, or the following/previous years.

** ps-print changes

There are some new user variables for customizing the page layout.  

*** Paper size, paper orientation, columns

The variable `ps-paper-type' determines the size of paper ps-print
formats for; it should contain one of the symbols:
`a4' `a3' `letter' `legal' `letter-small' `tabloid'
`ledger' `statement' `executive' `a4small' `b4' `b5'
It defaults to `letter'.
If you need other sizes, see the variable `ps-page-dimensions-database'.

The variable `ps-landscape-mode' determines the orientation
of the printing on the page.  nil, the default, means "portrait" mode, 
non-nil means "landscape" mode.

The variable `ps-number-of-columns' must be a positive integer.
It determines the number of columns both in landscape and portrait mode.
It defaults to 1. 

*** Horizontal layout

The horizontal layout is determined by the variables
`ps-left-margin', `ps-inter-column', and `ps-right-margin'.
All are measured in points.

*** Vertical layout

The vertical layout is determined by the variables
`ps-bottom-margin', `ps-top-margin', and `ps-header-offset'.
All are measured in points.

*** Headers

If the variable `ps-print-header' is nil, no header is printed.  Then
`ps-header-offset' is not relevant and `ps-top-margin' represents the
margin above the text.

If the variable `ps-print-header-frame' is non-nil, a gaudy 
framing box is printed around the header.

The contents of the header are determined by `ps-header-lines',
`ps-show-n-of-n', `ps-left-header' and `ps-right-header'.

The height of the header is determined by `ps-header-line-pad', 
`ps-header-font-family', `ps-header-title-font-size' and 
`ps-header-font-size'.

*** Font managing

The variable `ps-font-family' determines which font family is to be
used for ordinary text.  Its value must be a key symbol in the alist
`ps-font-info-database'.  You can add other font families by adding
elements to this alist.

The variable `ps-font-size' determines the size of the font 
for ordinary text.  It defaults to 8.5 points.

** hideshow changes.

*** now supports hiding of blocks of single line comments (like // for
C++, ; for lisp). 

*** Support for java-mode added.

*** When doing `hs-hide-all' it is now possible to also hide the comments
in the file if `hs-hide-comments-when-hiding-all' is set.

*** The new function `hs-hide-initial-comment' hides the the comments at
the beginning of the files. Finally those huge RCS logs don't stay in your
way! This is run by default when entering the `hs-minor-mode'.

*** Now uses overlays instead of `selective-display', so is more
robust and a lot faster.

*** A block beginning can span multiple lines. 

*** The new variable `hs-show-hidden-short-form' if t, determine hideshow
to show only the beggining of a block in when it is hidden. See the
documentation for more details.

** Changes in Enriched mode.

*** When you visit a file in enriched-mode, Emacs will make sure it is
filled to the current fill-column.  This behavior is now independent
of the size of the window.  When you save the file, the fill-column in
use is stored as well, so that the whole buffer need not be refilled
the next time unless the fill-column is different.

*** use-hard-newlines is now a minor mode.  When it is enabled, Emacs
distinguishes between hard and soft newlines, and treats hard newlines
as paragraph boundaries.  Otherwise all newlines inserted are marked
as soft, and paragraph boundaries are determined solely from the text.

** Font Lock mode

*** Custom support

The variables font-lock-face-attributes, font-lock-display-type and
font-lock-background-mode are now obsolete; the recommended way to specify the
faces to use for Font Lock mode is with M-x customize-group on the new custom
group font-lock-highlighting-faces.  If you set font-lock-face-attributes in
your ~/.emacs file, Font Lock mode will respect its value.  However, you should
consider converting from setting that variable to using M-x customize.

You can still use X resources to specify Font Lock face appearances.

*** Maximum decoration

Fontification now uses the maximum level of decoration supported by
default.  Previously, fontification used a mode-specific default level
of decoration, which is typically the minimum level of decoration
supported.  You can set font-long-maximum-decoration to nil
to get the old behavior.

*** New support

Support is now provided for Java, Objective-C, AWK and SIMULA modes.

Note that Font Lock mode can be turned on without knowing exactly what modes
support Font Lock mode, via the command global-font-lock-mode.

*** Configurable support

Support for C, C++, Objective-C and Java can be more easily configured for
additional types and classes via the new variables c-font-lock-extra-types,
c++-font-lock-extra-types, objc-font-lock-extra-types and, you guessed it,
java-font-lock-extra-types.  These value of each of these variables should be a
list of regexps matching the extra type names.  For example, the default value
of c-font-lock-extra-types is ("\\sw+_t") which means fontification follows the
convention that C type names end in _t.  This results in slower fontification.

Of course, you can change the variables that specify fontification in whatever
way you wish, typically by adding regexps.  However, these new variables make
it easier to make specific and common changes for the fontification of types.

*** Adding highlighting patterns to existing support

You can use the new function font-lock-add-keywords to add your own
highlighting patterns, such as for project-local or user-specific contructs,
for any mode.

For example, to highlight `FIXME:' words in C comments, put:

 (font-lock-add-keywords 'c-mode '(("\\<FIXME:" 0 font-lock-warning-face t)))

in your ~/.emacs.

*** New faces

Font Lock now defines two new faces, font-lock-builtin-face and
font-lock-warning-face.  These are intended to highlight builtin keywords,
distinct from a language's normal keywords, and objects that should be brought
to user attention, respectively.  Various modes now use these new faces.

*** Changes to fast-lock support mode

The fast-lock package, one of the two Font Lock support modes, can now process
cache files silently.  You can use the new variable fast-lock-verbose, in the
same way as font-lock-verbose, to control this feature.

*** Changes to lazy-lock support mode

The lazy-lock package, one of the two Font Lock support modes, can now fontify
according to the true syntactic context relative to other lines.  You can use
the new variable lazy-lock-defer-contextually to control this feature.  If
non-nil, changes to the buffer will cause subsequent lines in the buffer to be
refontified after lazy-lock-defer-time seconds of idle time.  If nil, then only
the modified lines will be refontified; this is the same as the previous Lazy
Lock mode behaviour and the behaviour of Font Lock mode.

This feature is useful in modes where strings or comments can span lines.
For example, if a string or comment terminating character is deleted, then if
this feature is enabled subsequent lines in the buffer will be correctly
refontified to reflect their new syntactic context.  Previously, only the line
containing the deleted character would be refontified and you would have to use
the command M-g M-g (font-lock-fontify-block) to refontify some lines.

As a consequence of this new feature, two other variables have changed:

Variable `lazy-lock-defer-driven' is renamed `lazy-lock-defer-on-scrolling'.
Variable `lazy-lock-defer-time' can now only be a time, i.e., a number.
Buffer modes for which on-the-fly deferral applies can be specified via the
new variable `lazy-lock-defer-on-the-fly'.

If you set these variables in your ~/.emacs, then you may have to change those
settings.

** Ada mode changes.

*** There is now better support for using find-file.el with Ada mode.
If you switch between spec and body, the cursor stays in the same
procedure (modulo overloading).  If a spec has no body file yet, but
you try to switch to its body file, Ada mode now generates procedure
stubs.

*** There are two new commands:
 - `ada-make-local'   : invokes gnatmake on the current buffer
 - `ada-check-syntax' : check syntax of current buffer.

The user options `ada-compiler-make', `ada-make-options',
`ada-language-version', `ada-compiler-syntax-check', and
`ada-compile-options' are used within these commands. 

*** Ada mode can now work with Outline minor mode.  The outline level
is calculated from the indenting, not from syntactic contructs.
Outlining does not work if your code is not correctly indented.

*** The new function `ada-gnat-style' converts the buffer to the style of
formatting used in GNAT.  It places two blanks after a comment start,
places one blank between a word end and an opening '(', and puts one
space between a comma and the beginning of a word.

** Scheme mode changes.

*** Scheme mode indentation now uses many of the facilities of Lisp
mode; therefore, the variables to customize it are the variables used
for Lisp mode which have names starting with `lisp-'.  The variables
with names starting with `scheme-' which used to do this no longer
have any effect.

If you want to use different indentation for Scheme and Lisp, this is
still possible, but now you must do it by adding a hook to
scheme-mode-hook, which could work by setting the `lisp-' indentation
variables as buffer-local variables.

*** DSSSL mode is a variant of Scheme mode, for editing DSSSL scripts.
Use M-x dsssl-mode.

** The emacsclient program now accepts an option --no-wait which tells
it to return immediately without waiting for you to "finish" the
buffer in Emacs.

** M-x eldoc-mode enables a minor mode in which the echo area
constantly shows the parameter list for function being called at point
(in Emacs Lisp and Lisp Interaction modes only).

** C-x n d now runs the new command narrow-to-defun,
which narrows the accessible parts of the buffer to just
the current defun.

** Emacs now handles the `--' argument in the standard way; all
following arguments are treated as ordinary file names.

** On MSDOS and Windows, the bookmark file is now called _emacs.bmk,
and the saved desktop file is now called _emacs.desktop (truncated if
necessary).

** When you kill a buffer that visits a file,
if there are any registers that save positions in the file,
these register values no longer become completely useless.
If you try to go to such a register with C-x j, then you are
asked whether to visit the file again.  If you say yes,
it visits the file and then goes to the same position.

** When you visit a file that changes frequently outside Emacs--for
example, a log of output from a process that continues to run--it may
be useful for Emacs to revert the file without querying you whenever
you visit the file afresh with C-x C-f.

You can request this behavior for certain files by setting the
variable revert-without-query to a list of regular expressions.  If a
file's name matches any of these regular expressions, find-file and
revert-buffer revert the buffer without asking for permission--but
only if you have not edited the buffer text yourself.

** set-default-font has been renamed to set-frame-font
since it applies only to the current frame.

** In TeX mode, you can use the variable tex-main-file to specify the
file for tex-file to run TeX on.  (By default, tex-main-file is nil,
and tex-file runs TeX on the current visited file.)

This is useful when you are editing a document that consists of
multiple files.  In each of the included files, you can set up a local
variable list which specifies the top-level file of your document for
tex-main-file.  Then tex-file will run TeX on the whole document
instead of just the file you are editing.

** RefTeX mode

RefTeX mode is a new minor mode with special support for \label, \ref
and \cite macros in LaTeX documents.  RefTeX distinguishes labels of
different environments (equation, figure, ...) and has full support for
multifile documents.  To use it, select a buffer with a LaTeX document and
turn the mode on with M-x reftex-mode.  Here are the main user commands:

C-c (    reftex-label        
   Creates a label semi-automatically.  RefTeX is context sensitive and
   knows which kind of label is needed.

C-c )    reftex-reference
   Offers in a menu all labels in the document, along with context of the
   label definition.  The selected label is referenced as \ref{LABEL}.

C-c [    reftex-citation
   Prompts for a regular expression and displays a list of matching BibTeX
   database entries.  The selected entry is cited with a \cite{KEY} macro.

C-c &    reftex-view-crossref
   Views the cross reference of a \ref or \cite command near point.

C-c =    reftex-toc
   Shows a table of contents of the (multifile) document.  From there you
   can quickly jump to every section.
 
Under X, RefTeX installs a "Ref" menu in the menu bar, with additional
commands.  Press `?' to get help when a prompt mentions this feature.
Full documentation and customization examples are in the file
reftex.el.  You can use the finder to view the file documentation:
C-h p --> tex --> reftex.el

** Changes in BibTeX mode.

*** Info documentation is now available.

*** Don't allow parentheses in string constants anymore. This confused
both, the BibTeX program and Emacs BibTeX mode.

*** Renamed variable bibtex-mode-user-optional-fields to
bibtex-user-optional-fields.

*** Removed variable bibtex-include-OPTannote
(use bibtex-user-optional-fields instead).

*** New interactive functions to copy and kill fields and complete
entries to the BibTeX kill ring, from where they can be yanked back by
appropriate functions.

*** New interactive functions for repositioning and marking of
entries. They are bound by default to M-C-l and M-C-h.

*** New hook bibtex-clean-entry-hook. It is called after entry has
been cleaned.

*** New variable bibtex-field-delimiters, which replaces variables
bibtex-field-{left|right}-delimiter.

*** New variable bibtex-entry-delimiters to determine how entries
shall be delimited.

*** Allow preinitialization of fields. See documentation of
bibtex-user-optional-fields, bibtex-entry-field-alist, and
bibtex-include-OPTkey for details.

*** Book and InBook entries require either an author or an editor
field. This is now supported by bibtex.el. Alternative fields are
prefixed with `ALT'.

*** New variable bibtex-entry-format, which replaces variable
bibtex-clean-entry-zap-empty-opts and allows specification of many
formatting options performed on cleaning an entry (see variable
documentation).

*** Even more control on how automatic keys are generated. See
documentation of bibtex-generate-autokey for details. Transcriptions
for foreign languages other than German are now handled, too.

*** New boolean user option bibtex-comma-after-last-field to decide if
comma should be inserted at end of last field.

*** New boolean user option bibtex-align-at-equal-sign to determine if
alignment should be made at left side of field contents or at equal
signs. New user options to control entry layout (e.g. indentation).

*** New function bibtex-fill-entry to realign entries.

*** New function bibtex-reformat to reformat region or buffer.

*** New function bibtex-convert-alien to convert a BibTeX database
from alien sources.

*** New function bibtex-complete-key (similar to bibtex-complete-string)
to complete prefix to a key defined in buffer. Mainly useful in
crossref entries.

*** New function bibtex-count-entries to count entries in buffer or
region.

*** Added support for imenu.

*** The function `bibtex-validate' now checks current region instead
of buffer if mark is active. Now it shows all errors of buffer in a
`compilation mode' buffer. You can use the normal commands (e.g.
`next-error') for compilation modes to jump to errors.

*** New variable `bibtex-string-file-path' to determine where the files
from `bibtex-string-files' are searched.

** Iso Accents mode now supports Latin-3 as an alternative.

** The function using-unix-filesystems has been replaced by the
functions add-untranslated-filesystem and remove-untranslated-filesystem.
Each of these functions takes the name of a drive letter or directory
as an argument.

When a filesystem is added as untranslated, all files on it are read
and written in binary mode (no cr/lf translation is performed).

** browse-url changes

*** New methods for: Grail (browse-url-generic), MMM (browse-url-mmm),
Lynx in a separate xterm (browse-url-lynx-xterm) or in an Emacs window
(browse-url-lynx-emacs), remote W3 (browse-url-w3-gnudoit), generic
non-remote-controlled browsers (browse-url-generic) and associated
customization variables.

*** New commands `browse-url-of-region' and `browse-url'.

*** URLs marked up with <URL:...> (RFC1738) work if broken across
lines.  Browsing methods can be associated with URL regexps
(e.g. mailto: URLs) via `browse-url-browser-function'.

** Changes in Ediff

*** Clicking Mouse-2 on a brief command description in Ediff control panel pops up
the Info file for this command.

*** There is now a variable, ediff-autostore-merges, which controls whether the
result of a merge is saved in a file. By default, this is done only when merge
is done from a session group (eg, when merging files in two different 
directories).

*** Since Emacs 19.31 (this hasn't been announced before), Ediff can compare and
merge groups of files residing in different directories, or revisions of files
in the same directory.

*** Since Emacs 19.31, Ediff can apply multi-file patches interactively.
The patches must be in the context format or GNU unified format. (The bug
related to the GNU format has now been fixed.)

** Changes in Viper

*** The startup file is now .viper instead of .vip
*** All viariable/function names have been changed to start with viper- 
    instead of vip-.
*** C-\ now simulates the meta-key in all Viper states.
*** C-z in Insert state now escapes to Vi for the duration of the next 
Viper command. In Vi and Insert states, C-z behaves as before.
*** C-c \ escapes to Vi for one command if Viper is in Insert or Emacs states.
*** _ is no longer the meta-key in Vi state.
*** The variable vip-insert-state-cursor-color can be used to change cursor
color when Viper is in insert state.
*** If search lands the cursor near the top or the bottom of the window,
Viper pulls the window up or down to expose more context. The variable
vip-adjust-window-after-search controls this behavior.

** Etags changes.

*** In C, C++, Objective C and Java, Etags tags global variables by
default.  The resulting tags files are inflated by 30% on average.
Use --no-globals to turn this feature off.  Etags can also tag
variables which are members of structure-like constructs, but it does
not by default.  Use --members to turn this feature on.

*** C++ member functions are now recognized as tags.

*** Java is tagged like C++.  In addition, "extends" and "implements"
constructs are tagged.  Files are recognised by the extension .java.

*** Etags can now handle programs written in Postscript.  Files are
recognised by the extensions .ps and .pdb (Postscript with C syntax).
In Postscript, tags are lines that start with a slash.

*** Etags now handles Objective C and Objective C++ code.  The usual C and
C++ tags are recognized in these languages; in addition, etags
recognizes special Objective C syntax for classes, class categories,
methods and protocols.

*** Etags also handles Cobol.  Files are recognised by the extension
.cobol.  The tagged lines are those containing a word that begins in
column 8 and ends in a full stop, i.e. anything that could be a
paragraph name.

*** Regexps in Etags now support intervals, as in ed or grep.  The syntax of
an interval is \{M,N\}, and it means to match the preceding expression
at least M times and as many as N times.

** The format for specifying a custom format for time-stamp to insert
in files has changed slightly.

With the new enhancements to the functionality of format-time-string,
time-stamp-format will change to be eventually compatible with it.
This conversion is being done in two steps to maintain compatibility
with old time-stamp-format values.

In the new scheme, alternate case is signified by the number-sign
(`#') modifier, rather than changing the case of the format character.
This feature is as yet incompletely implemented for compatibilty
reasons.

In the old time-stamp-format, all numeric fields defaulted to their
natural width.  (With format-time-string, each format has a
fixed-width default.)  In this version, you can specify the colon
(`:') modifier to a numeric conversion to mean "give me the historical
time-stamp-format width default."  Do not use colon if you are
specifying an explicit width, as in "%02d".

Numbers are no longer truncated to the requested width, except in the
case of "%02y", which continues to give a two-digit year.  Digit
truncation probably wasn't being used for anything else anyway.

The new formats will work with old versions of Emacs.  New formats are
being recommended now to allow time-stamp-format to change in the
future to be compatible with format-time-string.  The new forms being
recommended now will continue to work then.

See the documentation string for the variable time-stamp-format for
details.

** There are some additional major modes:

dcl-mode, for editing VMS DCL files.
m4-mode, for editing files of m4 input.
meta-mode, for editing MetaFont and MetaPost source files.

** In Shell mode, the command shell-copy-environment-variable lets you
copy the value of a specified environment variable from the subshell
into Emacs.

** New Lisp packages include:

*** battery.el displays battery status for laptops.

*** M-x bruce (named after Lenny Bruce) is a program that might
be used for adding some indecent words to your email.

*** M-x crisp-mode enables an emulation for the CRiSP editor.

*** M-x dirtrack arranges for better tracking of directory changes
in shell buffers.

*** The new library elint.el provides for linting of Emacs Lisp code.
See the documentation for `elint-initialize', `elint-current-buffer'
and `elint-defun'.

*** M-x expand-add-abbrevs defines a special kind of abbrev which is
meant for programming constructs.  These abbrevs expand like ordinary
ones, when you type SPC, but only at the end of a line and not within
strings or comments.

These abbrevs can act as templates: you can define places within an
abbrev for insertion of additional text.  Once you expand the abbrev,
you can then use C-x a p and C-x a n to move back and forth to these
insertion points.  Thus you can conveniently insert additional text
at these points.

*** filecache.el remembers the location of files so that you
can visit them by short forms of their names.

*** find-func.el lets you find the definition of the user-loaded
Emacs Lisp function at point.

*** M-x handwrite converts text to a "handwritten" picture.

*** M-x iswitch-buffer is a command for switching to a buffer, much like
switch-buffer, but it reads the argument in a more helpful way.

*** M-x landmark implements a neural network for landmark learning.

*** M-x locate provides a convenient interface to the `locate' program.

*** M4 mode is a new mode for editing files of m4 input.

*** mantemp.el creates C++ manual template instantiations
from the GCC error messages which indicate which instantiations are neeed.

*** mouse-copy.el provides a one-click copy and move feature.
You can drag a region with M-mouse-1, and it is automatically
inserted at point.  M-Shift-mouse-1 deletes the text from its
original place after inserting the copy.

*** mouse-drag.el lets you do scrolling by dragging Mouse-2
on the buffer.

You click the mouse and move; that distance either translates into the
velocity to scroll (with mouse-drag-throw) or the distance to scroll
(with mouse-drag-drag).  Horizontal scrolling is enabled when needed.

Enable mouse-drag with:
    (global-set-key [down-mouse-2] 'mouse-drag-throw)
-or-
    (global-set-key [down-mouse-2] 'mouse-drag-drag)

*** mspools.el is useful for determining which mail folders have
mail waiting to be read in them.  It works with procmail.

*** Octave mode is a major mode for editing files of input for Octave.
It comes with a facility for communicating with an Octave subprocess.

*** ogonek

The ogonek package provides functions for changing the coding of
Polish diacritic characters in buffers.  Codings known from various
platforms are supported such as ISO8859-2, Mazovia, IBM Latin2, and
TeX.  For example, you can change the coding from Mazovia to
ISO8859-2.  Another example is a change of coding from ISO8859-2 to
prefix notation (in which `/a' stands for the aogonek character, for
instance) and vice versa.

To use this package load it using
    M-x load-library [enter] ogonek
Then, you may get an explanation by calling one of
    M-x ogonek-jak        -- in Polish  
    M-x ogonek-how        -- in English
The info specifies the commands and variables provided as well as the
ways of customization in `.emacs'.

*** Interface to ph.

Emacs provides a client interface to CCSO Nameservers (ph/qi)

The CCSO nameserver is used in more than 300 organisations around the
world (mostly universities) to provide directory services about
people.  ph.el provides a convenient Emacs interface to these servers.

*** uce.el is useful for replying to unsolicited commercial email.

*** vcursor.el implements a "virtual cursor" feature.
You can move the virtual cursor with special commands
while the real cursor does not move.

*** webjump.el is a "hot list" package which you can set up
for visiting your favorite web sites.

*** M-x winner-mode is a minor mode which saves window configurations,
so you can move back to other configurations that you have recently used.

*** M-x word-help uses Info to display the description
of the word at the cursor.

** movemail change

Movemail no longer needs to be installed setuid root in order for POP
mail retrieval to function properly.  This is because it no longer
supports the RPOP (reserved-port POP) protocol; instead, it uses the
user's POP password to authenticate to the mail server.

This change was made earlier, but not reported in NEWS before.

Emacs 20.1 changes for MS-DOS and MS-Windows.

** Changes in handling MS-DOS/MS-Windows text files.

Emacs handles three different conventions for representing
end-of-line: CRLF for MSDOS, LF for Unix and GNU, and CR (used on the
Macintosh).  Emacs determines which convention is used in a specific
file based on the contents of that file (except for certain special
file names), and when it saves the file, it uses the same convention.

To save the file and change the end-of-line convention, you can use
C-x RET f (set-buffer-file-coding-system) to specify a different
coding system for the buffer.  Then, when you save the file, the newly
specified coding system will take effect.  For example, to save with
LF, specify undecided-unix (or some other ...-unix coding system); to
save with CRLF, specify undecided-dos.

* Lisp Changes in Emacs 20.1

** Byte-compiled files made with Emacs 20 will, in general, work in
Emacs 19 as well, as long as the source code runs in Emacs 19.  And
vice versa: byte-compiled files made with Emacs 19 should also run in
Emacs 20, as long as the program itself works in Emacs 20.

** Windows-specific functions and variables have been renamed
to start with w32- instead of win32-.

In hacker language, calling something a "win" is a form of praise.  We
don't want to praise a non-free Microsoft system, so we don't call it
"win".

** Basic Lisp changes

*** A symbol whose name starts with a colon now automatically
evaluates to itself.  Therefore such a symbol can be used as a constant.

*** The defined purpose of `defconst' has been changed.  It should now
be used only for values that should not be changed whether by a program
or by the user.

The actual behavior of defconst has not been changed.

*** There are new macros `when' and `unless'

(when CONDITION BODY...)  is short for  (if CONDITION (progn BODY...))
(unless CONDITION BODY...)  is short for  (if CONDITION nil BODY...)

*** Emacs now defines functions caar, cadr, cdar and cddr with their
usual Lisp meanings.  For example, caar returns the car of the car of
its argument.

*** equal, when comparing strings, now ignores their text properties.

*** The new function `functionp' tests whether an object is a function.

*** arrayp now returns t for char-tables and bool-vectors.

*** Certain primitives which use characters (as integers) now get an
error if the integer is not a valid character code.  These primitives
include insert-char, char-to-string, and the %c construct in the
`format' function.

*** The `require' function now insists on adding a suffix, either .el
or .elc, to the file name.  Thus, (require 'foo) will not use a file
whose name is just foo.  It insists on foo.el or foo.elc.

*** The `autoload' function, when the file name does not contain
either a directory name or the suffix .el or .elc, insists on
adding one of these suffixes.

*** string-to-number now takes an optional second argument BASE
which specifies the base to use when converting an integer.
If BASE is omitted, base 10 is used. 

We have not implemented other radices for floating point numbers,
because that would be much more work and does not seem useful.

*** substring now handles vectors as well as strings.

*** The Common Lisp function eql is no longer defined normally.
You must load the `cl' library to define it.

*** The new macro `with-current-buffer' lets you evaluate an expression
conveniently with a different current buffer.  It looks like this:

  (with-current-buffer BUFFER BODY-FORMS...)

BUFFER is the expression that says which buffer to use.
BODY-FORMS say what to do in that buffer.

*** The new primitive `save-current-buffer' saves and restores the
choice of current buffer, like `save-excursion', but without saving or
restoring the value of point or the mark.  `with-current-buffer'
works using `save-current-buffer'.

*** The new macro `with-temp-file' lets you do some work in a new buffer and
write the output to a specified file.  Like `progn', it returns the value
of the last form.

*** The new macro `with-temp-buffer' lets you do some work in a new buffer,
which is discarded after use.  Like `progn', it returns the value of the
last form.  If you wish to return the buffer contents, use (buffer-string)
as the last form.

*** The new function split-string takes a string, splits it at certain
characters, and returns a list of the substrings in between the
matches.

For example, (split-string "foo bar lose" " +") returns ("foo" "bar" "lose").

*** The new macro with-output-to-string executes some Lisp expressions
with standard-output set up so that all output feeds into a string.
Then it returns that string.

For example, if the current buffer name is `foo',

(with-output-to-string
  (princ "The buffer is ")
  (princ (buffer-name)))

returns "The buffer is foo".

** Non-ASCII characters are now supported, if enable-multibyte-characters
is non-nil.

These characters have character codes above 256.  When inserted in the
buffer or stored in a string, they are represented as multibyte
characters that occupy several buffer positions each.

*** When enable-multibyte-characters is non-nil, a single character in
a buffer or string can be two or more bytes (as many as four).

Buffers and strings are still made up of single-byte elements;
character positions and string indices are always measured in bytes.
Therefore, moving forward one character can increase the buffer
position by 2, 3 or 4.  The function forward-char moves by whole
characters, and therefore is no longer equivalent to
  (lambda (n) (goto-char (+ (point) n))).

ASCII characters (codes 0 through 127) are still single bytes, always.
Sequences of byte values 128 through 255 are used to represent
non-ASCII characters.  These sequences are called "multibyte
characters".

The first byte of a multibyte character is always in the range 128
through 159 (octal 0200 through 0237).  These values are called
"leading codes".  The second and subsequent bytes are always in the
range 160 through 255 (octal 0240 through 0377).  The first byte, the
leading code, determines how many bytes long the sequence is.

*** The function forward-char moves over characters, and therefore
(forward-char 1) may increase point by more than 1 if it moves over a
multibyte character.  Likewise, delete-char always deletes a
character, which may be more than one buffer position.

This means that some Lisp programs, which assume that a character is
always one buffer position, need to be changed.

However, all ASCII characters are always one buffer position.
 
*** The regexp [\200-\377] no longer matches all non-ASCII characters,
because when enable-multibyte-characters is non-nil, these characters
have codes that are not in the range octal 200 to octal 377.  However,
the regexp [^\000-\177] does match all non-ASCII characters,
guaranteed.

*** The function char-boundary-p returns non-nil if position POS is
between two characters in the buffer (not in the middle of a
character).

When the value is non-nil, it says what kind of character follows POS:

 0 if POS is at an ASCII character or at the end of range,
 1 if POS is before a 2-byte length multi-byte form,
 2 if POS is at a head of 3-byte length multi-byte form,
 3 if POS is at a head of 4-byte length multi-byte form,
 4 if POS is at a head of multi-byte form of a composite character.

*** The function char-bytes returns how many bytes the character CHAR uses.

*** Strings can contain multibyte characters.  The function
`length' returns the string length counting bytes, which may be
more than the number of characters.

You can include a multibyte character in a string constant by writing
it literally.  You can also represent it with a hex escape,
\xNNNNNNN..., using as many digits as necessary.  Any character which
is not a valid hex digit terminates this construct.  If you want to
follow it with a character that is a hex digit, write backslash and
newline in between; that will terminate the hex escape.

*** The function concat-chars takes arguments which are characters
and returns a string containing those characters.

*** The function sref access a multibyte character in a string.
(sref STRING INDX) returns the character in STRING at INDEX.  INDEX
counts from zero.  If INDEX is at a position in the middle of a
character, sref signals an error.

*** The function chars-in-string returns the number of characters
in a string.  This is less than the length of the string, if the
string contains multibyte characters (the length counts bytes).

*** The function chars-in-region returns the number of characters
in a region from BEG to END.  This is less than (- END BEG) if the
region contains multibyte characters (the length counts bytes).

*** The function string-to-list converts a string to a list of
the characters in it.  string-to-vector converts a string
to a vector of the characters in it.

*** The function store-substring alters part of the contents
of a string.  You call it as follows:

   (store-substring STRING IDX OBJ)

This says to alter STRING, by storing OBJ starting at index IDX in
STRING.  OBJ may be either a character or a (smaller) string.
This function really does alter the contents of STRING.
Since it is impossible to change the length of an existing string,
it is an error if OBJ doesn't fit within STRING's actual length.

*** char-width returns the width (in columns) of the character CHAR,
if it were displayed in the current buffer and the selected window.

*** string-width returns the width (in columns) of the text in STRING,
if it were displayed in the current buffer and the selected window.

*** truncate-string-to-width shortens a string, if necessary,
to fit within a certain number of columns.  (Of course, it does
not alter the string that you give it; it returns a new string
which contains all or just part of the existing string.)

(truncate-string-to-width STR END-COLUMN &optional START-COLUMN PADDING)

This returns the part of STR up to column END-COLUMN.

The optional argument START-COLUMN specifies the starting column.
If this is non-nil, then the first START-COLUMN columns of the string
are not included in the resulting value.

The optional argument PADDING, if non-nil, is a padding character to be added
at the beginning and end the resulting string, to extend it to exactly
WIDTH columns.  If PADDING is nil, that means do not pad; then, if STRING
is narrower than WIDTH, the value is equal to STRING.

If PADDING and START-COLUMN are both non-nil, and if there is no clean
place in STRING that corresponds to START-COLUMN (because one
character extends across that column), then the padding character
PADDING is added one or more times at the beginning of the result
string, so that its columns line up as if it really did start at
column START-COLUMN.

*** When the functions in the list after-change-functions are called,
the third argument is the number of bytes in the pre-change text, not
necessarily the number of characters.  It is, in effect, the
difference in buffer position between the beginning and the end of the
changed text, before the change.

*** The characters Emacs uses are classified in various character
sets, each of which has a name which is a symbol.  In general there is
one character set for each script, not for each language.

**** The function charsetp tests whether an object is a character set name.

**** The variable charset-list holds a list of character set names.

**** char-charset, given a character code, returns the name of the character
set that the character belongs to.  (The value is a symbol.)

**** split-char, given a character code, returns a list containing the
name of the character set, followed by one or two byte-values
which identify the character within that character set.

**** make-char, given a character set name and one or two subsequent
byte-values, constructs a character code.  This is roughly the
opposite of split-char.

**** find-charset-region returns a list of the character sets
of all the characters between BEG and END.

**** find-charset-string returns a list of the character sets
of all the characters in a string.

*** Here are the Lisp facilities for working with coding systems
and specifying coding systems.

**** The function coding-system-list returns a list of all coding
system names (symbols).  With optional argument t, it returns a list
of all distinct base coding systems, not including variants.
(Variant coding systems are those like latin-1-dos, latin-1-unix
and latin-1-mac which specify the end-of-line conversion as well
as what to do about code conversion.)

**** coding-system-p tests a symbol to see if it is a coding system
name.  It returns t if so, nil if not.

**** file-coding-system-alist specifies which coding systems to use
for certain file names.  It works like network-coding-system-alist,
except that the PATTERN is matched against the file name.

Each element has the format (PATTERN . VAL), where PATTERN determines
which file names the element applies to.  PATTERN should be a regexp
to match against a file name.

VAL is a coding system, a cons cell containing two coding systems, or
a function symbol.  If VAL is a coding system, it is used for both
decoding what received from the network stream and encoding what sent
to the network stream.  If VAL is a cons cell containing two coding
systems, the car specifies the coding system for decoding, and the cdr
specifies the coding system for encoding.

If VAL is a function symbol, the function must return a coding system
or a cons cell containing two coding systems, which is used as above.

**** The variable network-coding-system-alist specifies
the coding system to use for network sockets.

Each element has the format (PATTERN . VAL), where PATTERN determines
which network sockets the element applies to.  PATTERN should be
either a port number or a regular expression matching some network
service names.

VAL is a coding system, a cons cell containing two coding systems, or
a function symbol.  If VAL is a coding system, it is used for both
decoding what received from the network stream and encoding what sent
to the network stream.  If VAL is a cons cell containing two coding
systems, the car specifies the coding system for decoding, and the cdr
specifies the coding system for encoding.

If VAL is a function symbol, the function must return a coding system
or a cons cell containing two coding systems, which is used as above.

**** process-coding-system-alist specifies which coding systems to use
for certain subprocess.  It works like network-coding-system-alist,
except that the PATTERN is matched against the program name used to
start the subprocess.

**** The variable default-process-coding system specifies the coding
systems to use for subprocess (and net connection) input and output,
when nothing else specifies what to do.  The value is a cons cell
(OUTPUT-CODING . INPUT-CODING).  OUTPUT-CODING applies to output
to the subprocess, and INPUT-CODING applies to input from it.

**** The variable coding-system-for-write, if non-nil, specifies the
coding system to use for writing a file, or for output to a synchronous
subprocess.

It also applies to any asynchronous subprocess or network connection,
but in a different way: the value of coding-system-for-write when you
start the subprocess or connection affects that subprocess or
connection permanently or until overridden.

The variable coding-system-for-write takes precedence over
file-coding-system-alist, process-coding-system-alist and
network-coding-system-alist, and all other methods of specifying a
coding system for output.  But most of the time this variable is nil.
It exists so that Lisp programs can bind it to a specific coding
system for one operation at a time.

**** coding-system-for-read applies similarly to input from
files, subprocesses or network connections.

**** The function process-coding-system tells you what
coding systems(s) an existing subprocess is using.
The value is a cons cell,
 (DECODING-CODING-SYSTEM . ENCODING-CODING-SYSTEM)
where DECODING-CODING-SYSTEM is used for decoding output from
the subprocess, and ENCODING-CODING-SYSTEM is used for encoding
input to the subprocess.

**** The function set-process-coding-system can be used to
change the coding systems in use for an existing subprocess.

** Emacs has a new facility to help users manage the many
customization options.  To make a Lisp program work with this facility,
you need to use the new macros defgroup and defcustom.

You use defcustom instead of defvar, for defining a user option
variable.  The difference is that you specify two additional pieces of
information (usually): the "type" which says what values are
legitimate, and the "group" which specifies the hierarchy for
customization.

Thus, instead of writing

    (defvar foo-blurgoze nil
      "*Non-nil means that foo will act very blurgozely.")

you would now write this:

    (defcustom foo-blurgoze nil
      "*Non-nil means that foo will act very blurgozely."
      :type 'boolean
      :group foo)

The type `boolean' means that this variable has only
two meaningful states: nil and non-nil.  Other type values
describe other possibilities; see the manual for Custom
for a description of them.

The "group" argument is used to specify a group which the option
should belong to.  You define a new group like this:

    (defgroup ispell nil
      "Spell checking using Ispell."
      :group 'processes)

The "group" argument in defgroup specifies the parent group.  The root
group is called `emacs'; it should not contain any variables itself,
but only other groups.  The immediate subgroups of `emacs' correspond
to the keywords used by C-h p.  Under these subgroups come
second-level subgroups that belong to individual packages.

Each Emacs package should have its own set of groups.  A simple
package should have just one group; a more complex package should
have a hierarchy of its own groups.  The sole or root group of a
package should be a subgroup of one or more of the "keyword"
first-level subgroups.

** New `widget' library for inserting UI components in buffers.

This library, used by the new custom library, is documented in a
separate manual that accompanies Emacs.

** easy-mmode

The easy-mmode package provides macros and functions that make
developing minor modes easier.  Roughly, the programmer has to code
only the functionality of the minor mode.  All the rest--toggles,
predicate, and documentation--can be done in one call to the macro
`easy-mmode-define-minor-mode' (see the documentation).  See also
`easy-mmode-define-keymap'.

** Text property changes

*** The `intangible' property now works on overlays as well as as a
text property.

*** The new functions next-char-property-change and
previous-char-property-change scan through the buffer looking for a
place where either a text property or an overlay might change.  The
functions take two arguments, POSITION and LIMIT.  POSITION is the
starting position for the scan.  LIMIT says where to stop the scan.

If no property change is found before LIMIT, the value is LIMIT.  If
LIMIT is nil, scan goes to the beginning or end of the accessible part
of the buffer.  If no property change is found, the value is the
position of the beginning or end of the buffer.

*** In the `local-map' text property or overlay property, the property
value can now be a symbol whose function definition is a keymap.  This
is an alternative to using the keymap itself.

** Changes in invisibility features

*** Isearch can now temporarily show parts of the buffer which are
hidden by an overlay with a invisible property, when the search match
is inside that portion of the buffer.  To enable this the overlay
should have a isearch-open-invisible property which is a function that
would be called having the overlay as an argument, the function should
make the overlay visible.

During incremental search the overlays are shown by modifying the
invisible and intangible properties, if beside this more actions are
needed the overlay should have a isearch-open-invisible-temporary
which is a function. The function is called with 2 arguments: one is
the overlay and the second is nil when it should show the overlay and
t when it should hide it.

*** add-to-invisibility-spec, remove-from-invisibility-spec

Modes that use overlays to hide portions of a buffer should set the
invisible property of the overlay to the mode's name (or another symbol) 
and modify the `buffer-invisibility-spec' to include that symbol. 
Use  `add-to-invisibility-spec' and `remove-from-invisibility-spec' to
manipulate the `buffer-invisibility-spec'. 
Here is an example of how to do this:

 ;; If we want to display an ellipsis:
 (add-to-invisibility-spec '(my-symbol . t)) 
 ;; If you don't want ellipsis:
 (add-to-invisibility-spec 'my-symbol) 

  ...
 (overlay-put  (make-overlay beginning end)  'invisible 'my-symbol)

 ...
 ;; When done with the overlays:
 (remove-from-invisibility-spec '(my-symbol . t))
 ;; Or respectively:
 (remove-from-invisibility-spec 'my-symbol)

** Changes in syntax parsing.

*** The syntax-directed buffer-scan functions (such as
`parse-partial-sexp', `forward-word' and similar functions) can now
obey syntax information specified by text properties, if the variable
`parse-sexp-lookup-properties' is non-nil.

If the value of `parse-sexp-lookup-properties' is nil, the behavior
is as before: the syntax-table of the current buffer is always
used to determine the syntax of the character at the position.

When `parse-sexp-lookup-properties' is non-nil, the syntax of a
character in the buffer is calculated thus:

	a) if the `syntax-table' text-property of that character
	   is a cons, this cons becomes the syntax-type;

	   Valid values of `syntax-table' text-property are: nil, a valid
	   syntax-table, and a valid syntax-table element, i.e.,
	   a cons cell of the form (SYNTAX-CODE . MATCHING-CHAR).

	b) if the character's `syntax-table' text-property
	   is a syntax table, this syntax table is used
	   (instead of the syntax-table of the current buffer) to
	   determine the syntax type of the character.

	c) otherwise the syntax-type is determined by the syntax-table
	   of the current buffer.

*** The meaning of \s in regular expressions is also affected by the
value of `parse-sexp-lookup-properties'.  The details are the same as
for the syntax-directed buffer-scan functions.

*** There are two new syntax-codes, `!' and `|' (numeric values 14
and 15).  A character with a code `!' starts a comment which is ended
only by another character with the same code (unless quoted).  A
character with a code `|' starts a string which is ended only by
another character with the same code (unless quoted).

These codes are mainly meant for use as values of the `syntax-table'
text property.

*** The function `parse-partial-sexp' has new semantics for the sixth
arg COMMENTSTOP.  If it is `syntax-table', parse stops after the start
of a comment or a string, or after end of a comment or a string.

*** The state-list which the return value from `parse-partial-sexp'
(and can also be used as an argument) now has an optional ninth
element: the character address of the start of last comment or string;
nil if none.  The fourth and eighth elements have special values if the
string/comment is started by a "!"  or "|" syntax-code.

*** Since new features of `parse-partial-sexp' allow a complete
syntaxic parsing, `font-lock' no longer supports
`font-lock-comment-start-regexp'.

** Changes in face features

*** The face functions are now unconditionally defined in Emacs, even
if it does not support displaying on a device that supports faces.

*** The function face-documentation returns the documentation string
of a face (or nil if it doesn't have one).

*** The function face-bold-p returns t if a face should be bold.
set-face-bold-p sets that flag.

*** The function face-italic-p returns t if a face should be bold.
set-face-italic-p sets that flag.

*** You can now specify foreground and background colors for text
by adding elements of the form (foreground-color . COLOR-NAME)
and (background-color . COLOR-NAME) to the list of faces in
the `face' property (either the character's text property or an
overlay property).

This means that you no longer need to create named faces to use
arbitrary colors in a Lisp package.

** Changes in file-handling functions

*** File-access primitive functions no longer discard an extra redundant
directory name from the beginning of the file name.  In other words,
they no longer do anything special with // or /~.  That conversion
is now done only in substitute-in-file-name.

This makes it possible for a Lisp program to open a file whose name
begins with ~.

*** If copy-file is unable to set the date of the output file,
it now signals an error with the condition file-date-error.

*** The inode number returned by file-attributes may be an integer (if
the number fits in a Lisp integer) or a list of integers.

*** insert-file-contents can now read from a special file,
as long as the arguments VISIT and REPLACE are nil.

*** The RAWFILE arg to find-file-noselect, if non-nil, now suppresses
character code conversion as well as other things.

Meanwhile, this feature does work with remote file names
(formerly it did not).

*** Lisp packages which create temporary files should use the TMPDIR
environment variable to decide which directory to put them in.

*** interpreter-mode-alist elements now specify regexps
instead of constant strings.

*** expand-file-name no longer treats `//' or `/~' specially.  It used
to delete all the text of a file name up through the first slash of
any `//' or `/~' sequence.  Now it passes them straight through.

substitute-in-file-name continues to treat those sequences specially,
in the same way as before.

*** The variable `format-alist' is more general now.
The FROM-FN and TO-FN in a format definition can now be strings
which specify shell commands to use as filters to perform conversion.

*** The new function access-file tries to open a file, and signals an
error if that fails.  If the open succeeds, access-file does nothing
else, and returns nil.

*** The function insert-directory now signals an error if the specified
directory cannot be listed.

** Changes in minibuffer input

*** The functions read-buffer, read-variable, read-command, read-string
read-file-name, read-from-minibuffer and completing-read now take an
additional argument which specifies the default value.  If this
argument is non-nil, it should be a string; that string is used in two
ways:

  It is returned if the user enters empty input.
  It is available through the history command M-n.

*** The functions read-string, read-from-minibuffer,
read-no-blanks-input and completing-read now take an additional
argument INHERIT-INPUT-METHOD.  If this is non-nil, then the
minibuffer inherits the current input method and the setting of
enable-multibyte-characters from the previously current buffer.

In an interactive spec, you can use M instead of s to read an
argument in this way.

*** All minibuffer input functions discard text properties
from the text you enter in the minibuffer, unless the variable
minibuffer-allow-text-properties is non-nil.

** Echo area features

*** Clearing the echo area now runs the normal hook
echo-area-clear-hook.  Note that the echo area can be used while the
minibuffer is active; in that case, the minibuffer is still active
after the echo area is cleared.

*** The function current-message returns the message currently displayed
in the echo area, or nil if there is none.

** Keyboard input features

*** tty-erase-char is a new variable that reports which character was
set up as the terminal's erase character when time Emacs was started.

*** num-nonmacro-input-events is the total number of input events
received so far from the terminal.  It does not count those generated
by keyboard macros.

** Frame-related changes

*** make-frame runs the normal hook before-make-frame-hook just before
creating a frame, and just after creating a frame it runs the abnormal
hook after-make-frame-functions with the new frame as arg.

*** The new hook window-configuration-change-hook is now run every time
the window configuration has changed.  The frame whose configuration
has changed is the selected frame when the hook is run.

*** Each frame now independently records the order for recently
selected buffers, in its buffer-list frame parameter, so that the
value of other-buffer is now based on the buffers recently displayed
in the selected frame.

*** The value of the frame parameter vertical-scroll-bars
is now `left', `right' or nil.  A non-nil value specifies
which side of the window to put the scroll bars on.

** X Windows features

*** You can examine X resources for other applications by binding
x-resource-class around a call to x-get-resource.  The usual value of
x-resource-class is "Emacs", which is the correct value for Emacs.

*** In menus, checkboxes and radio buttons now actually work.
The menu displays the current status of the box or button.

*** The function x-list-fonts now takes an optional fourth argument
MAXIMUM which sets a limit on how many matching fonts to return.
A smaller value of MAXIMUM makes the function faster.

If the only question is whether *any* font matches the pattern,
it is good to supply 1 for this argument.

** Subprocess features

*** A reminder: it is no longer necessary for subprocess filter
functions and sentinels to do save-match-data, because Emacs does this
automatically.

*** The new function shell-command-to-string executes a shell command
and returns the output from the command as a string.

*** The new function process-contact returns t for a child process,
and (HOSTNAME SERVICE) for a net connection.

** An error in running pre-command-hook or post-command-hook
does clear the variable to nil.  The documentation was wrong before.

** In define-key-after, if AFTER is t, the new binding now always goes
at the end of the keymap.  If the keymap is a menu, this means it
goes after the other menu items.

** If you have a program that makes several changes in the same area
of the buffer, you can use the macro combine-after-change-calls 
around that Lisp code to make it faster when after-change hooks
are in use.

The macro arranges to call the after-change functions just once for a
series of several changes--if that seems safe.

Don't alter the variables after-change-functions and
after-change-function within the body of a combine-after-change-calls
form.

** If you define an abbrev (with define-abbrev) whose EXPANSION
is not a string, then the abbrev does not expand in the usual sense,
but its hook is still run.

** Normally, the Lisp debugger is not used (even if you have enabled it)
for errors that are handled by condition-case.

If you set debug-on-signal to a non-nil value, then the debugger is called
regardless of whether there is a handler for the condition.  This is
useful for debugging problems that happen inside of a condition-case.

This mode of operation seems to be unreliable in other ways.  Errors that
are normal and ought to be handled, perhaps in timers or process
filters, will instead invoke the debugger.  So don't say you weren't
warned.

** The new variable ring-bell-function lets you specify your own
way for Emacs to "ring the bell".

** If run-at-time's TIME argument is t, the action is repeated at
integral multiples of REPEAT from the epoch; this is useful for
functions like display-time.

** You can use the function locate-library to find the precise file
name of a Lisp library.  This isn't new, but wasn't documented before.

** Commands for entering view mode have new optional arguments that
can be used from Lisp.  Low-level entrance to and exit from view mode
is done by functions view-mode-enter and view-mode-exit.

** batch-byte-compile-file now makes Emacs return a nonzero status code
if there is an error in compilation.

** pop-to-buffer, switch-to-buffer-other-window and
switch-to-buffer-other-frame now accept an additional optional
argument NORECORD, much like switch-to-buffer.  If it is non-nil,
they don't put the buffer at the front of the buffer list.

** If your .emacs file leaves the *scratch* buffer non-empty,
Emacs does not display the startup message, so as to avoid changing
the *scratch* buffer.

** The new function regexp-opt returns an efficient regexp to match a string.
The arguments are STRINGS and (optionally) PAREN.  This function can be used
where regexp matching or searching is intensively used and speed is important,
e.g., in Font Lock mode.

** The variable buffer-display-count is local to each buffer,
and is incremented each time the buffer is displayed in a window.
It starts at 0 when the buffer is created.

** The new function compose-mail starts composing a mail message
using the user's chosen mail composition agent (specified with the
variable mail-user-agent).  It has variants compose-mail-other-window
and compose-mail-other-frame.

** The `user-full-name' function now takes an optional parameter which
can either be a number (the UID) or a string (the login name).  The
full name of the specified user will be returned.

** Lisp packages that load files of customizations, or any other sort
of user profile, should obey the variable init-file-user in deciding
where to find it.  They should load the profile of the user name found
in that variable.  If init-file-user is nil, meaning that the -q
option was used, then Lisp packages should not load the customization
files at all.

** format-time-string now allows you to specify the field width
and type of padding.  This works as in printf: you write the field
width as digits in the middle of a %-construct.  If you start
the field width with 0, it means to pad with zeros.

For example, %S normally specifies the number of seconds since the
minute; %03S means to pad this with zeros to 3 positions, %_3S to pad
with spaces to 3 positions.  Plain %3S pads with zeros, because that
is how %S normally pads to two positions.

** thing-at-point now supports a new kind of "thing": url.

** imenu.el changes.

You can now specify a function to be run when selecting an
item from menu created by imenu. 

An example of using this feature: if we define imenu items for the
#include directives in a C file, we can open the included file when we
select one of those items.

* Emacs 19.34 is a bug-fix release with no user-visible changes.

* Changes in Emacs 19.33.

** Bibtex mode no longer turns on Auto Fill automatically.  (No major
mode should do that--it is the user's choice.)

** The variable normal-auto-fill-function specifies the function to
use for auto-fill-function, if and when Auto Fill is turned on.
Major modes can set this locally to alter how Auto Fill works.

* Editing Changes in Emacs 19.32

** C-x f with no argument now signals an error.
To set the fill column at the current column, use C-u C-x f.

** Expanding dynamic abbrevs with M-/ is now smarter about case
conversion.  If you type the abbreviation with mixed case, and it
matches the beginning of the expansion including case, then the
expansion is copied verbatim.  Using SPC M-/ to copy an additional
word always copies it verbatim except when the previous copied word is
all caps.

** On a non-windowing terminal, which can display only one Emacs frame
at a time, creating a new frame with C-x 5 2 also selects that frame.

When using a display that can show multiple frames at once, C-x 5 2
does make the frame visible, but does not select it.  This is the same
as in previous Emacs versions.

** You can use C-x 5 2 to create multiple frames on MSDOS, just as on a
non-X terminal on Unix.  Of course, only one frame is visible at any
time, since your terminal doesn't have the ability to display multiple
frames.

** On Windows, set win32-pass-alt-to-system to a non-nil value
if you would like tapping the Alt key to invoke the Windows menu.
This feature is not enabled by default; since the Alt key is also the
Meta key, it is too easy and painful to activate this feature by
accident.

** The command apply-macro-to-region-lines repeats the last defined
keyboard macro once for each complete line within the current region.
It does this line by line, by moving point to the beginning of that
line and then executing the macro.

This command is not new, but was never documented before.

** You can now use Mouse-1 to place the region around a string constant
(something surrounded by doublequote characters or other delimiter
characters of like syntax) by double-clicking on one of the delimiting
characters.

** Font Lock mode

*** Font Lock support modes

Font Lock can be configured to use Fast Lock mode and Lazy Lock mode (see
below) in a flexible way.  Rather than adding the appropriate function to the
hook font-lock-mode-hook, you can use the new variable font-lock-support-mode
to control which modes have Fast Lock mode or Lazy Lock mode turned on when
Font Lock mode is enabled.

For example, to use Fast Lock mode when Font Lock mode is turned on, put:

 (setq font-lock-support-mode 'fast-lock-mode)

in your ~/.emacs.

*** lazy-lock

The lazy-lock package speeds up Font Lock mode by making fontification occur
only when necessary, such as when a previously unfontified part of the buffer
becomes visible in a window.  When you create a buffer with Font Lock mode and
Lazy Lock mode turned on, the buffer is not fontified.  When certain events
occur (such as scrolling), Lazy Lock makes sure that the visible parts of the
buffer are fontified.  Lazy Lock also defers on-the-fly fontification until
Emacs has been idle for a given amount of time.

To use this package, put in your ~/.emacs:

 (setq font-lock-support-mode 'lazy-lock-mode)

To control the package behaviour, see the documentation for `lazy-lock-mode'.

** Changes in BibTeX mode.

*** For all entries allow spaces and tabs between opening brace or
paren and key.

*** Non-escaped double-quoted characters (as in `Sch"of') are now
supported.

** Gnus changes.

Gnus, the Emacs news reader, has undergone further rewriting.  Many new
commands and variables have been added.  There should be no
significant incompatibilities between this Gnus version and the
previously released version, except in the message composition area.

Below is a list of the more user-visible changes.  Coding changes
between Gnus 5.1 and 5.2 are more extensive.

*** A new message composition mode is used.  All old customization 
variables for mail-mode, rnews-reply-mode and gnus-msg are now
obsolete.

*** Gnus is now able to generate "sparse" threads -- threads where
missing articles are represented by empty nodes.

    (setq gnus-build-sparse-threads 'some)

*** Outgoing articles are stored on a special archive server.

    To disable this:  (setq gnus-message-archive-group nil)

*** Partial thread regeneration now happens when articles are
referred. 

*** Gnus can make use of GroupLens predictions:

    (setq gnus-use-grouplens t)

*** A trn-line tree buffer can be displayed.

    (setq gnus-use-trees t)

*** An nn-like pick-and-read minor mode is available for the summary
buffers. 

    (add-hook 'gnus-summary-mode-hook 'gnus-pick-mode)

*** In binary groups you can use a special binary minor mode:

    `M-x gnus-binary-mode'

*** Groups can be grouped in a folding topic hierarchy.

    (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)

*** Gnus can re-send and bounce mail.

    Use the `S D r' and `S D b'.

*** Groups can now have a score, and bubbling based on entry frequency
is possible.

    (add-hook 'gnus-summary-exit-hook 'gnus-summary-bubble-group)

*** Groups can be process-marked, and commands can be performed on
groups of groups.

*** Caching is possible in virtual groups.

*** nndoc now understands all kinds of digests, mail boxes, rnews news
batches, ClariNet briefs collections, and just about everything else. 

*** Gnus has a new backend (nnsoup) to create/read SOUP packets.

*** The Gnus cache is much faster.

*** Groups can be sorted according to many criteria.

    For instance: (setq gnus-group-sort-function 'gnus-group-sort-by-rank)

*** New group parameters have been introduced to set list-address and
expiry times.

*** All formatting specs allow specifying faces to be used.

*** There are several more commands for setting/removing/acting on
process marked articles on the `M P' submap.

*** The summary buffer can be limited to show parts of the available
articles based on a wide range of criteria.  These commands have been
bound to keys on the `/' submap.

*** Articles can be made persistent -- as an alternative to saving
articles with the `*' command.

*** All functions for hiding article elements are now toggles.

*** Article headers can be buttonized.

    (add-hook 'gnus-article-display-hook 'gnus-article-add-buttons-to-head)

*** All mail backends support fetching articles by Message-ID.

*** Duplicate mail can now be treated properly.  See the 
`nnmail-treat-duplicates' variable.

*** All summary mode commands are available directly from the article
buffer. 

*** Frames can be part of `gnus-buffer-configuration'.

*** Mail can be re-scanned by a daemonic process.

*** Gnus can make use of NoCeM files to filter spam.

    (setq gnus-use-nocem t)

*** Groups can be made permanently visible. 

    (setq gnus-permanently-visible-groups "^nnml:")

*** Many new hooks have been introduced to make customizing easier. 

*** Gnus respects the Mail-Copies-To header.

*** Threads can be gathered by looking at the References header. 

    (setq gnus-summary-thread-gathering-function 
          'gnus-gather-threads-by-references)

*** Read articles can be stored in a special backlog buffer to avoid
refetching.  

    (setq gnus-keep-backlog 50)

*** A clean copy of the current article is always stored in a separate
buffer to allow easier treatment.

*** Gnus can suggest where to save articles.  See `gnus-split-methods'.

*** Gnus doesn't have to do as much prompting when saving.

    (setq gnus-prompt-before-saving t)

*** gnus-uu can view decoded files asynchronously while fetching
articles. 

    (setq gnus-uu-grabbed-file-functions 'gnus-uu-grab-view)

*** Filling in the article buffer now works properly on cited text. 

*** Hiding cited text adds buttons to toggle hiding, and how much
cited text to hide is now customizable.

    (setq gnus-cited-lines-visible 2)

*** Boring headers can be hidden.

    (add-hook 'gnus-article-display-hook 'gnus-article-hide-boring-headers)

*** Default scoring values can now be set from the menu bar.

*** Further syntax checking of outgoing articles have been added.

The Gnus manual has been expanded.  It explains all these new features
in greater detail.

* Lisp Changes in Emacs 19.32

** The function set-visited-file-name now accepts an optional
second argument NO-QUERY.  If it is non-nil, then the user is not
asked for confirmation in the case where the specified file already
exists.

** The variable print-length applies to printing vectors and bitvectors,
as well as lists.

** The new function keymap-parent returns the parent keymap
of a given keymap.

** The new function set-keymap-parent specifies a new parent for a
given keymap.  The arguments are KEYMAP and PARENT.  PARENT must be a
keymap or nil.

** Sometimes menu keymaps use a command name, a symbol, which is really
an automatically generated alias for some other command, the "real"
name.  In such a case, you should give that alias symbol a non-nil
menu-alias property.  That property tells the menu system to look for
equivalent keys for the real name instead of equivalent keys for the
alias.

* Editing Changes in Emacs 19.31

** Freedom of the press restricted in the United States.

Emacs has been censored in accord with the Communications Decency Act.
This includes removing some features of the doctor program.  That law
was described by its supporters as a ban on pornography, but it bans
far more than that.  The Emacs distribution has never contained any
pornography, but parts of it were nonetheless prohibited.

For information on US government censorship of the Internet, and what
you can do to bring back freedom of the press, see the web site
`http://www.vtw.org/'.

** A note about C mode indentation customization.

The old (Emacs 19.29) ways of specifying a C indentation style
do not normally work in the new implementation of C mode.
It has its own methods of customizing indentation, which are
much more powerful than the old C mode.  See the Editing Programs
chapter of the manual for details.

However, you can load the library cc-compat to make the old
customization variables take effect.

** Marking with the mouse.

When you mark a region with the mouse, the region now remains
highlighted until the next input event, regardless of whether you are
using M-x transient-mark-mode.

** Improved Windows NT/95 support.

*** Emacs now supports scroll bars on Windows NT and Windows 95.

*** Emacs now supports subprocesses on Windows 95.  (Subprocesses used
to work on NT only and not on 95.)

*** There are difficulties with subprocesses, though, due to problems
in Windows, beyond the control of Emacs.  They work fine as long as
you run Windows applications.  The problems arise when you run a DOS
application in a subprocesses.  Since current shells run as DOS
applications, these problems are significant.

If you run a DOS application in a subprocess, then the application is
likely to busy-wait, which means that your machine will be 100% busy.
However, if you don't mind the temporary heavy load, the subprocess
will work ok as long as you tell it to terminate before you start any
other DOS application as a subprocess.

Emacs is unable to terminate or interrupt a DOS subprocess.
You have to do this by providing input directly to the subprocess.

If you run two DOS applications at the same time in two separate
subprocesses, even if one of them is asynchronous, you will probably
have to reboot your machine--until then, it will remain 100% busy.
Windows simply does not cope when one Windows process tries to run two
separate DOS subprocesses.  Typing CTL-ALT-DEL and then choosing
Shutdown seems to work although it may take a few minutes.

** M-x resize-minibuffer-mode.

This command, not previously mentioned in NEWS, toggles a mode in
which the minibuffer window expands to show as many lines as the
minibuffer contains.

** `title' frame parameter and resource.

The `title' X resource now specifies just the frame title, nothing else.
It does not affect the name used for looking up other X resources.
It works by setting the new `title' frame paramaeter, which likewise
affects just the displayed title of the frame.

The `name' parameter continues to do what it used to do:
it specifies the frame name for looking up X resources,
and also serves as the default for the displayed title
when the `title' parameter is unspecified or nil.

** Emacs now uses the X toolkit by default, if you have a new
enough version of X installed (X11R5 or newer).

** When you compile Emacs with the Motif widget set, Motif handles the
F10 key by activating the menu bar.  To avoid confusion, the usual
Emacs binding of F10 is replaced with a no-op when using Motif.

If you want to be able to use F10 in Emacs, you can rebind the Motif
menubar to some other key which you don't use.  To do so, add
something like this to your X resources file.  This example rebinds
the Motif menu bar activation key to S-F12:

   Emacs*defaultVirtualBindings:  osfMenuBar : Shift<Key>F12

** In overwrite mode, DEL now inserts spaces in most cases
to replace the characters it "deletes".

** The Rmail summary now shows the number of lines in each message.

** Rmail has a new command M-x unforward-rmail-message, which extracts
a forwarded message from the message that forwarded it.  To use it,
select a message which contains a forwarded message and then type the command.
It inserts the forwarded message as a separate Rmail message
immediately after the selected one.

This command also undoes the textual modifications that are standardly
made, as part of forwarding, by Rmail and other mail reader programs.

** Turning off saving of .saves-... files in your home directory.

Each Emacs session writes a file named .saves-... in your home
directory to record which files M-x recover-session should recover.
If you exit Emacs normally with C-x C-c, it deletes that file.  If
Emacs or the operating system crashes, the file remains for M-x
recover-session.

You can turn off the writing of these files by setting
auto-save-list-file-name to nil.  If you do this, M-x recover-session
will not work.

Some previous Emacs versions failed to delete these files even on
normal exit.  This is fixed now.  If you are thinking of turning off
this feature because of past experiences with versions that had this
bug, it would make sense to check whether you still want to do so
now that the bug is fixed.

** Changes to Version Control (VC)

There is a new variable, vc-follow-symlinks.  It indicates what to do
when you visit a link to a file that is under version control.
Editing the file through the link bypasses the version control system,
which is dangerous and probably not what you want.

If this variable is t, VC follows the link and visits the real file,
telling you about it in the echo area.  If it is `ask' (the default),
VC asks for confirmation whether it should follow the link.  If nil,
the link is visited and a warning displayed.

** iso-acc.el now lets you specify a choice of language.
Languages include "latin-1" (the default) and "latin-2" (which
is designed for entering ISO Latin-2 characters).

There are also choices for specific human languages such as french and
portuguese.  These are subsets of Latin-1, which differ in that they
enable only the accent characters needed for particular language.
The other accent characters, not needed for the chosen language,
remain normal.

** Posting articles and sending mail now has M-TAB completion on various
header fields (Newsgroups, To, CC, ...).

Completion in the Newsgroups header depends on the list of groups
known to your news reader.  Completion in the Followup-To header
offers those groups which are in the Newsgroups header, since
Followup-To usually just holds one of those.

Completion in fields that hold mail addresses works based on the list
of local users plus your aliases.  Additionally, if your site provides
a mail directory or a specific host to use for any unrecognized user
name, you can arrange to query that host for completion also.  (See the
documentation of variables `mail-directory-process' and
`mail-directory-stream'.)

** A greatly extended sgml-mode offers new features such as (to be configured)
skeletons with completing read for tags and attributes, typing named
characters including optionally all 8bit characters, making tags invisible
with optional alternate display text, skipping and deleting tag(pair)s.

Note: since Emacs' syntax feature cannot limit the special meaning of ', " and
- to inside <>, for some texts the result, especially of font locking, may be
wrong (see `sgml-specials' if you get wrong results).

The derived html-mode configures this with tags and attributes more or
less HTML3ish.  It also offers optional quick keys like C-c 1 for
headline or C-c u for unordered list (see `html-quick-keys').  Edit /
Text Properties / Face or M-g combinations create tags as applicable.
Outline minor mode is supported and level 1 font-locking tries to
fontify tag contents (which only works when they fit on one line, due
to a limitation in font-lock).

External viewing via browse-url can occur automatically upon saving.

** M-x imenu-add-to-menubar now adds to the menu bar for the current
buffer only.  If you want to put an Imenu item in the menu bar for all
buffers that use a particular major mode, use the mode hook, as in
this example:

    (add-hook 'emacs-lisp-mode-hook
	      '(lambda () (imenu-add-to-menubar "Index")))

** Changes in BibTeX mode.

*** Field names may now contain digits, hyphens, and underscores.

*** Font Lock mode is now supported.

*** bibtex-make-optional-field is no longer interactive.

*** If bibtex-maintain-sorted-entries is non-nil, inserting new
entries is now done with a faster algorithm.  However, inserting
will fail in this case if the buffer contains invalid entries or
isn't in sorted order, so you should finish each entry with C-c C-c
(bibtex-close-entry) after you have inserted or modified it.
The default value of bibtex-maintain-sorted-entries is nil.

*** Function `show-all' is no longer bound to a key, since C-u C-c C-q
does the same job.

*** Entries with quotes inside quote-delimited fields (as `author =
"Stefan Sch{\"o}f"') are now supported.

*** Case in field names doesn't matter anymore when searching for help
text.

** Font Lock mode

*** Global Font Lock mode

Font Lock mode can be turned on globally, in buffers that support it, by the
new command global-font-lock-mode.  You can use the new variable
font-lock-global-modes to control which modes have Font Lock mode automagically
turned on.  By default, this variable is set so that Font Lock mode is turned
on globally where the buffer mode supports it.

For example, to automagically turn on Font Lock mode where supported, put:

 (global-font-lock-mode t)

in your ~/.emacs.

*** Local Refontification

In Font Lock mode, editing a line automatically refontifies that line only.
However, if your change alters the syntactic context for following lines,
those lines remain incorrectly fontified.  To refontify them, use the new
command M-g M-g (font-lock-fontify-block).

In certain major modes, M-g M-g refontifies the entire current function.
(The variable font-lock-mark-block-function controls how to find the
current function.)  In other major modes, M-g M-g refontifies 16 lines
above and below point.

With a prefix argument N, M-g M-g refontifies N lines above and below point.

** Follow mode

Follow mode is a new minor mode combining windows showing the same
buffer into one tall "virtual window".  The windows are typically two
side-by-side windows.  Follow mode makes them scroll together as if
they were a unit.  To use it, go to a frame with just one window,
split it into two side-by-side windows using C-x 3, and then type M-x
follow-mode.

M-x follow-mode turns off Follow mode if it is already enabled.

To display two side-by-side windows and activate Follow mode, use the
command M-x follow-delete-other-windows-and-split.

** hide-show changes.

The hooks hs-hide-hooks and hs-show-hooks have been renamed
to hs-hide-hook and hs-show-hook, to follow the convention for
normal hooks.

** Simula mode now has a menu containing the most important commands.
The new command simula-indent-exp is bound to C-M-q.

** etags can now handle programs written in Erlang.  Files are
recognised by the extensions .erl and .hrl.  The tagged lines are
those that begin a function, record, or macro.

** MSDOS Changes

*** It is now possible to compile Emacs with the version 2 of DJGPP.
Compilation with DJGPP version 1 also still works.

*** The documentation of DOS-specific aspects of Emacs was rewritten
and expanded; see the ``MS-DOS'' node in the on-line docs.

*** Emacs now uses ~ for backup file names, not .bak.

*** You can simulate mouse-3 on two-button mice by simultaneously
pressing both mouse buttons.

*** A number of packages and commands which previously failed or had
restricted functionality on MS-DOS, now work.  The most important ones
are: 

**** Printing (both with `M-x lpr-buffer' and with `ps-print' package)
now works.

**** `Ediff' works (in a single-frame mode).

**** `M-x display-time' can be used on MS-DOS (due to the new
implementation of Emacs timers, see below).

**** `Dired' supports Unix-style shell wildcards.

**** The `c-macro-expand' command now works as on other platforms.

**** `M-x recover-session' works.

**** `M-x list-colors-display' displays all the available colors.

**** The `TPU-EDT' package works.

* Lisp changes in Emacs 19.31.

** The function using-unix-filesystems on Windows NT and Windows 95
tells Emacs to read and write files assuming that they reside on a
remote Unix filesystem.  No CR/LF translation is done on any files in
this case.  Invoking using-unix-filesystems with t actives this
behavior, and invoking it with any other value deactivates it.

** Change in system-type and system-configuration values.

The value of system-type on a Linux-based GNU system is now `lignux',
not `linux'.  This means that some programs which use `system-type'
need to be changed.  The value of `system-configuration' will also
be different.

It is generally recommended to use `system-configuration' rather
than `system-type'.

See the file LINUX-GNU in this directory for more about this.

** The functions shell-command and dired-call-process
now run file name handlers for default-directory, if it has them.

** Undoing the deletion of text now restores the positions of markers
that pointed into or next to the deleted text.

** Timers created with run-at-time now work internally to Emacs, and
no longer use a separate process.  Therefore, they now work more
reliably and can be used for shorter time delays.

The new function run-with-timer is a convenient way to set up a timer
to run a specified amount of time after the present.  A call looks
like this:

  (run-with-timer SECS REPEAT FUNCTION ARGS...)

SECS says how many seconds should elapse before the timer happens.
It may be an integer or a floating point number.  When the timer
becomes ripe, the action is to call FUNCTION with arguments ARGS.

REPEAT gives the interval for repeating the timer (measured in
seconds).  It may be an integer or a floating point number.  nil or 0
means don't repeat at all--call FUNCTION just once.

*** with-timeout provides an easy way to do something but give
up if too much time passes.

  (with-timeout (SECONDS TIMEOUT-FORMS...) BODY...)

This executes BODY, but gives up after SECONDS seconds.
If it gives up, it runs the TIMEOUT-FORMS and returns the value
of the last one of them.  Normally it returns the value of the last
form in BODY.

*** You can now arrange to call a function whenever Emacs is idle for
a certain length of time.  To do this, call run-with-idle-timer.  A
call looks like this:

  (run-with-idle-timer SECS REPEAT FUNCTION ARGS...)

SECS says how many seconds of idleness should elapse before the timer
runs.  It may be an integer or a floating point number.  When the
timer becomes ripe, the action is to call FUNCTION with arguments
ARGS.

Emacs becomes idle whenever it finishes executing a keyboard or mouse
command.  It remains idle until it receives another keyboard or mouse
command.

REPEAT, if non-nil, means this timer should be activated again each
time Emacs becomes idle and remains idle for SECS seconds The timer
does not repeat if Emacs *remains* idle; it runs at most once after
each time Emacs becomes idle.

If REPEAT is nil, the timer runs just once, the first time Emacs is
idle for SECS seconds.

*** post-command-idle-hook is now obsolete; you shouldn't use it at
all, because it interferes with the idle timer mechanism.  If your
programs use post-command-idle-hook, convert them to use idle timers
instead.

*** y-or-n-p-with-timeout lets you ask a question but give up if
there is no answer within a certain time.

  (y-or-n-p-with-timeout PROMPT SECONDS DEFAULT-VALUE)

asks the question PROMPT (just like y-or-n-p).  If the user answers
within SECONDS seconds, it returns the answer that the user gave.
Otherwise it gives up after SECONDS seconds, and returns DEFAULT-VALUE.

** Minor change to `encode-time': you can now pass more than seven
arguments.  If you do that, the first six arguments have the usual
meaning, the last argument is interpreted as the time zone, and the
arguments in between are ignored.

This means that it works to use the list returned by `decode-time' as
the list of arguments for `encode-time'.

** The default value of load-path now includes the directory
/usr/local/share/emacs/VERSION/site-lisp In addition to
/usr/local/share/emacs/site-lisp.  You can use this new directory for
site-specific Lisp packages that belong with a particular Emacs
version.

It is not unusual for a Lisp package that works well in one Emacs
version to cause trouble in another.  Sometimes packages need updating
for incompatible changes; sometimes they look at internal data that
has changed; sometimes the package has been installed in Emacs itself
and the installed version should be used.  Whatever the reason for the
problem, this new feature makes it easier to solve.

** When your program contains a fixed file name (like .completions or
.abbrev.defs), the file name usually needs to be different on operating
systems with limited file name syntax.

Now you can avoid ad-hoc conditionals by using the function
convert-standard-filename to convert the file name to a proper form
for each operating system.  Here is an example of use, from the file
completions.el:

(defvar save-completions-file-name
        (convert-standard-filename "~/.completions")
  "*The filename to save completions to.")

This sets the variable save-completions-file-name to a value that
depends on the operating system, because the definition of
convert-standard-filename depends on the operating system.  On
Unix-like systems, it returns the specified file name unchanged.  On
MS-DOS, it adapts the name to fit the limitations of that system.

** The interactive spec N now returns the numeric prefix argument
rather than the raw prefix argument.  (It still reads a number using the
minibuffer if there is no prefix argument at all.)

** When a process is deleted, this no longer disconnects the process
marker from its buffer position.

** The variable garbage-collection-messages now controls whether
Emacs displays a message at the beginning and end of garbage collection.
The default is nil, meaning there are no messages.

** The variable debug-ignored-errors specifies certain kinds of errors
that should not enter the debugger.  Its value is a list of error
condition symbols and/or regular expressions.  If the error has any
of the condition symbols listed, or if any of the regular expressions
matches the error message, then that error does not enter the debugger,
regardless of the value of debug-on-error.

This variable is initialized to match certain common but uninteresting
errors that happen often during editing.

** The new function error-message-string converts an error datum
into its error message.  The error datum is what condition-case
puts into the variable, to describe the error that happened.

** Anything that changes which buffer appears in a given window
now runs the window-scroll-functions for that window.

** The new function get-buffer-window-list returns a list of windows displaying
a buffer.  The function is called with the buffer (a buffer object or a buffer
name) and two optional arguments specifying the minibuffer windows and frames
to search.  Therefore this function takes optional args like next-window etc.,
and not get-buffer-window.

** buffer-substring now runs the hook buffer-access-fontify-functions,
calling each function with two arguments--the range of the buffer
being accessed.  buffer-substring-no-properties does not call them.

If you use this feature, you should set the variable
buffer-access-fontified-property to a non-nil symbol, which is a
property name.  Then, if all the characters in the buffer range have a
non-nil value for that property, the buffer-access-fontify-functions
are not called.  When called, these functions should put a non-nil
property on the text that they fontify, so that they won't get called
over and over for the same text.

** Changes in lisp-mnt.el

*** The lisp-mnt package can now recognize file headers that are written
in the formats used by the `what' command and the RCS `ident' command:

;; @(#) HEADER: text
;; $HEADER: text $

in addition to the normal

;; HEADER: text

*** The commands lm-verify and lm-synopsis are now interactive.  lm-verify
checks that the library file has proper sections and headers, and
lm-synopsis extracts first line "synopsis'"information.

* For older news, see the file ONEWS.

----------------------------------------------------------------------
Copyright information:

Copyright (C) 1996, 1997 Free Software Foundation, Inc.

   Permission is granted to anyone to make or distribute verbatim copies
   of this document as received, in any medium, provided that the
   copyright notice and this permission notice are preserved,
   thus giving the recipient permission to redistribute in turn.

   Permission is granted to distribute modified versions
   of this document, or of portions of it,
   under the above conditions, provided also that they
   carry prominent notices stating who last changed them.

Local variables:
mode: outline
paragraph-separate: "[ 	]*$"
end:

