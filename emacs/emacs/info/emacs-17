This is Info file ../info/emacs, produced by Makeinfo version 1.68 from
the input file emacs.texi.


File: emacs,  Node: Rmail Files,  Next: Rmail Output,  Prev: Rmail Inbox,  Up: Rmail

Multiple Rmail Files
====================

   Rmail operates by default on your "primary Rmail file", which is
named `~/RMAIL' and receives your incoming mail from your system inbox
file.  But you can also have other Rmail files and edit them with
Rmail.  These files can receive mail through their own inboxes, or you
can move messages into them with explicit Rmail commands (*note Rmail
Output::.).

`i FILE <RET>'
     Read FILE into Emacs and run Rmail on it (`rmail-input').

`M-x set-rmail-inbox-list <RET> FILES <RET>'
     Specify inbox file names for current Rmail file to get mail from.

`g'
     Merge new mail from current Rmail file's inboxes
     (`rmail-get-new-mail').

`C-u g FILE <RET>'
     Merge new mail from inbox file FILE.

   To run Rmail on a file other than your primary Rmail file, you may
use the `i' (`rmail-input') command in Rmail.  This visits the file in
Rmail mode.  You can use `M-x rmail-input' even when not in Rmail.

   The file you read with `i' should normally be a valid Rmail file.
If it is not, Rmail tries to decompose it into a stream of messages in
various known formats.  If it succeeds, it converts the whole file to an
Rmail file.  If you specify a file name that doesn't exist, `i'
initializes a new buffer for creating a new Rmail file.

   You can also select an Rmail file from a menu.  Choose first the menu
bar Classify item, then from the Classify menu choose the Input Rmail
File item; then choose the Rmail file you want.  The variables
`rmail-secondary-file-directory' and `rmail-secondary-file-regexp'
specify which files to offer in the menu: the first variable says which
directory to find them in; the second says which files in that
directory to offer (all those that match the regular expression).
These variables also apply to choosing a file for output (*note Rmail
Output::.).

   Each Rmail file can contain a list of inbox file names; you can
specify this list with `M-x set-rmail-inbox-list <RET> FILES <RET>'.
The argument can contain any number of file names, separated by commas.
It can also be empty, which specifies that this file should have no
inboxes.  Once a list of inboxes is specified, the Rmail file remembers
it permanently until you specify a different list.

   As a special exception, if your primary Rmail file does not specify
any inbox files, it uses your standard system inbox.

   The `g' command (`rmail-get-new-mail') merges mail into the current
Rmail file from its specified inboxes.  If the Rmail file has no
inboxes, `g' does nothing.  The command `M-x rmail' also merges new
mail into your primary Rmail file.

   To merge mail from a file that is not the usual inbox, give the `g'
key a numeric argument, as in `C-u g'.  Then it reads a file name and
merges mail from that file.  The inbox file is not deleted or changed
in any way when `g' with an argument is used.  This is, therefore, a
general way of merging one file of messages into another.


File: emacs,  Node: Rmail Output,  Next: Rmail Labels,  Prev: Rmail Files,  Up: Rmail

Copying Messages Out to Files
=============================

   These commands copy messages from an Rmail file into another file.

`o FILE <RET>'
     Append a copy of the current message to the file FILE, using Rmail
     file format by default (`rmail-output-to-rmail-file').

`C-o FILE <RET>'
     Append a copy of the current message to the file FILE, using
     system inbox file format by default (`rmail-output').

`w FILE <RET>'
     Output just the message body to the file FILE, taking the default
     file name from the message `Subject' header.

   The commands `o' and `C-o' copy the current message into a specified
file.  This file may be an Rmail file or it may be in system inbox
format; the output commands ascertain the file's format and write the
copied message in that format.

   The `o' and `C-o' commands differ in two ways: each has its own
separate default file name, and each specifies a choice of format to
use when the file does not already exist.  The `o' command uses Rmail
format when it creates a new file, while `C-o' uses system inbox format
for a new file.  The default file name for `o' is the file name used
last with `o', and the default file name for `C-o' is the file name
used last with `C-o'.

   If the output file is an Rmail file currently visited in an Emacs
buffer, the output commands copy the message into that buffer.  It is
up to you to save the buffer eventually in its file.

   Sometimes you may receive a message whose body holds the contents of
a file.  You can save the body to a file (excluding the message header)
with the `w' command (`rmail-output-body-to-file').  Often these
messages contain the intended file name in the `Subject' field, so the
`w' command uses the `Subject' field as the default for the output file
name.  However, the file name is read using the minibuffer, so you can
specify a different name if you wish.

   You can also output a message to an Rmail file chosen with a menu.
Choose first the menu bar Classify item, then from the Classify menu
choose the Output Rmail Menu item; then choose the Rmail file you want.
This outputs the current message to that file, like the `o' command.
The variables `rmail-secondary-file-directory' and
`rmail-secondary-file-regexp' specify which files to offer in the menu:
the first variable says which directory to find them in; the second
says which files in that directory to offer (all those that match the
regular expression).

   Copying a message gives the original copy of the message the `filed'
attribute, so that `filed' appears in the mode line when such a message
is current.  If you like to keep just a single copy of every mail
message, set the variable `rmail-delete-after-output' to `t'; then the
`o' and `C-o' commands delete the original message after copying it.
(You can undelete the original afterward if you wish.)

   Copying messages into files in system inbox format uses the header
fields that are displayed in Rmail at the time.  Thus, if you use the
`t' command to view the entire header and then copy the message, the
entire header is copied.  *Note Rmail Display::.

   The variable `rmail-output-file-alist' lets you specify intelligent
defaults for the output file, based on the contents of the current
message.  The value should be a list whose elements have this form:

     (REGEXP . NAME-EXP)

If there's a match for REGEXP in the current message, then the default
file name for output is NAME-EXP.  If multiple elements match the
message, the first matching element decides the default file name.  The
subexpression NAME-EXP may be a string constant giving the file name to
use, or more generally it may be any Lisp expression that returns a
file name as a string.  `rmail-output-file-alist' applies to both `o'
and `C-o'.


File: emacs,  Node: Rmail Labels,  Next: Rmail Attributes,  Prev: Rmail Output,  Up: Rmail

Labels
======

   Each message can have various "labels" assigned to it as a means of
classification.  Each label has a name; different names are different
labels.  Any given label is either present or absent on a particular
message.  A few label names have standard meanings and are given to
messages automatically by Rmail when appropriate; these special labels
are called "attributes".  (*Note Rmail Attributes::.)  All other labels
are assigned only by users.

`a LABEL <RET>'
     Assign the label LABEL to the current message (`rmail-add-label').

`k LABEL <RET>'
     Remove the label LABEL from the current message
     (`rmail-kill-label').

`C-M-n LABELS <RET>'
     Move to the next message that has one of the labels LABELS
     (`rmail-next-labeled-message').

`C-M-p LABELS <RET>'
     Move to the previous message that has one of the labels LABELS
     (`rmail-previous-labeled-message').

`C-M-l LABELS <RET>'
     Make a summary of all messages containing any of the labels LABELS
     (`rmail-summary-by-labels').

   The `a' (`rmail-add-label') and `k' (`rmail-kill-label') commands
allow you to assign or remove any label on the current message.  If the
LABEL argument is empty, it means to assign or remove the same label
most recently assigned or removed.

   Once you have given messages labels to classify them as you wish,
there are two ways to use the labels: in moving and in summaries.

   The command `C-M-n LABELS <RET>' (`rmail-next-labeled-message')
moves to the next message that has one of the labels LABELS.  The
argument LABELS specifies one or more label names, separated by commas.
`C-M-p' (`rmail-previous-labeled-message') is similar, but moves
backwards to previous messages.  A numeric argument to either command
serves as a repeat count.

   The command `C-M-l LABELS <RET>' (`rmail-summary-by-labels')
displays a summary containing only the messages that have at least one
of a specified set of labels.  The argument LABELS is one or more label
names, separated by commas.  *Note Rmail Summary::, for information on
summaries.

   If the LABELS argument to `C-M-n', `C-M-p' or `C-M-l' is empty, it
means to use the last set of labels specified for any of these commands.


File: emacs,  Node: Rmail Attributes,  Next: Rmail Reply,  Prev: Rmail Labels,  Up: Rmail

Rmail Attributes
================

   Some labels such as `deleted' and `filed' have built-in meanings and
are assigned to or removed from messages automatically at appropriate
times; these labels are called "attributes".  Here is a list of Rmail
attributes:

`unseen'
     Means the message has never been current.  Assigned to messages
     when they come from an inbox file, and removed when a message is
     made current.  When you start Rmail, it initially shows the first
     message that has this attribute.

`deleted'
     Means the message is deleted.  Assigned by deletion commands and
     removed by undeletion commands (*note Rmail Deletion::.).

`filed'
     Means the message has been copied to some other file.  Assigned by
     the file output commands (*note Rmail Files::.).

`answered'
     Means you have mailed an answer to the message.  Assigned by the
     `r' command (`rmail-reply').  *Note Rmail Reply::.

`forwarded'
     Means you have forwarded the message.  Assigned by the `f' command
     (`rmail-forward').  *Note Rmail Reply::.

`edited'
     Means you have edited the text of the message within Rmail.  *Note
     Rmail Editing::.

`resent'
     Means you have resent the message.  Assigned by the command `M-x
     rmail-resend'.  *Note Rmail Reply::.

   All other labels are assigned or removed only by the user, and have
no standard meaning.


File: emacs,  Node: Rmail Reply,  Next: Rmail Summary,  Prev: Rmail Attributes,  Up: Rmail

Sending Replies
===============

   Rmail has several commands that use Mail mode to send outgoing mail.
*Note Sending Mail::, for information on using Mail mode, including
certain features meant to work with Rmail.  What this section documents
are the special commands of Rmail for entering Mail mode.  Note that the
usual keys for sending mail--`C-x m', `C-x 4 m', and `C-x 5 m'--are
available in Rmail mode and work just as they usually do.

`m'
     Send a message (`rmail-mail').

`c'
     Continue editing the already started outgoing message
     (`rmail-continue').

`r'
     Send a reply to the current Rmail message (`rmail-reply').

`f'
     Forward the current message to other users (`rmail-forward').

`C-u f'
     Resend the current message to other users (`rmail-resend').

`M-m'
     Try sending a bounced message a second time
     (`rmail-retry-failure').

   The most common reason to send a message while in Rmail is to reply
to the message you are reading.  To do this, type `r' (`rmail-reply').
This displays the `*mail*' buffer in another window, much like `C-x 4
m', but preinitializes the `Subject', `To', `CC' and `In-reply-to'
header fields based on the message you are replying to.  The `To' field
starts out as the address of the person who sent the message you
received, and the `CC' field starts out with all the other recipients
of that message.

   You can exclude certain recipients from being placed automatically in
the `CC', using the variable `rmail-dont-reply-to-names'.  Its value
should be a regular expression (as a string); any recipient that the
regular expression matches, is excluded from the `CC' field.  The
default value matches your own name, and any name starting with
`info-'.  (Those names are excluded because there is a convention of
using them for large mailing lists to broadcast announcements.)

   To omit the `CC' field completely for a particular reply, enter the
reply command with a numeric argument: `C-u r' or `1 r'.

   Once the `*mail*' buffer has been initialized, editing and sending
the mail goes as usual (*note Sending Mail::.).  You can edit the
presupplied header fields if they are not right for you.  You can also
use the commands of Mail mode (*note Mail Mode::.), including `C-c C-y'
which yanks in the message that you are replying to.  You can switch to
the Rmail buffer, select a different message there, switch back, and
yank the new current message.

   Sometimes a message does not reach its destination.  Mailers usually
send the failed message back to you, enclosed in a "failure message".
The Rmail command `M-m' (`rmail-retry-failure') prepares to send the
same message a second time: it sets up a `*mail*' buffer with the same
text and header fields as before.  If you type `C-c C-c' right away,
you send the message again exactly the same as the first time.
Alternatively, you can edit the text or headers and then send it.  The
variable `rmail-retry-ignored-headers', in the same format as
`rmail-ignored-headers' (*note Rmail Display::.), controls which
headers are stripped from the failed message when retrying it; it
defaults to nil.

   Another frequent reason to send mail in Rmail is to "forward" the
current message to other users.  `f' (`rmail-forward') makes this easy
by preinitializing the `*mail*' buffer with the current message as the
text, and a subject designating a forwarded message.  All you have to
do is fill in the recipients and send.  When you forward a message,
recipients get a message which is "from" you, and which has the
original message in its contents.

   Forwarding a message encloses it between two delimiter lines.  It
also modifies every line that starts with a dash, by inserting `- ' at
the start of the line.  When you receive a forwarded message, if it
contains something besides ordinary text--for example, program source
code--you might find it useful to undo that transformation.  You can do
this by selecting the forwarded message and typing `M-x
unforward-rmail-message'.  This command extracts the original forwarded
message, deleting the inserted `- ' strings, and inserts it into the
Rmail file as a separate message immediately following the current one.

   "Resending" is an alternative similar to forwarding; the difference
is that resending sends a message that is "from" the original sender,
just as it reached you--with a few added header fields `Resent-from'
and `Resent-to' to indicate that it came via you.  To resend a message
in Rmail, use `C-u f'.  (`f' runs `rmail-forward', which is programmed
to invoke `rmail-resend' if you provide a numeric argument.)

   The `m' (`rmail-mail') command is used to start editing an outgoing
message that is not a reply.  It leaves the header fields empty.  Its
only difference from `C-x 4 m' is that it makes the Rmail buffer
accessible for `C-c C-y', just as `r' does.  Thus, `m' can be used to
reply to or forward a message; it can do anything `r' or `f' can do.

   The `c' (`rmail-continue') command resumes editing the `*mail*'
buffer, to finish editing an outgoing message you were already
composing, or to alter a message you have sent.

   If you set the variable `rmail-mail-new-frame' to a non-`nil' value,
then all the Rmail commands to start sending a message create a new
frame to edit it in.  This frame is deleted when you send the message,
or when you use the `Don't Send' item in the `Mail' menu.

   All the Rmail commands to send a message use the mail-composition
method that you have chosen (*note Mail Methods::.).


File: emacs,  Node: Rmail Summary,  Next: Rmail Sorting,  Prev: Rmail Reply,  Up: Rmail

Summaries
=========

   A "summary" is a buffer containing one line per message to give you
an overview of the mail in an Rmail file.  Each line shows the message
number, the sender, the labels, and the subject.  Almost all Rmail
commands are valid in the summary buffer also; these apply to the
message described by the current line of the summary.  Moving point in
the summary buffer selects messages as you move to their summary lines.

   A summary buffer applies to a single Rmail file only; if you are
editing multiple Rmail files, each one can have its own summary buffer.
The summary buffer name is made by appending `-summary' to the Rmail
buffer's name.  Normally only one summary buffer is displayed at a time.

* Menu:

* Rmail Make Summary::	     Making various sorts of summaries.
* Rmail Summary Edit::	     Manipulating messages from the summary.


File: emacs,  Node: Rmail Make Summary,  Next: Rmail Summary Edit,  Up: Rmail Summary

Making Summaries
----------------

   Here are the commands to create a summary for the current Rmail file.
Once the Rmail file has a summary buffer, changes in the Rmail file
(such as deleting or expunging messages, and getting new mail)
automatically update the summary.

`h'
`C-M-h'
     Summarize all messages (`rmail-summary').

`l LABELS <RET>'
`C-M-l LABELS <RET>'
     Summarize message that have one or more of the specified labels
     (`rmail-summary-by-labels').

`C-M-r RCPTS <RET>'
     Summarize messages that have one or more of the specified
     recipients (`rmail-summary-by-recipients').

`C-M-t TOPIC <RET>'
     Summarize messages that have a match for the specified regexp
     TOPIC in their subjects (`rmail-summary-by-topic').

   The `h' or `C-M-h' (`rmail-summary') command fills the summary buffer
for the current Rmail file with a summary of all the messages in the
file.  It then displays and selects the summary buffer in another
window.

   `C-M-l LABELS <RET>' (`rmail-summary-by-labels') makes a partial
summary mentioning only the messages that have one or more of the
labels LABELS.  LABELS should contain label names separated by commas.

   `C-M-r RCPTS <RET>' (`rmail-summary-by-recipients') makes a partial
summary mentioning only the messages that have one or more of the
recipients RCPTS.  RCPTS should contain mailing addresses separated by
commas.

   `C-M-t TOPIC <RET>' (`rmail-summary-by-topic') makes a partial
summary mentioning only the messages whose subjects have a match for
the regular expression TOPIC.

   Note that there is only one summary buffer for any Rmail file;
making one kind of summary discards any previously made summary.

   The variable `rmail-summary-window-size' says how many lines to use
for the summary window.  The variable `rmail-summary-line-count-flag'
controls whether the summary line for a message should include the line
count of the message.


File: emacs,  Node: Rmail Summary Edit,  Prev: Rmail Make Summary,  Up: Rmail Summary

Editing in Summaries
--------------------

   You can use the Rmail summary buffer to do almost anything you can do
in the Rmail buffer itself.  In fact, once you have a summary buffer,
there's no need to switch back to the Rmail buffer.

   You can select and display various messages in the Rmail buffer, from
the summary buffer, just by moving point in the summary buffer to
different lines.  It doesn't matter what Emacs command you use to move
point; whichever line point is on at the end of the command, that
message is selected in the Rmail buffer.

   Almost all Rmail commands work in the summary buffer as well as in
the Rmail buffer.  Thus, `d' in the summary buffer deletes the current
message, `u' undeletes, and `x' expunges.  `o' and `C-o' output the
current message to a file; `r' starts a reply to it.  You can scroll
the current message while remaining in the summary buffer using <SPC>
and <DEL>.

   The Rmail commands to move between messages also work in the summary
buffer, but with a twist: they move through the set of messages included
in the summary.  They also ensure the Rmail buffer appears on the screen
(unlike cursor motion commands, which update the contents of the Rmail
buffer but don't display it in a window unless it already appears).
Here is a list of these commands:

`n'
     Move to next line, skipping lines saying `deleted', and select its
     message.

`p'
     Move to previous line, skipping lines saying `deleted', and select
     its message.

`M-n'
     Move to next line and select its message.

`M-p'
     Move to previous line and select its message.

`>'
     Move to the last line, and select its message.

`<'
     Move to the first line, and select its message.

`M-s PATTERN <RET>'
     Search through messages for PATTERN starting with the current
     message; select the message found, and move point in the summary
     buffer to that message's line.

   Deletion, undeletion, and getting new mail, and even selection of a
different message all update the summary buffer when you do them in the
Rmail buffer.  If the variable `rmail-redisplay-summary' is non-`nil',
these actions also bring the summary buffer back onto the screen.

   When you are finished using the summary, type `w'
(`rmail-summary-wipe') to delete the summary buffer's window.  You can
also exit Rmail while in the summary: `q' (`rmail-summary-quit')
deletes the summary window, then exits from Rmail by saving the Rmail
file and switching to another buffer.


File: emacs,  Node: Rmail Sorting,  Next: Rmail Display,  Prev: Rmail Summary,  Up: Rmail

Sorting the Rmail File
======================

`M-x rmail-sort-by-date'
     Sort messages of current Rmail file by date.

`M-x rmail-sort-by-subject'
     Sort messages of current Rmail file by subject.

`M-x rmail-sort-by-author'
     Sort messages of current Rmail file by author's name.

`M-x rmail-sort-by-recipient'
     Sort messages of current Rmail file by recipient's names.

`M-x rmail-sort-by-correspondent'
     Sort messages of current Rmail file by the name of the other
     correspondent.

`M-x rmail-sort-by-lines'
     Sort messages of current Rmail file by size (number of lines).

`M-x rmail-sort-by-keywords <RET> LABELS <RET>'
     Sort messages of current Rmail file by labels.  The argument
     LABELS should be a comma-separated list of labels.  The order of
     these labels specifies the order of messages; messages with the
     first label come first, messages with the second label come
     second, and so on.  Messages which have none of these labels come
     last.

   The Rmail sort commands perform a *stable sort*: if there is no
reason to prefer either one of two messages, their order remains
unchanged.  You can use this to sort by more than one criterion.  For
example, if you use `rmail-sort-by-date' and then
`rmail-sort-by-author', messages from the same author appear in order
by date.

   With a numeric argument, all these commands reverse the order of
comparison.  This means they sort messages from newest to oldest, from
biggest to smallest, or in reverse alphabetical order.


File: emacs,  Node: Rmail Display,  Next: Rmail Editing,  Prev: Rmail Sorting,  Up: Rmail

Display of Messages
===================

   Rmail reformats the header of each message before displaying it for
the first time.  Reformatting hides uninteresting header fields to
reduce clutter.  You can use the `t' command to show the entire header
or to repeat the header reformatting operation.

`t'
     Toggle display of complete header (`rmail-toggle-header').

   Reformatting the header involves deleting most header fields, on the
grounds that they are not interesting.  The variable
`rmail-ignored-headers' holds a regular expression that specifies which
header fields to hide in this way--if it matches the beginning of a
header field, that whole field is hidden.

   Rmail saves the complete original header before reformatting; to see
it, use the `t' command (`rmail-toggle-header').  This discards the
reformatted headers of the current message and displays it with the
original header.  Repeating `t' reformats the message again.  Selecting
the message again also reformats.

   One consequence of this is that if you edit the reformatted header
(using `e'; *note Rmail Editing::.), subsequent use of `t' will discard
your edits.  On the other hand, if you use `e' after `t', to edit the
original (unreformatted) header, those changes are permanent.

   When the `t' command has a prefix argument, a positive argument
means to show the reformatted header, and a zero or negative argument
means to show the full header.

   When used with a window system that supports multiple fonts, Rmail
highlights certain header fields that are especially interesting--by
default, the `From' and `Subject' fields.  The variable
`rmail-highlighted-headers' holds a regular expression that specifies
the header fields to highlight; if it matches the beginning of a header
field, that whole field is highlighted.

   If you specify unusual colors for your text foreground and
background, the colors used for highlighting may not go well with them.
If so, specify different colors for the `highlight' face.  That is
worth doing because the `highlight' face is used for other kinds of
highlighting as well.  *Note Faces::, for how to do this.

   To turn off highlighting entirely in Rmail, set
`rmail-highlighted-headers' to `nil'.


File: emacs,  Node: Rmail Editing,  Next: Rmail Digest,  Prev: Rmail Display,  Up: Rmail

Editing Within a Message
========================

   Most of the usual Emacs commands are available in Rmail mode, though
a few, such as `C-M-n' and `C-M-h', are redefined by Rmail for other
purposes.  However, the Rmail buffer is normally read only, and most of
the letters are redefined as Rmail commands.  If you want to edit the
text of a message, you must use the Rmail command `e'.

`e'
     Edit the current message as ordinary text.

   The `e' command (`rmail-edit-current-message') switches from Rmail
mode into Rmail Edit mode, another major mode which is nearly the same
as Text mode.  The mode line indicates this change.

   In Rmail Edit mode, letters insert themselves as usual and the Rmail
commands are not available.  When you are finished editing the message
and are ready to go back to Rmail, type `C-c C-c', which switches back
to Rmail mode.  Alternatively, you can return to Rmail mode but cancel
all the editing that you have done, by typing `C-c C-]'.

   Entering Rmail Edit mode runs the hook `text-mode-hook'; then it
runs the hook `rmail-edit-mode-hook' (*note Hooks::.).  It adds the
attribute `edited' to the message.


File: emacs,  Node: Rmail Digest,  Next: Out of Rmail,  Prev: Rmail Editing,  Up: Rmail

Digest Messages
===============

   A "digest message" is a message which exists to contain and carry
several other messages.  Digests are used on some moderated mailing
lists; all the messages that arrive for the list during a period of time
such as one day are put inside a single digest which is then sent to the
subscribers.  Transmitting the single digest uses much less computer
time than transmitting the individual messages even though the total
size is the same, because the per-message overhead in network mail
transmission is considerable.

   When you receive a digest message, the most convenient way to read
it is to "undigestify" it: to turn it back into many individual
messages.  Then you can read and delete the individual messages as it
suits you.

   To do this, select the digest message and type the command `M-x
undigestify-rmail-message'.  This extracts the submessages as separate
Rmail messages, and inserts them following the digest.  The digest
message itself is flagged as deleted.


File: emacs,  Node: Out of Rmail,  Next: Rmail Rot13,  Prev: Rmail Digest,  Up: Rmail

Converting an Rmail File to Inbox Format
========================================

   The command `M-x unrmail' converts a file in Rmail format to inbox
format (also known as the system mailbox format), so that you can use it
with other mail-editing tools.  You must specify two arguments, the name
of the Rmail file and the name to use for the converted file.  `M-x
unrmail' does not alter the Rmail file itself.


File: emacs,  Node: Rmail Rot13,  Next: Movemail,  Prev: Out of Rmail,  Up: Rmail

Reading Rot13 Messages
======================

   Mailing list messages that might offend some readers are sometimes
encoded in a simple code called "rot13"--so named because it rotates
the alphabet by 13 letters.  This code is not for secrecy, as it
provides none; rather, it enables those who might be offended to avoid
ever seeing the real text of the message.

   To view a buffer using the rot13 code, use the command `M-x
rot13-other-window'.  This displays the current buffer in another window
which applies the code when displaying the text.


File: emacs,  Node: Movemail,  Prev: Rmail Rot13,  Up: Rmail

`movemail' and POP
==================

   When getting new mail, Rmail first copies the new mail from the inbox
file to the Rmail file; then it saves the Rmail file; then it truncates
the inbox file.  This way, a system crash may cause duplication of mail
between the inbox and the Rmail file, but cannot lose mail.  If
`rmail-preserve-inbox' is non-`nil', then Rmail will copy new mail from
the inbox file to the Rmail file without truncating the inbox file.
You may wish to set this, for example, on a portable computer you use
to check your mail via POP while traveling, so that your mail will
remain on the server and you can save it later on your workstation.

   In some cases, Rmail copies the new mail from the inbox file
indirectly.  First it runs the `movemail' program to move the mail from
the inbox to an intermediate file called `~/.newmail-INBOXNAME'.  Then
Rmail merges the new mail from that file, saves the Rmail file, and
only then deletes the intermediate file.  If there is a crash at the
wrong time, this file continues to exist, and Rmail will use it again
the next time it gets new mail from that inbox.

   If Rmail is unable to convert the data in `~/.newmail-INBOXNAME'
into Babyl format, it renames the file to `~/RMAILOSE.N' (N is an
integer chosen to make the name unique) so that Rmail will not have
trouble with the data again.  You should look at the file, find
whatever message confuses Rmail (probably one that includes the
control-underscore character, octal code 037), and delete it.  Then you
can use `1 g' to get new mail from the corrected file.

   Some sites use a method called POP for accessing users' inbox data
instead of storing the data in inbox files.  `movemail' can work with
POP if you compile it with the macro `MAIL_USE_POP' defined.
`movemail' only works with POP3, not with older versions of POP.

   Assuming you have compiled and installed `movemail' appropriately,
you can specify a POP inbox with a "file name" of the form
`po:USERNAME'.  `movemail' handles such a name by opening a connection
to the POP server.  The `MAILHOST' environment variable specifies the
machine to look for the server on.

   Accessing mail via POP may require a password.  If the variable
`rmail-pop-password' is non-`nil', it specifies the password to use for
POP.  Alternatively, if `rmail-pop-password-required' is non-`nil',
then Rmail asks you for the password to use.


File: emacs,  Node: Dired,  Next: Calendar/Diary,  Prev: Rmail,  Up: Top

Dired, the Directory Editor
***************************

   Dired makes an Emacs buffer containing a listing of a directory, and
optionally some of its subdirectories as well.  You can use the normal
Emacs commands to move around in this buffer, and special Dired commands
to operate on the files listed.

* Menu:

* Enter: Dired Enter.         How to invoke Dired.
* Commands: Dired Commands.   Commands in the Dired buffer.
* Deletion: Dired Deletion.   Deleting files with Dired.
* Flagging Many Files::       Flagging files based on their names.
* Visit: Dired Visiting.      Other file operations through Dired.
* Marks vs Flags::	      Flagging for deletion vs marking.
* Operating on Files::	      How to copy, rename, print, compress, etc.
			        either one file or several files.
* Shell Commands in Dired::   Running a shell command on the marked files.
* Transforming File Names::   Using patterns to rename multiple files.
* Comparison in Dired::	      Running `diff' by way of Dired.
* Subdirectories in Dired::   Adding subdirectories to the Dired buffer.
* Subdirectory Motion::	      Moving across subdirectories, and up and down.
* Hiding Subdirectories::     Making subdirectories visible or invisible.
* Updating: Dired Updating.   Discarding lines for files of no interest.
* Find: Dired and Find.	      Using `find' to choose the files for Dired.


File: emacs,  Node: Dired Enter,  Next: Dired Commands,  Up: Dired

Entering Dired
==============

   To invoke Dired, do `C-x d' or `M-x dired'.  The command reads a
directory name or wildcard file name pattern as a minibuffer argument
to specify which files to list.  Where `dired' differs from
`list-directory' is in putting the buffer into Dired mode so that the
special commands of Dired are available.

   The variable `dired-listing-switches' specifies the options to give
to `ls' for listing directory; this string *must* contain `-l'.  If you
use a numeric prefix argument with the `dired' command, you can specify
the `ls' switches with the minibuffer after you finish entering the
directory specification.

   To display the Dired buffer in another window rather than in the
selected window, use `C-x 4 d' (`dired-other-window)' instead of `C-x
d'.  `C-x 5 d' (`dired-other-frame') uses a separate frame to display
the Dired buffer.


File: emacs,  Node: Dired Commands,  Next: Dired Deletion,  Prev: Dired Enter,  Up: Dired

Commands in the Dired Buffer
============================

   The Dired buffer is "read-only," and inserting text in it is not
useful, so ordinary printing characters such as `d' and `x' are used
for special Dired commands.  Some Dired commands "mark" or "flag" the
"current file" (that is, the file on the current line); other commands
operate on the marked files or on the flagged files.

   All the usual Emacs cursor motion commands are available in Dired
buffers.  Some special-purpose cursor motion commands are also
provided.  The keys `C-n' and `C-p' are redefined to put the cursor at
the beginning of the file name on the line, rather than at the
beginning of the line.

   For extra convenience, <SPC> and `n' in Dired are equivalent to
`C-n'.  `p' is equivalent to `C-p'.  (Moving by lines is so common in
Dired that it deserves to be easy to type.)  <DEL> (move up and unflag)
is often useful simply for moving up.


File: emacs,  Node: Dired Deletion,  Next: Flagging Many Files,  Prev: Dired Commands,  Up: Dired

Deleting Files with Dired
=========================

   The primary use of Dired is to "flag" files for deletion and then
delete the files previously flagged.

`d'
     Flag this file for deletion.

`u'
     Remove deletion flag on this line.

`<DEL>'
     Move point to previous line and remove the deletion flag on that
     line.

`x'
     Delete the files that are flagged for deletion.

   You can flag a file for deletion by moving to the line describing the
file and typing `d'.  The deletion flag is visible as a `D' at the
beginning of the line.  This command moves point to the next line, so
that repeated `d' commands flag successive files.  A numeric argument
serves as a repeat count.

   The files are flagged for deletion rather than deleted immediately to
reduce the danger of deleting a file accidentally.  Until you direct
Dired to expunge the flagged files, you can remove deletion flags using
the commands `u' and <DEL>.  `u' works just like `d', but removes flags
rather than making flags.  <DEL> moves upward, removing flags; it is
like `u' with argument -1.

   To delete the flagged files, type `x' (`dired-expunge').  This
command first displays a list of all the file names flagged for
deletion, and requests confirmation with `yes'.  If you confirm, Dired
deletes the flagged files, then deletes their lines from the text of
the Dired buffer.  The shortened Dired buffer remains selected.

   If you answer `no' or quit with `C-g' when asked to confirm, you
return immediately to Dired, with the deletion flags still present in
the buffer, and no files actually deleted.


File: emacs,  Node: Flagging Many Files,  Next: Dired Visiting,  Prev: Dired Deletion,  Up: Dired

Flagging Many Files
===================

`#'
     Flag all auto-save files (files whose names start and end with `#')
     for deletion (*note Auto Save::.).

`~'
     Flag all backup files (files whose names end with `~') for deletion
     (*note Backup::.).

`&'
     Flag for deletion all files with certain kinds of names, names that
     suggest you could easily create the files again.

`. (Period)'
     Flag excess numeric backup files for deletion.  The oldest and
     newest few backup files of any one file are exempt; the middle
     ones are flagged.

`% d REGEXP <RET>'
     Flag for deletion all files whose names match the regular
     expression REGEXP (`dired-flag-files-regexp').

   The `#', `~', `&', and `.' commands flag many files for deletion,
based on their file names.  These commands are useful precisely because
they do not themselves delete any files; you can remove the deletion
flags from any flagged files that you really wish to keep.

   `&' flags files whose names match the regular expression specified
by the variable `dired-garbage-files-regexp'.  By default, this matches
certain files produced by TeX, and the `.orig' and `.rej' files
produced by `patch'.

   `#' flags for deletion all files whose names look like auto-save
files (*note Auto Save::.)--that is, files whose names begin and end
with `#'.  `~' flags for deletion all files whose names say they are
backup files (*note Backup::.)--that is, whose names end in `~'.

   `.' (Period) flags just some of the backup files for deletion: all
but the oldest few and newest few backups of any one file.  Normally
`dired-kept-versions' (*not* `kept-new-versions'; that applies only
when saving) specifies the number of newest versions of each file to
keep, and `kept-old-versions' specifies the number of oldest versions
to keep.

   Period with a positive numeric argument, as in `C-u 3 .', specifies
the number of newest versions to keep, overriding
`dired-kept-versions'.  A negative numeric argument overrides
`kept-old-versions', using minus the value of the argument to specify
the number of oldest versions of each file to keep.

   The `% d' command flags all files whose names match a specified
regular expression (`dired-flag-files-regexp').  Only the non-directory
part of the file name is used in matching.  You can use `^' and `$' to
anchor matches.  You can exclude subdirectories by hiding them (*note
Hiding Subdirectories::.).


File: emacs,  Node: Dired Visiting,  Next: Marks vs Flags,  Prev: Flagging Many Files,  Up: Dired

Visiting Files in Dired
=======================

   There are several Dired commands for visiting or examining the files
listed in the Dired buffer.  All of them apply to the current line's
file; if that file is really a directory, these commands invoke Dired on
that subdirectory (making a separate Dired buffer).

`f'
     Visit the file described on the current line, like typing `C-x C-f'
     and supplying that file name (`dired-find-file').  *Note
     Visiting::.

`<RET>'
     Equivalent to `f'.

`o'
     Like `f', but uses another window to display the file's buffer
     (`dired-find-file-other-window').  The Dired buffer remains visible
     in the first window.  This is like using `C-x 4 C-f' to visit the
     file.  *Note Windows::.

`C-o'
     Visit the file described on the current line, and display the
     buffer in another window, but do not select that window
     (`dired-display-file').

`Mouse-2'
     Visit the file named by the line you click on
     (`dired-mouse-find-file-other-window').  This uses another window
     to display the file, like the `o' command.

`v'
     View the file described on the current line, using `M-x view-file'
     (`dired-view-file').

     Viewing a file is like visiting it, but is slanted toward moving
     around in the file conveniently and does not allow changing the
     file.  *Note View File: Misc File Ops.


File: emacs,  Node: Marks vs Flags,  Next: Operating on Files,  Prev: Dired Visiting,  Up: Dired

Dired Marks vs. Flags
=====================

   Instead of flagging a file with `D', you can "mark" the file with
some other character (usually `*').  Most Dired commands to operate on
files, aside from "expunge" (`x'), look for files marked with `*'.

   Here are some commands for marking with `*' (and also for
unmarking).  (*Note Dired Deletion::, for commands to flag and unflag
files.)

`m'
`* m'
     Mark the current file with `*' (`dired-mark').  With a numeric
     argument N, mark the next N files starting with the current file.
     (If N is negative, mark the previous -N files.)

`* *'
     Mark all executable files with `*' (`dired-mark-executables').
     With a numeric argument, unmark all those files.

`* @'
     Mark all symbolic links with `*' (`dired-mark-symlinks').  With a
     numeric argument, unmark all those files.

`* /'
     Mark with `*' all files which are actually directories, except for
     `.' and `..' (`dired-mark-directories').  With a numeric argument,
     unmark all those files.

`u'
`* u'
     Remove any mark on this line (`dired-unmark').

`<DEL>'
`* <DEL>'
     Move point to previous line and remove any mark on that line
     (`dired-unmark-backward').

`* ! MARKCHAR'
     Remove all marks from all the files in this Dired buffer
     (`dired-unmark-all-files-no-query').

`* ? MARKCHAR'
     Remove all marks that use the character MARKCHAR
     (`dired-unmark-all-files').  The argument is a single
     character--do not use <RET> to terminate it.

     With a numeric argument, this command queries about each marked
     file, asking whether to remove its mark.  You can answer `y'
     meaning yes, `n' meaning no, or `!' to remove the marks from the
     remaining files without asking about them.

`* c OLD NEW'
     Replace all marks that use the character OLD with marks that use
     the character NEW (`dired-change-marks').  This command is the
     primary way to create or use marks other than `*' or `D'.  The
     arguments are single characters--do not use <RET> to terminate
     them.

     You can use almost any character as a mark character by means of
     this command, to distinguish various classes of files.  If OLD is a
     space (` '), then the command operates on all unmarked files; if
     NEW is a space, then the command unmarks the files it acts on.

     To illustrate the power of this command, here is how to put `*'
     marks on all the files that are unmarked, while unmarking all
     those that have `*' marks:

          * c * t  * c SPC *  * c t SPC

`% m REGEXP <RET>'
`* % REGEXP <RET>'
     Mark (with `*') all files whose names match the regular expression
     REGEXP (`dired-mark-files-regexp').  This command is like `% d',
     except that it marks files with `*' instead of flagging with `D'.
     *Note Flagging Many Files::.

     Only the non-directory part of the file name is used in matching.
     Use `^' and `$' to anchor matches.  Exclude subdirectories by
     hiding them (*note Hiding Subdirectories::.).


File: emacs,  Node: Operating on Files,  Next: Shell Commands in Dired,  Prev: Marks vs Flags,  Up: Dired

Operating on Files
==================

   This section describes the basic Dired commands to operate on one
file or several files.  All of these commands are capital letters; all
of them use the minibuffer, either to read an argument or to ask for
confirmation, before they act.  All use the following convention to
decide which files to manipulate:

   * If you give the command a numeric prefix argument N, it operates
     on the next N files, starting with the current file.  (If N is
     negative, the command operates on the -N files preceding the
     current line.)

   * Otherwise, if some files are marked with `*', the command operates
     on all those files.

   * Otherwise, the command operates on the current file only.

   Here are the file-manipulating commands that operate on files in this
way.  (Some other Dired commands, such as `!' and the `%' commands,
also use these conventions to decide which files to work on.)

`C NEW <RET>'
     Copy the specified files (`dired-do-copy').  The argument NEW is
     the directory to copy into, or (if copying a single file) the new
     name.

     If `dired-copy-preserve-time' is non-`nil', then copying with this
     command sets the modification time of the new file to be the same
     as that of the old file.

`R NEW <RET>'
     Rename the specified files (`dired-do-rename').  The argument NEW
     is the directory to rename into, or (if renaming a single file)
     the new name.

     Dired automatically changes the visited file name of buffers
     associated with renamed files so that they refer to the new names.

`H NEW <RET>'
     Make hard links to the specified files (`dired-do-hardlink').  The
     argument NEW is the directory to make the links in, or (if making
     just one link) the name to give the link.

`S NEW <RET>'
     Make symbolic links to the specified files (`dired-do-symlink').
     The argument NEW is the directory to make the links in, or (if
     making just one link) the name to give the link.

`M MODESPEC <RET>'
     Change the mode (also called "permission bits") of the specified
     files (`dired-do-chmod').  This uses the `chmod' program, so
     MODESPEC can be any argument that `chmod' can handle.

`G NEWGROUP <RET>'
     Change the group of the specified files to NEWGROUP
     (`dired-do-chgrp').

`O NEWOWNER <RET>'
     Change the owner of the specified files to NEWOWNER
     (`dired-do-chown').  (On most systems, only the superuser can do
     this.)

     The variable `dired-chown-program' specifies the name of the
     program to use to do the work (different systems put `chown' in
     different places).

`P COMMAND <RET>'
     Print the specified files (`dired-do-print').  You must specify the
     command to print them with, but the minibuffer starts out with a
     suitable guess made using the variables `lpr-command' and
     `lpr-switches' (the same variables that `lpr-file' uses; *note
     Hardcopy::.).

`Z'
     Compress the specified files (`dired-do-compress').  If the file
     appears to be a compressed file already, it is uncompressed
     instead.

`L'
     Load the specified Emacs Lisp files (`dired-do-load').  *Note Lisp
     Libraries::.

`B'
     Byte compile the specified Emacs Lisp files
     (`dired-do-byte-compile').  *Note Byte Compilation: (elisp)Byte
     Compilation.

`A REGEXP <RET>'
     Search all the specified files for the regular expression REGEXP
     (`dired-do-search').

     This command is a variant of `tags-search'.  The search stops at
     the first match it finds; use `M-,' to resume the search and find
     the next match.  *Note Tags Search::.

`Q FROM <RET> TO <RET>'
     Perform `query-replace-regexp' on each of the specified files,
     replacing matches for FROM (a regular expression) with the string
     TO (`dired-do-query-replace').

     This command is a variant of `tags-query-replace'.  If you exit the
     query replace loop, you can use `M-,' to resume the scan and
     replace more matches.  *Note Tags Search::.

   One special file-operation command is `+'
(`dired-create-directory').  This command reads a directory name and
creates the directory if it does not already exist.

