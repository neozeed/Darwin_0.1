.TH "rsyncd\&.conf" "5" "13 May 1998" "" "" 
.SH "NAME" 
rsyncd\&.conf \- configuration file for rsync server
.SH "SYNOPSIS" 
.PP 
rsyncd\&.conf
.PP 
.SH "DESCRIPTION" 
.PP 
The rsyncd\&.conf file is the runtime configuration file for rsync when
run with the --daemon option\&. When run in this way rsync becomes a
rsync server listening on TCP port 873\&. Connections from rsync clients
are accepted for either anonymous or authenticated rsync sessions\&. 
.PP 
The rsyncd\&.conf file controls authentication, access, logging and
available modules\&.
.PP 
.SH "FILE FORMAT" 
.PP 
The file consists of modules and parameters\&. A module begins with the 
name of the module in square brackets and continues until the next
module begins\&. Modules contain parameters of the form \'name = value\'\&.
.PP 
The file is line-based - that is, each newline-terminated line represents
either a comment, a module name or a parameter\&.
.PP 
Only the first equals sign in a parameter is significant\&. Whitespace before 
or after the first equals sign is discarded\&. Leading, trailing and internal
whitespace in module and parameter names is irrelevant\&. Leading and
trailing whitespace in a parameter value is discarded\&. Internal whitespace
within a parameter value is retained verbatim\&.
.PP 
Any line beginning with a hash (#) is ignored, as are lines containing 
only whitespace\&.
.PP 
Any line ending in a \e is "continued" on the next line in the
customary UNIX fashion\&.
.PP 
The values following the equals sign in parameters are all either a string
(no quotes needed) or a boolean, which may be given as yes/no, 0/1 or
true/false\&. Case is not significant in boolean values, but is preserved
in string values\&. 
.PP 
.SH "LAUNCHING THE RSYNC DAEMON" 
.PP 
The rsync daemon is launched by specifying the --daemon option to
rsync\&. The daemon must run with root privileges\&.
.PP 
You can launch it either via inetd or as a standalone daemon\&. If run
as a daemon then just run the command "rsync --daemon" from a suitable
startup script\&.
.PP 
When run via inetd you should add a line like this to /etc/services:
.PP 
.RS 
rsync           873/tcp
.RE 
.PP 
and a single line something like this to /etc/inetd\&.conf:
.PP 
.RS 
rsync   stream  tcp     nowait  root   /usr/bin/rsync rsyncd --daemon
.RE 
.PP 
You will then need to send inetd a HUP signal to tell it to reread its
config file\&.
.PP 
Note that you should not send the rsync server a HUP signal to force
it to reread the \f(CW/etc/rsyncd\&.conf\fP\&. The file is re-read on each client
connection\&. 
.PP 
.SH "GLOBAL OPTIONS" 
.PP 
The first parameters in the file (before a [module] header) are the
global parameters\&. 
.PP 
You may also include any module parameters in the global part of the
config file in which case the supplied value will override the
default for that parameter\&.
.PP 
.IP "\fBmotd file\fP" 
The "motd file" option allows you to specify a
"message of the day" to display to clients on each connect\&. This
usually contains site information and any legal notices\&. The default
is no motd file\&.
.IP 
.IP "\fBmax connections\fP" 
The "max connections" option allows you to
specify the maximum number of simultaneous connections you will allow
to your rsync server\&. Any clients connecting when the maximum has
been reached will receive a message telling them to try later\&. 
The default is 0 which means no limit\&.
.IP 
.IP "\fBlock file\fP" 
The "lock file" option specifies the file to use to
support the "max connections" option\&. The rsync server uses record
locking on this file to ensure that the max connections limit is not
exceeded\&. The default is \f(CW/var/run/rsyncd\&.lock\fP\&.
.IP 
.IP "\fBlog file\fP" 
The "log file" option tells the rsync daemon to log
messages to that file rather than using syslog\&. This is particularly
useful on systems (such as AIX) where syslog() doesn\'t work for
chrooted programs like rsync\&.
.IP 
.IP "\fBsyslog facility\fP" 
The "syslog facility" option allows you to
specify the syslog facility name to use when logging messages from the
rsync server\&. You may use any standard syslog facility name which is
defined on your system\&. Common names are auth, authpriv, cron, daemon,
ftp, kern, lpr, mail, news, security, syslog, user, uucp, local0,
local1, local2, local3, local4, local5, local6 and local7\&. The default
is daemon\&. 
.IP 
.IP "\fBsocket options\fP" 
This option can provide endless fun for people
who like to tune their systems to the utmost degree\&. You can set all
sorts of socket options which may make transfers faster (or
slower!)\&. Read the man page for the setsockopt() system call for
details on some of the options you may be able to set\&. By default no
special socket options are set\&.
.IP 
.PP 
.SH "MODULE OPTIONS" 
.PP 
After the global options you should define a number of modules, each
module exports a directory tree as a symbolic name\&. Modules are
exported by specifying a module name in square brackets [module]
followed by the options for that module\&.
.PP 
.IP 
.IP "\fBcomment\fP" 
The "comment" option specifies a description string
that is displayed next to the module name when clients obtain a list
of available modules\&. The default is no comment\&.
.IP 
.IP "\fBpath\fP" 
The "path" option specifies the directory in the servers
filesystem to make available in this module\&. The rsync server will
chroot to this path before starting the file transfer with the
client\&. You must specify this option for each module in \f(CW/etc/rsyncd\&.conf\fP\&.
.IP 
.IP "\fBread only\fP" 
The "read only" option determines whether clients
will be able to upload files or not\&. If "read only" is true then any
attempted uploads will fail\&. If "read only" is false then uploads will
be possible if file permissions on the server allow them\&. The default
is for all modules to be read only\&.
.IP 
.IP "\fBlist\fP" 
The "list" option determines if this module should be
listed when the client asks for a listing of available modules\&. By
setting this to false you can create hidden modules\&. The default is
for modules to be listable\&.
.IP 
.IP "\fBuid\fP" 
The "uid" option specifies the user name or user id that
file transfers to and from that module should take place as\&. In
combination with the "gid" option this determines what file
permissions are available\&. The default is the user "nobody"\&.
.IP 
.IP "\fBgid\fP" 
The "gid" option specifies the group name or group id that
file transfers to and from that module should take place as\&. This
complements the "uid" option\&. The default is the group "nobody"\&.
.IP 
.IP "\fBexclude\fP" 
The "exclude" option allows you to specify a space
separated list of patterns to add to the exclude list\&. This is
equivalent to the client specifying these patterns with the --exclude
option\&. Note that this option is not designed with strong security in
mind, it is quite possible that a client may find a way to bypass this
exclude list\&. If you want to absolutely ensure that certain files
cannot be accessed then use the uid/gid options in combination with
file permissions\&.
.IP 
.IP "\fBexclude from\fP" 
The "exclude from" option specifies a filename
on the server that contains exclude patterns, one per line\&. This is
equivalent to the client specifying the --exclude-from option with a
equivalent file\&. See also the note about security for the exclude
option above\&.
.IP 
.IP "\fBauth users\fP" 
The "auth users" option specifies a comma
and space separated list of usernames that will be allowed to connect
to this module\&. The usernames do not need to exist on the local
system\&. If "auth users" is set then the client will be challenged to
supply a username and password to connect to the module\&. A challenge
response authentication protocol is used for this exchange\&. The plain
text usernames are passwords are stored in the file specified by the
"secrets file" option\&. The default is for all users to be able to
connect without a password (this is called "anonymous rsync")\&.
.IP 
.IP "\fBsecrets file\fP" 
The "secrets file" option specifies the name of
a file that contains the username:password pairs used for
authenticating this module\&. This file is only consulted if the "auth
users" option is specified\&. The file is line based and contains
username:password pairs separated by a single colon\&. Any line starting
with a hash (#) is considered a comment and is skipped\&. The passwords
can contain any characters but be warned that many operating systems
limit the length of passwords that can be typed at the client end, so
you may find that passwords longer than 8 characters don\'t work\&. 
.IP 
\fBYou should make sure that the secrets file is not readable by anyone
other than the system administrator\&.\fP There is no default for the
"secrets file" option, you must choose a name (such as
\f(CW/etc/rsyncd\&.secrets\fP)\&.
.IP 
.IP "\fBhosts allow\fP" 
The "hosts allow" option allows you to specify a
list of patterns that are matched against a connecting clients
hostname and IP address\&. If none of the patterns match then the
connection is rejected\&.
.IP 
Each pattern can be in one of five forms:
.IP 
.IP o 
a dotted decimal IP address\&. In this case the incoming machines
IP address must match exactly\&.
.IP 
.IP o 
a address/mask in the form a\&.b\&.c\&.d/n were n is the number of
one bits in in the netmask\&. All IP addresses which match the masked
IP address will be allowed in\&.
.IP 
.IP o 
a address/mask in the form a\&.b\&.c\&.d/e\&.f\&.g\&.h where e\&.f\&.g\&.h is a
netmask in dotted decimal notation\&. All IP addresses which match the masked
IP address will be allowed in\&.
.IP 
.IP o 
a hostname\&. The hostname as determined by a reverse lookup will
be matched (case insensitive) against the pattern\&. Only an exact
match is allowed in\&.
.IP 
.IP o 
a hostname pattern using wildcards\&. These are matched using the
same rules as normal unix filename matching\&. If the pattern matches
then the client is allowed in\&.
.IP 
You can also combine "hosts allow" with a separate "hosts deny"
option\&. If both options are specified then the "hosts allow" option s
checked first and a match results in the client being able to
connect\&. The "hosts deny" option is then checked and a match means
that the host is rejected\&. If the host does not match either the 
"hosts allow" or the "hosts deny" patterns then it is allowed to
connect\&.
.IP 
The default is no "hosts allow" option, which means all hosts can connect\&.
.IP 
.IP "\fBhosts deny\fP" 
The "hosts deny" option allows you to specify a
list of patterns that are matched against a connecting clients
hostname and IP address\&. If the pattern matches then the connection is
rejected\&. See the "hosts allow" option for more information\&.
.IP 
The default is no "hosts deny" option, which means all hosts can connect\&.
.IP 
.PP 
.SH "AUTHENTICATION STRENGTH" 
.PP 
The authentication protocol used in rsync is a 128 bit MD4 based
challenge response system\&. Although I believe that no one has ever
demonstrated a brute-force break of this sort of system you should
realise that this is not a "military strength" authentication system\&.
It should be good enough for most purposes but if you want really top
quality security then I recommend that you run rsync over ssh\&.
.PP 
Also note that the rsync server protocol does not currently provide any
encryption of the data that is transferred over the link\&. Only
authentication is provided\&. Use ssh as the transport if you want
encryption\&.
.PP 
Future versions of rsync may support SSL for better authentication and
encryption, but that is still being investigated\&.
.PP 
.SH "EXAMPLES" 
.PP 
A simple rsyncd\&.conf file that allow anonymous rsync to a ftp area at
\f(CW/home/ftp\fP would be:
.PP 

.DS 
 

[ftp]
        path = /home/ftp
        comment = ftp export area

.DE 
 

.PP 
A more sophisticated example would be:
.PP 
uid = nobody 
.br 
gid = nobody 
.br 
max connections = 4 
.br 
syslog facility = local5 
.br 
.PP 

.DS 
 
[ftp]
        path = /var/ftp/pub
        comment = whole ftp area (approx 6\&.1 GB)

[sambaftp]
        path = /var/ftp/pub/samba
        comment = Samba ftp area (approx 300 MB)

[rsyncftp]
        path = /var/ftp/pub/rsync
        comment = rsync ftp area (approx 6 MB)
        
[sambawww]
        path = /public_html/samba
        comment = Samba WWW pages (approx 240 MB)

[cvs]
        path = /data/cvs
        comment = CVS repository (requires authentication)
        auth users = tridge, susan
        secrets file = /etc/rsyncd\&.secrets

.DE 
 

.PP 
The /etc/rsyncd\&.secrets file would look something like this:
.PP 
tridge:mypass 
.br 
susan:herpass
.PP 
.SH "FILES" 
.PP 
/etc/rsyncd\&.conf
.PP 
.SH "SEE ALSO" 
.PP 
rsync(1)
.PP 
.SH "DIAGNOSTICS" 
.PP 
.SH "BUGS" 
.PP 
The rsync server does not send all types of error messages to the
client\&. this means a client may be mystified as to why a transfer
failed\&. The error will have been logged by syslog on the server\&.
.PP 
Please report bugs! The rsync bug tracking system is online at
http://samba\&.anu\&.edu\&.au/rsync/
.PP 
.SH "VERSION" 
This man page is current for version 2\&.0 of rsync
.PP 
.SH "CREDITS" 
.PP 
rsync is distributed under the GNU public license\&.  See the file
COPYING for details\&.
.PP 
The primary ftp site for rsync is
ftp://samba\&.anu\&.edu\&.au/pub/rsync\&.
.PP 
A WEB site is available at
http://samba\&.anu\&.edu\&.au/rsync/
.PP 
We would be delighted to hear from you if you like this program\&.
.PP 
This program uses the zlib compression library written by Jean-loup
Gailly and Mark Adler\&.
.PP 
.SH "THANKS" 
.PP 
Thanks to Warren Stanley for his original idea and patch for the rsync
server\&. Thanks to Karsten Thygesen for his many suggestions and
documentation! 
.PP 
.SH "AUTHOR" 
.PP 
rsync was written by Andrew Tridgell and Paul Mackerras\&.  They may be
contacted via email at tridge@samba\&.anu\&.edu\&.au and
Paul\&.Mackerras@cs\&.anu\&.edu\&.au
.PP 
