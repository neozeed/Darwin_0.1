/* This file is automatically generated with "make proto". DO NOT EDIT */

int allow_access(char *addr, char *host, char *allow_list, char *deny_list);
char *auth_server(int fd, int module, char *addr, char *leader);
void auth_client(int fd, char *user, char *challenge);
uint32 get_checksum1(char *buf1,int len);
void get_checksum2(char *buf,int len,char *sum);
void file_checksum(char *fname,char *sum,OFF_T size);
void checksum_init(void);
void sum_init(void);
void sum_update(char *p,int len);
void sum_end(char *sum);
void exit_cleanup(int code);
void cleanup_disable(void);
void cleanup_set(char *fnametmp, char *fname, struct file_struct *file,
		 struct map_struct *buf, int fd1, int fd2);
int start_socket_client(char *host, char *path, int argc, char *argv[]);
int daemon_main(void);
void setup_protocol(int f_out,int f_in);
int claim_connection(char *fname,int max_connections);
int check_exclude(char *name,struct exclude_struct **local_exclude_list,
		  STRUCT_STAT *st);
void add_exclude_list(char *pattern,struct exclude_struct ***list, int include);
void add_exclude(char *pattern, int include);
struct exclude_struct **make_exclude_list(char *fname,
					  struct exclude_struct **list1,
					  int fatal, int include);
void add_exclude_file(char *fname,int fatal,int include);
void send_exclude_list(int f);
void recv_exclude_list(int f);
void add_exclude_line(char *p);
void add_cvs_excludes(void);
int sparse_end(int f);
int write_file(int f,char *buf,int len);
struct map_struct *map_file(int fd,OFF_T len);
char *map_ptr(struct map_struct *map,OFF_T offset,int len);
void unmap_file(struct map_struct *map);
int link_stat(const char *Path, STRUCT_STAT *Buffer) ;
struct file_list *send_file_list(int f,int argc,char *argv[]);
struct file_list *recv_file_list(int f);
int file_compare(struct file_struct **f1,struct file_struct **f2);
int flist_find(struct file_list *flist,struct file_struct *f);
void flist_free(struct file_list *flist);
char *f_name(struct file_struct *f);
void recv_generator(char *fname,struct file_list *flist,int i,int f_out);
void generate_files(int f,struct file_list *flist,char *local_name,int f_recv);
void init_hard_links(struct file_list *flist);
int check_hard_link(struct file_struct *file);
void do_hard_links(struct file_list *flist);
void setup_readbuffer(int f_in);
int32 read_int(int f);
int64 read_longint(int f);
void read_buf(int f,char *buf,int len);
void read_sbuf(int f,char *buf,int len);
unsigned char read_byte(int f);
void io_start_buffering(int fd);
void io_flush(void);
void io_end_buffering(int fd);
void write_int(int f,int32 x);
void write_longint(int f, int64 x);
void write_buf(int f,char *buf,int len);
void write_byte(int f,unsigned char c);
int read_line(int f, char *buf, int maxlen);
void io_printf(int fd, const char *format, ...);
void io_start_multiplex_out(int fd);
void io_start_multiplex_in(int fd);
int io_multiplex_write(int f, char *buf, int len);
void io_close_input(int fd);
char *lp_motd_file(void);
char *lp_lock_file(void);
char *lp_log_file(void);
char *lp_socket_options(void);
int lp_max_connections(void);
int lp_syslog_facility(void);
char *lp_name(int );
char *lp_comment(int );
char *lp_path(int );
BOOL lp_read_only(int );
BOOL lp_list(int );
char *lp_uid(int );
char *lp_gid(int );
char *lp_hosts_allow(int );
char *lp_hosts_deny(int );
char *lp_auth_users(int );
char *lp_secrets_file(int );
char *lp_exclude(int );
char *lp_exclude_from(int );
BOOL lp_load(char *pszFname, int globals_only);
int lp_numservices(void);
int lp_number(char *name);
void log_open(void);
void rprintf(int fd, const char *format, ...);
void rflush(int fd);
void start_server(int f_in, int f_out, int argc, char *argv[]);
int client_run(int f_in, int f_out, int pid, int argc, char *argv[]);
int main(int argc,char *argv[]);
void match_sums(int f,struct sum_struct *s,struct map_struct *buf,OFF_T len);
void match_report(void);
void usage(int F);
int parse_arguments(int argc, char *argv[]);
void server_options(char **args,int *argc);
BOOL pm_process( char *FileName,
                 BOOL (*sfunc)(char *),
                 BOOL (*pfunc)(char *, char *) );
int recv_files(int f_in,struct file_list *flist,char *local_name,int f_gen);
void free_sums(struct sum_struct *s);
int delete_file(char *fname);
int set_perms(char *fname,struct file_struct *file,STRUCT_STAT *st,
	      int report);
void sig_int(void);
void finish_transfer(char *fname, char *fnametmp, struct file_struct *file);
void send_files(struct file_list *flist,int f_out,int f_in);
int open_socket_out(char *host, int port);
int is_a_socket(int fd);
void start_accept_loop(int port, int (*fn)(int ));
void set_socket_options(int fd, char *options);
void become_daemon(void);
char *client_addr(int fd);
char *client_name(int fd);
int do_unlink(char *fname);
int do_symlink(char *fname1, char *fname2);
int do_link(char *fname1, char *fname2);
int do_lchown(const char *path, uid_t owner, gid_t group);
int do_mknod(char *pathname, mode_t mode, dev_t dev);
int do_rmdir(char *pathname);
int do_open(char *pathname, int flags, mode_t mode);
int do_chmod(const char *path, mode_t mode);
int do_rename(char *fname1, char *fname2);
int do_mkdir(char *fname, mode_t mode);
char *do_mktemp(char *template);
int do_stat(const char *fname, STRUCT_STAT *st);
int do_lstat(const char *fname, STRUCT_STAT *st);
int do_fstat(int fd, STRUCT_STAT *st);
OFF_T do_lseek(int fd, OFF_T offset, int whence);
void *do_mmap(void *start, int len, int prot, int flags, int fd, OFF_T offset);
char *d_name(struct dirent *di);
void send_token(int f,int token,struct map_struct *buf,OFF_T offset,
		int n,int toklen);
int recv_token(int f,char **data);
void see_token(char *data, int toklen);
void add_uid(uid_t uid);
void add_gid(gid_t gid);
void send_uid_list(int f);
void recv_uid_list(int f, struct file_list *flist);
int set_nonblocking(int fd);
int piped_child(char **command,int *f_in,int *f_out);
int local_child(int argc, char **argv,int *f_in,int *f_out);
void out_of_memory(char *str);
void overflow(char *str);
int set_modtime(char *fname,time_t modtime);
int create_directory_path(char *fname);
int copy_file(char *source, char *dest, mode_t mode);
void u_sleep(int usec);
pid_t do_fork(void);
void kill_all(int sig);
void strlcpy(char *d, char *s, int maxlen);
void strlcat(char *d, char *s, int maxlen);
int name_to_uid(char *name, uid_t *uid);
int name_to_gid(char *name, gid_t *gid);
int lock_range(int fd, int offset, int len);
void glob_expand(char *base1, char **argv, int *argc, int maxargs);
void strlower(char *s);
int vslprintf(char *str, int n, const char *format, va_list ap);
int slprintf(char *str, int n, char *format, ...);
void *Realloc(void *p, int size);
void clean_fname(char *name);
char *push_dir(char *dir, int save);
int pop_dir(char *dir);
int u_strcmp(const char *cs1, const char *cs2);
void end_progress(void);
void show_progress(OFF_T ofs, OFF_T size);
int unsafe_symlink(char *dest, char *src);
