/*
 * Copyright (c) 1999 Apple Computer, Inc. All rights reserved.
 *
 * @APPLE_LICENSE_HEADER_START@
 * 
 * "Portions Copyright (c) 1999 Apple Computer, Inc.  All Rights
 * Reserved.  This file contains Original Code and/or Modifications of
 * Original Code as defined in and that are subject to the Apple Public
 * Source License Version 1.0 (the 'License').  You may not use this file
 * except in compliance with the License.  Please obtain a copy of the
 * License at http://www.apple.com/publicsource and read it before using
 * this file.
 * 
 * The Original Code and all software distributed under the License are
 * distributed on an 'AS IS' basis, WITHOUT WARRANTY OF ANY KIND, EITHER
 * EXPRESS OR IMPLIED, AND APPLE HEREBY DISCLAIMS ALL SUCH WARRANTIES,
 * INCLUDING WITHOUT LIMITATION, ANY WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE OR NON-INFRINGEMENT.  Please see the
 * License for the specific language governing rights and limitations
 * under the License."
 * 
 * @APPLE_LICENSE_HEADER_END@
 */
/* @(#)klm_prot.h	1.3 92/04/06 4.1NFSSRC Copyr 1990 SMI */
/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#include <rpc/types.h>


#define KLM_PROG ((u_long)100020)
#define KLM_VERS ((u_long)2)
#define KLM_TEST ((u_long)1)
#define KLM_LOCK ((u_long)2)
#define KLM_CANCEL ((u_long)3)
#define KLM_UNLOCK ((u_long)4)
#define KLM_GRANTED ((u_long)5)
#define LM_MAXSTRLEN 1024

enum klm_stats {
	klm_granted = 0,
	klm_denied = 1,
	klm_denied_nolocks = 2,
	klm_working = 3,
	klm_deadlck = 5,
};
typedef enum klm_stats klm_stats;
bool_t xdr_klm_stats();

struct klm_lock {
	char *server_name;
	netobj fh;
	int base;
	int length;
	int type;
	int granted;
	int color;
	int LockID;
	int pid;
	int class;
	long rsys;
	long rpid;
};
typedef struct klm_lock klm_lock;
bool_t xdr_klm_lock();

struct klm_holder {
	bool_t exclusive;
	int base;
	int length;
	int type;
	int granted;
	int color;
	int LockID;
	int pid;
	int class;
	long rsys;
	long rpid;
};
typedef struct klm_holder klm_holder;
bool_t xdr_klm_holder();

struct klm_stat {
	klm_stats stat;
};
typedef struct klm_stat klm_stat;
bool_t xdr_klm_stat();

struct klm_testrply {
	klm_stats stat;
	union {
		struct klm_holder holder;
	} klm_testrply_u;
};
typedef struct klm_testrply klm_testrply;
bool_t xdr_klm_testrply();

struct klm_lockargs {
	bool_t block;
	bool_t exclusive;
	struct klm_lock alock;
};
typedef struct klm_lockargs klm_lockargs;
bool_t xdr_klm_lockargs();

struct klm_testargs {
	bool_t exclusive;
	struct klm_lock alock;
};
typedef struct klm_testargs klm_testargs;
bool_t xdr_klm_testargs();

struct klm_unlockargs {
	struct klm_lock alock;
};
typedef struct klm_unlockargs klm_unlockargs;
bool_t xdr_klm_unlockargs();
